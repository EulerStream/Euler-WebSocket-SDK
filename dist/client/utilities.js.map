{"version":3,"file":"utilities.js","sourceRoot":"","sources":["../../src/client/utilities.ts"],"names":[],"mappings":";;;AAEA,MAAM,MAAM,GAAG,OAAO,OAAO,KAAK,WAAW,IAAI,OAAO,EAAE,GAAG,IAAI,IAAI,CAAC;AAEzD,QAAA,QAAQ,GAAW,MAAM;IAClC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,YAAY,IAAI,0BAA0B;IACxD,CAAC,CAAC,0BAA0B,CAAC;AAEjC;;;;;;GAMG;AACH,SAAS,aAAa,CAAC,GAAwB,EAAE,SAAiB,EAAE,EAAE,SAAiC,EAAE;IACvG,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QAClC,MAAM,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;QACvB,MAAM,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,IAAI,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;QAElD,IAAI,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACxE,aAAa,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;SACvC;aAAM,IAAI,KAAK,KAAK,SAAS,EAAE;YAC9B,MAAM,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,CAAC;SACjC;KACF;IACD,OAAO,MAAM,CAAC;AAChB,CAAC;AAED;;;;GAIG;AACH,SAAgB,kBAAkB,CAAC,OAAyB;IAC1D,MAAM,UAAU,GAAG,aAAa,CAAC,OAAO,CAAC,CAAC;IAC1C,MAAM,WAAW,GAAG,IAAI,eAAe,CAAC,UAAU,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC/D,OAAO,GAAG,gBAAQ,IAAI,WAAW,EAAE,CAAC;AACtC,CAAC;AAJD,gDAIC","sourcesContent":["import {WebSocketOptions} from \"@/client/index\";\n\nconst isNode = typeof process !== \"undefined\" && process?.env != null;\n\nexport const BASE_URL: string = isNode\n    ? process.env.EULER_WS_URL || \"wss://ws.eulerstream.com\"\n    : \"wss://ws.eulerstream.com\";\n\n/**\n * Given an input object, this function flattens it into a single-level object with dot-separated keys.\n *\n * @param obj The input object to flatten\n * @param prefix The prefix to prepend to each key (used for recursion); i.e. the current key path\n * @param result The result object that accumulates the flattened key-value pairs\n */\nfunction flattenObject(obj: Record<string, any>, prefix: string = \"\", result: Record<string, string> = {}): Record<string, string> {\n  for (const key of Object.keys(obj)) {\n    const value = obj[key];\n    const fullKey = prefix ? `${prefix}.${key}` : key;\n\n    if (value !== null && typeof value === \"object\" && !Array.isArray(value)) {\n      flattenObject(value, fullKey, result);\n    } else if (value !== undefined) {\n      result[fullKey] = String(value);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a WebSocket URL with query parameters based on the provided options.\n *\n * @param options {WebSocketOptions} The options to include in the WebSocket URL\n */\nexport function createWebSocketUrl(options: WebSocketOptions): string {\n  const flatParams = flattenObject(options);\n  const queryString = new URLSearchParams(flatParams).toString();\n  return `${BASE_URL}?${queryString}`;\n}"]}