"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.27.1
// source: tiktok-schema.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProfitRankType = exports.MessageDisplayStyle = exports.GiftSource = exports.ExhibitionType = exports.GoalMessageSource = exports.PerceptionDialogIconType = exports.CommentTag = exports.IconDisplayType = exports.RenderType = exports.ShowType = exports.HorizontalOnclickTriggerType = exports.GiftMessageIgnoreConfig = exports.UserMetricsType = exports.TopicActionType = exports.TagType = exports.GiftMessageVersion = exports.LinkmicGiftExpressionStrategy = exports.MultiplierType = exports.PunishTypeId = exports.EmoteScene = exports.UserEmoteUploadSource = exports.RewardCondition = exports.Scene = exports.MessageType = exports.LinkMessageType = exports.CommonContentCase = exports.EnvelopeDisplay = exports.EnvelopeFollowShowStatus = exports.EnvelopeBusinessType = exports.BarrageType = exports.LinkLayerMessageType = exports.ControlAction = exports.MemberMessageAction = exports.LinkmicStatus = exports.SubscribingStatus = exports.OldSubscribeStatus = exports.SubscribeType = exports.ReplyStatus = exports.BusinessCase = exports.GroupStatus = exports.KickoutReason = exports.AgreeStatus = exports.HashtagNamespace = exports.LinkmicApplierSortSetting = exports.TextType = exports.EmotePrivateType = exports.ContentSource = exports.EmoteType = exports.AuditStatus = exports.protobufPackage = void 0;
exports.BadgeStruct_VerticalPaddingRule = exports.BadgeStruct_HorizontalPaddingRule = exports.BadgeStruct_Position = exports.BadgeStruct_BadgeExhibitionType = exports.BadgeStruct_DisplayStatus = exports.BadgeStruct_BadgeSceneType = exports.BadgeStruct_BadgePriorityType = exports.BadgeStruct_BadgeDisplayType = exports.Text_ShowType = exports.CommonMessageData_IMDispatchStrategy = exports.BattleInviteType = exports.BattleType = exports.SourceType = exports.TagClassification = exports.CohostLayoutMode = exports.JoinType = exports.PosIdentityType = exports.LinkmicShareRevenueSetting = exports.ContentInviteSource = exports.LinkUserType = exports.MultiGuestOutsideRoomInviteSource = exports.ContentPositionType = exports.OptPairStatus = exports.CohostABTestType = exports.PollEndType = exports.LinkmicMultiLiveEnum = exports.LinkMicUserAdminType = exports.GuestMicCameraChangeScene = exports.GuestMicCameraManageOp = exports.MuteStatus = exports.LinkRoleType = exports.LinkmicRoleType = exports.LinkSilenceStatus = exports.LinkType = exports.PlayScene = exports.BattleABTestType = exports.GiftPermissionType = exports.Result = exports.BattleAction = exports.RewardStatus = exports.BattleTaskMessageType = exports.Reason = exports.TriggerReason = exports.RankTestMessageScene = exports.PollAppealStatus = exports.PollTemplateStatus = exports.PollKind = exports.HitABStatus = exports.DisplayStyle = exports.UnionAnimationInfoType = void 0;
exports.Gift_GiftSponsorInfoDecoder = exports.Gift_CrossScreenEffectInfo_ReactionEffectIdsEntryDecoder = exports.Gift_CrossScreenEffectInfo_ActionEffectIdsEntryDecoder = exports.Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntryDecoder = exports.Gift_CrossScreenEffectInfoDecoder = exports.Gift_BatchGiftInfoDecoder = exports.Gift_GiftPanelBannerDecoder = exports.GiftDecoder = exports.BadgeStruct_PaddingInfoDecoder = exports.BadgeStruct_StringBadgeDecoder = exports.BadgeStruct_IconConfigDecoder = exports.BadgeStruct_TextBadgeDecoder = exports.BadgeStruct_ImageBadgeDecoder = exports.BadgeStruct_CombineBadgeBackgroundDecoder = exports.BadgeStruct_ProfileCardPanelDecoder = exports.BadgeStruct_NumberConfigDecoder = exports.BadgeStruct_ProjectionConfigDecoder = exports.BadgeStruct_ProfileContentDecoder = exports.BadgeStruct_ArrowConfigDecoder = exports.BadgeStruct_CombineBadgeDecoder = exports.BadgeStructDecoder = exports.Image_ContentDecoder = exports.ImageDecoder = exports.Text_PatternRefDecoder = exports.Text_TextPieceUserDecoder = exports.Text_TextPiecePatternRefDecoder = exports.Text_TextPieceGiftDecoder = exports.Text_TextFormatDecoder = exports.Text_TextPieceDecoder = exports.TextDecoder = exports.CommonMessageData_LiveMessageIDDecoder = exports.CommonMessageData_LiveMessageSEIDecoder = exports.CommonMessageDataDecoder = exports.WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result = exports.WebcastBarrageMessage_IconDisplayType = exports.WebcastBarrageMessage_RenderType = exports.WebcastBarrageMessage_ShowType = exports.WebcastBarrageMessage_BarrageType = exports.WebcastMemberMessage_HitABStatus = exports.WebcastMemberMessage_DisplayStyle = exports.EmoteUploadInfo_UserEmoteUploadSource = exports.WebcastChatMessage_CommentTag = exports.Emote_AuditInfo_AuditTaskType = exports.User_FansClub_FansClubData_UserFansClubStatus = exports.User_FansClub_FansClubData_BadgeIcon = exports.User_FansClub_PreferntialType = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType = exports.User_EcommerceEntrance_EntranceType = exports.User_EcommerceEntrance_CreatorType = exports.User_LiveEventInfo_EventPayMethod = void 0;
exports.TimeStampContainerDecoder = exports.ValueLabelDecoder = exports.TikTokColorDecoder = exports.RankingDecoder = exports.LiveStreamGoalIndicatorDecoder = exports.LiveStreamGoal_GoalStats_GoalComparisonDecoder = exports.LiveStreamGoal_GoalStatsDecoder = exports.LiveStreamGoal_LiveStreamGoalContributor_SubGoalContributionDecoder = exports.LiveStreamGoal_LiveStreamGoalContributorDecoder = exports.LiveStreamGoal_LiveStreamSubGoalGiftDecoder = exports.LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfoDecoder = exports.LiveStreamGoal_LiveStreamSubGoalDecoder = exports.LiveStreamGoal_AuditInfoDecoder = exports.LiveStreamGoalDecoder = exports.UserIdentityDecoder = exports.MsgFilterDecoder = exports.PunishEventInfoDecoder = exports.Emote_EmoteUploadInfoDecoder = exports.Emote_AuditInfoDecoder = exports.EmoteDecoder = exports.User_UserStatsDecoder = exports.User_UserAttrDecoder = exports.User_SubscribeInfoDecoder = exports.User_SubscribeBadgeDecoder = exports.User_PayGradeDecoder = exports.User_OwnRoomDecoder = exports.User_FollowInfoDecoder = exports.User_FansClubInfoDecoder = exports.User_FansClub_FansClubDataDecoder = exports.User_FansClubDecoder = exports.User_EcommerceEntrance_ShowcaseEntranceInfoDecoder = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImageDecoder = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabelDecoder = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabelDecoder = exports.User_EcommerceEntrance_ShopEntranceInfoDecoder = exports.User_EcommerceEntranceDecoder = exports.User_ComboBadgeInfoDecoder = exports.User_BorderDecoder = exports.User_AuthorStatsDecoder = exports.User_AuthenticationInfoDecoder = exports.User_AnchorLevelDecoder = exports.User_ActivityInfoDecoder = exports.User_LiveEventInfo_WalletPackageDecoder = exports.User_LiveEventInfoDecoder = exports.UserDecoder = exports.Gift_GiftBoxInfoDecoder = exports.Gift_GiftSkinToGiftTextsInfoDecoder = exports.Gift_GiftTextDecoder = exports.Gift_GiftSkinDecoder = exports.Gift_UGGiftStructInfoDecoder = void 0;
exports.PlayerDecoder = exports.MultiLiveAnchorPanelSettingsDecoder = exports.LinkerWaitingListChangeContentDecoder = exports.LinkerUpdateUserSettingContentDecoder = exports.LinkerUpdateUserContent_UpdateInfoEntryDecoder = exports.LinkerUpdateUserContentDecoder = exports.LinkmicUserToastContentDecoder = exports.LinkerSysKickOutContentDecoder = exports.LinkerSettingDecoder = exports.LinkerReplyContent_LinkmicInfoDecoder = exports.LinkerReplyContentDecoder = exports.LinkerRandomMatchContentDecoder = exports.LinkerMuteContentDecoder = exports.LinkerMicIdxUpdateContentDecoder = exports.LinkerMediaChangeContent_LinkerMediaChangeOperatorDecoder = exports.LinkerMediaChangeContentDecoder = exports.LinkerListChangeContentDecoder = exports.CohostListChangeContentDecoder = exports.LinkerLinkedListChangeContentDecoder = exports.LinkerLeaveContentDecoder = exports.LinkerKickOutContentDecoder = exports.CohostTopicDecoder = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUserDecoder = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfoDecoder = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_HashtagDecoder = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfoDecoder = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtraDecoder = exports.LinkerInviteContent_LinkerInviteMessageExtraDecoder = exports.LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTestDecoder = exports.LinkerInviteContent_CohostABTestSetting_CohostABTestListDecoder = exports.LinkerInviteContent_CohostABTestSettingDecoder = exports.LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOptionDecoder = exports.LinkerInviteContent_PerceptionDialogInfoDecoder = exports.LinkerInviteContent_LinkmicUserInfoDecoder = exports.LinkerInviteContent_InviteTopHostInfoDecoder = exports.LinkerInviteContent_RtcExtInfoMapEntryDecoder = exports.LinkerInviteContentDecoder = exports.LinkerEnterContentDecoder = exports.LinkerCreateContentDecoder = exports.LinkerCloseContentDecoder = exports.ListUserDecoder = exports.LinkerCancelContentDecoder = exports.LinkerAcceptNoticeContentDecoder = exports.FanTicketRoomNoticeContentDecoder = exports.UserFanTicketDecoder = exports.PollUpdateVotesContentDecoder = exports.VoteUserDecoder = exports.PollOptionInfoDecoder = exports.PollEndContentDecoder = exports.PollStartContentDecoder = void 0;
exports.BusinessContent_ListChangeBizContent_UserInfosEntryDecoder = exports.BusinessContent_ListChangeBizContentDecoder = exports.BusinessContent_PermitJoinGroupBizContentDecoder = exports.BusinessContent_CohostContentDecoder = exports.BusinessContentDecoder = exports.GroupChangeContentDecoder = exports.P2PGroupChangeContentDecoder = exports.CancelJoinGroupContentDecoder = exports.MigrationDetailsDecoder = exports.PermitJoinGroupContentDecoder = exports.LeaveJoinGroupContentDecoder = exports.JoinDirectContentDecoder = exports.FinishChannelContentDecoder = exports.LeaveContentDecoder = exports.CancelInviteContentDecoder = exports.CancelApplyContentDecoder = exports.PosIdentityDecoder = exports.KickOutContentDecoder = exports.ReplyInviteContentDecoder = exports.PermitApplyContentDecoder = exports.ApplyContentDecoder = exports.InviteContentDecoder = exports.MultiLiveContent_KickOutBizContentDecoder = exports.MultiLiveContent_PermitBizContentDecoder = exports.MultiLiveContent_ReplyBizContentDecoder = exports.MultiLiveContent_InviteBizContentDecoder = exports.MultiLiveContent_JoinDirectBizContentDecoder = exports.MultiLiveContent_ApplyBizContentDecoder = exports.MultiLiveContentDecoder = exports.MicPositionDataDecoder = exports.ContentPositionDecoder = exports.ListChangeContentDecoder = exports.CreateChannelContentDecoder = exports.RTCExtraInfo_RTCBitrateMapDecoder = exports.RTCExtraInfo_RTCVideoParamDecoder = exports.RTCExtraInfo_RTCLiveVideoParamDecoder = exports.RTCExtraInfo_RTCEngineConfigDecoder = exports.RTCExtraInfo_RTCOtherDecoder = exports.RTCExtraInfo_RTCInfoExtraDecoder = exports.RTCExtraInfo_ByteRTCExtInfoDecoder = exports.RTCExtraInfo_RTCMixBaseDecoder = exports.RTCExtraInfoDecoder = exports.GroupChannelUserDecoder = exports.GroupChannelAllUserDecoder = exports.DSLConfigDecoder = exports.GroupPlayerDecoder = exports.LinkPositionDecoder = exports.PositionDecoder = exports.LinkLayerListUserDecoder = exports.AllListUserDecoder = void 0;
exports.ImageModelDecoder = exports.WebcastRoomUserSeqMessage_ContributorDecoder = exports.WebcastRoomUserSeqMessageDecoder = exports.WebsocketParamDecoder = exports.MessageDecoder = exports.HighScoreControlCfgDecoder = exports.BattleUserArmyDecoder = exports.BattleUserArmiesDecoder = exports.BattleTeamUserArmiesDecoder = exports.BattleSettingDecoder = exports.BattleTeamUserDecoder = exports.GiftModeMetaDecoder = exports.PublicAreaMessageCommon_UserInteractionInfoDecoder = exports.PublicAreaMessageCommon_PortraitInfoDecoder = exports.PublicAreaMessageCommon_PortraitTagDecoder = exports.PublicAreaMessageCommon_UserMetricsDecoder = exports.PublicAreaMessageCommon_CreatorSuccessInfoDecoder = exports.PublicAreaMessageCommon_TopicDecoder = exports.PublicAreaMessageCommon_TagItemDecoder = exports.PublicAreaMessageCommonDecoder = exports.PublicAreaCommonDecoder = exports.AuthorDecoder = exports.FansClubData_UserBadge_IconsEntryDecoder = exports.FansClubData_UserBadgeDecoder = exports.FansClubDataDecoder = exports.FansClubMember_PreferDataEntryDecoder = exports.FansClubMemberDecoder = exports.BorderInfoDecoder = exports.GradeIconDecoder = exports.UserHonorDecoder = exports.FontStyleDecoder = exports.PrivilegeLogExtraDecoder = exports.JoinGroupContentDecoder = exports.BusinessContent_TopHostInfoDecoder = exports.BusinessContent_HashtagDecoder = exports.BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfoDecoder = exports.BusinessContent_JoinGroupMessageExtra_RivalExtraDecoder = exports.BusinessContent_JoinGroupMessageExtraDecoder = exports.BusinessContent_PerceptionFeedbackOptionDecoder = exports.BusinessContent_PerceptionDialogInfoDecoder = exports.BusinessContent_TagDecoder = exports.BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContentDecoder = exports.BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContentDecoder = exports.BusinessContent_JoinGroupBizContent_TagV2_UserInfoDecoder = exports.BusinessContent_JoinGroupBizContent_TagV2Decoder = exports.BusinessContent_JoinGroupBizContent_RivalsGameTagDecoder = exports.BusinessContent_JoinGroupBizContentDecoder = exports.BusinessContent_CohostUserInfo_CohostStreamConfigDecoder = exports.BusinessContent_CohostUserInfoDecoder = exports.BusinessContent_ListChangeBizContent_VirtualWaitingUserDecoder = void 0;
exports.WebcastLinkMicBattle_SupportedActionsWrapperDecoder = exports.WebcastLinkMicBattle_BattleInviteeGiftPermissionDecoder = exports.WebcastLinkMicBattle_BattleTeamResultDecoder = exports.WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelationDecoder = exports.WebcastLinkMicBattle_TeamMatchCampaignDecoder = exports.WebcastLinkMicBattle_BattleCombosEntryDecoder = exports.WebcastLinkMicBattle_AnchorInfoEntryDecoder = exports.WebcastLinkMicBattle_ArmiesEntryDecoder = exports.WebcastLinkMicBattle_BattleResultEntryDecoder = exports.WebcastLinkMicBattleDecoder = exports.WebcastGiftMessage_SponsorshipInfoDecoder = exports.WebcastGiftMessage_FlyingMicResources_TransitionConfigDecoder = exports.WebcastGiftMessage_FlyingMicResourcesDecoder = exports.WebcastGiftMessage_LynxGiftExtraDecoder = exports.WebcastGiftMessage_AssetsModel_FaceRecognitionMetaDecoder = exports.WebcastGiftMessage_AssetsModel_VideoResourceDecoder = exports.WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSizeDecoder = exports.WebcastGiftMessage_AssetsModel_LokiExtraContentDecoder = exports.WebcastGiftMessage_AssetsModel_ResourceModelDecoder = exports.WebcastGiftMessage_AssetsModel_AssetExtraDecoder = exports.WebcastGiftMessage_AssetsModelDecoder = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMetaDecoder = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResourceDecoder = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSizeDecoder = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContentDecoder = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModelDecoder = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtraDecoder = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBoxDecoder = exports.WebcastGiftMessage_GiftsBoxInfoDecoder = exports.WebcastGiftMessage_MatchInfoDecoder = exports.WebcastGiftMessage_GiftMonitorInfoDecoder = exports.WebcastGiftMessage_GiftTrayInfoDecoder = exports.WebcastGiftMessage_TextEffect_DetailDecoder = exports.WebcastGiftMessage_TextEffectDecoder = exports.WebcastGiftMessage_GiftIMPriorityDecoder = exports.WebcastGiftMessage_InteractiveGiftInfoDecoder = exports.WebcastGiftMessageDecoder = exports.WebcastMemberMessage_EffectConfigBeanDecoder = exports.WebcastMemberMessage_WaveAlgorithmDataDecoder = exports.WebcastMemberMessage_EffectConfigDecoder = exports.WebcastMemberMessage_AdminPermissionsEntryDecoder = exports.WebcastMemberMessageDecoder = exports.WebcastSubEmoteDecoder = exports.WebcastEmoteChatMessageDecoder = exports.EmoteUploadInfoDecoder = exports.WebcastChatMessage_CommentQualityScoreDecoder = exports.WebcastChatMessage_UserIdentityDecoder = exports.WebcastChatMessageDecoder = exports.ImageModel_ContentDecoder = void 0;
exports.ImEnterRoomMessagePushFrame_ImEnterRoomMessageDecoder = exports.ImEnterRoomMessagePushFrame_MetadataDecoder = exports.ImEnterRoomMessagePushFrameDecoder = exports.HeartbeatFrameDecoder = exports.HeartbeatFrameMetadataField7Decoder = exports.HeartbeatFrameMetadataField6Decoder = exports.HeartbeatFrameRoomInfoDecoder = exports.WebSocketAckMessageDecoder = exports.UserImageBadgeImageDecoder = exports.UserImageBadgeDecoder = exports.UserBadgeDecoder = exports.UserBadgesAttributesDecoder = exports.ProfilePictureDecoder = exports.FollowInfoDecoder = exports.WebcastSubNotifyMessage_EventTrackingDecoder = exports.WebcastSubNotifyMessageDecoder = exports.TreasureBoxDataDecoder = exports.WebcastEnvelopeMessage_EnvelopeInfoDecoder = exports.WebcastEnvelopeMessageDecoder = exports.EmoteImageDecoder = exports.EmoteDetailsDecoder = exports.WebcastHourlyRankMessage_RankContainer_RankingData2Decoder = exports.WebcastHourlyRankMessage_RankContainer_RankingDataDecoder = exports.WebcastHourlyRankMessage_RankContainerDecoder = exports.WebcastHourlyRankMessageDecoder = exports.RankItemDecoder = exports.SystemMessageDecoder = exports.WebcastLiveIntroMessageDecoder = exports.WebcastMessageEventDetailsDecoder = exports.WebcastQuestionNewMessage_QuestionDecoder = exports.WebcastQuestionNewMessageDecoder = exports.LikeEffectDecoder = exports.SpecifiedDisplayTextDecoder = exports.WebcastLikeMessageDecoder = exports.WebcastSocialMessageDecoder = exports.WebcastLinkMicArmiesGroupDecoder = exports.WebcastLinkMicArmiesItemsDecoder = exports.WebcastLinkMicArmies_BattleItemsEntryDecoder = exports.WebcastLinkMicArmiesDecoder = exports.WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTestDecoder = exports.WebcastLinkMicBattle_BattleABTestSetting_BattleABTestListDecoder = exports.WebcastLinkMicBattle_BattleABTestSettingDecoder = exports.WebcastLinkMicBattle_BattleUserInfo_BattleRivalTagDecoder = exports.WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfoDecoder = exports.WebcastLinkMicBattle_BattleUserInfoDecoder = exports.WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategyDecoder = exports.WebcastLinkMicBattle_BattleDisplayConfigDecoder = exports.WebcastLinkMicBattle_BattleResultDecoder = exports.WebcastLinkMicBattle_BattleComboInfoDecoder = exports.WebcastLinkMicBattle_TeamUsersInfoDecoder = void 0;
exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfigDecoder = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriodDecoder = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntryDecoder = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfigDecoder = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStartDecoder = exports.WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElemDecoder = exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder = exports.WebcastLinkmicBattleTaskMessageDecoder = exports.WebcastLinkMicBattlePunishFinishDecoder = exports.WebcastRankTextMessageDecoder = exports.WebcastPollMessage_PollBasicInfoDecoder = exports.WebcastPollMessage_TemplateContentDecoder = exports.WebcastPollMessageDecoder = exports.WebcastRankUpdateMessage_RankUpdateDecoder = exports.WebcastRankUpdateMessage_RankTabInfoDecoder = exports.WebcastRankUpdateMessage_RankListTabInfoDecoder = exports.WebcastRankUpdateMessage_UnionAnimationInfoDecoder = exports.WebcastRankUpdateMessageDecoder = exports.WebcastInRoomBannerMessage_DataEntryDecoder = exports.WebcastInRoomBannerMessageDecoder = exports.WebcastImDeleteMessageDecoder = exports.WebcastGoalUpdateMessage_GoalPinInfoDecoder = exports.WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfoDecoder = exports.WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGiftDecoder = exports.WebcastGoalUpdateMessage_LiveStreamSubGoalDecoder = exports.WebcastGoalUpdateMessageDecoder = exports.WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOptionDecoder = exports.WebcastControlMessage_PerceptionDialogInfoDecoder = exports.WebcastControlMessage_ExtraDecoder = exports.WebcastControlMessageDecoder = exports.WebcastCaptionMessage_CaptionContentDecoder = exports.WebcastCaptionMessageDecoder = exports.WebcastRoomMessageDecoder = exports.BaseProtoMessageDecoder = exports.ProtoMessageFetchResult_WsParamsEntryDecoder = exports.ProtoMessageFetchResultDecoder = exports.WebcastPushFrame_HeadersEntryDecoder = exports.WebcastPushFrameDecoder = exports.WebcastBarrageMessage_RightLabelDecoder = exports.WebcastBarrageMessage_DisplayControl_ShowResultDecoder = exports.WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntryDecoder = exports.WebcastBarrageMessage_DisplayControlDecoder = exports.WebcastBarrageMessage_BarrageTypeGiftGalleryParamDecoder = exports.WebcastBarrageMessage_AnimationDataDecoder = exports.WebcastBarrageMessage_BarrageTypeSubscribeGiftParamDecoder = exports.WebcastBarrageMessage_BarrageTypeFansLevelParamDecoder = exports.WebcastBarrageMessage_BarrageTypeUserGradeParamDecoder = exports.WebcastBarrageMessage_BarrageEvent_ParamsEntryDecoder = exports.WebcastBarrageMessage_BarrageEventDecoder = exports.WebcastBarrageMessageDecoder = void 0;
exports.RoomVerifyMessageDecoder = exports.WebcastLinkLayerMessageDecoder = exports.WebcastLinkMessageDecoder = exports.WebcastRoomPinMessageDecoder = exports.WebcastOecLiveShoppingMessage_LiveShoppingDetailsDecoder = exports.WebcastOecLiveShoppingMessage_LiveShoppingDataDecoder = exports.WebcastOecLiveShoppingMessageDecoder = exports.WebcastMsgDetectMessage_TriggerConditionDecoder = exports.WebcastMsgDetectMessage_TimeInfoDecoder = exports.WebcastMsgDetectMessageDecoder = exports.WebcastUnauthorizedMemberMessageDecoder = exports.WebcastLinkMicMethodDecoder = exports.WebcastLinkMicFanTicketMethodDecoder = exports.WebcastLinkmicBattleTaskMessage_BattleRewardSettleDecoder = exports.WebcastLinkmicBattleTaskMessage_BattleTaskSettleDecoder = exports.WebcastLinkmicBattleTaskMessage_BattleTaskUpdateDecoder = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuideDecoder = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfigDecoder = void 0;
/* eslint-disable */
const wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "TikTok";
var AuditStatus;
(function (AuditStatus) {
    AuditStatus[AuditStatus["AUDITSTATUSUNKNOWN"] = 0] = "AUDITSTATUSUNKNOWN";
    AuditStatus[AuditStatus["AUDITSTATUSPASS"] = 1] = "AUDITSTATUSPASS";
    AuditStatus[AuditStatus["AUDITSTATUSFAILED"] = 2] = "AUDITSTATUSFAILED";
    AuditStatus[AuditStatus["AUDITSTATUSREVIEWING"] = 3] = "AUDITSTATUSREVIEWING";
    AuditStatus[AuditStatus["AUDITSTATUSFORBIDDEN"] = 4] = "AUDITSTATUSFORBIDDEN";
    AuditStatus[AuditStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AuditStatus = exports.AuditStatus || (exports.AuditStatus = {}));
var EmoteType;
(function (EmoteType) {
    EmoteType[EmoteType["EMOTETYPENORMAL"] = 0] = "EMOTETYPENORMAL";
    EmoteType[EmoteType["EMOTETYPEWITHSTICKER"] = 1] = "EMOTETYPEWITHSTICKER";
    EmoteType[EmoteType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(EmoteType = exports.EmoteType || (exports.EmoteType = {}));
var ContentSource;
(function (ContentSource) {
    ContentSource[ContentSource["CONTENTSOURCEUNKNOWN"] = 0] = "CONTENTSOURCEUNKNOWN";
    ContentSource[ContentSource["CONTENTSOURCENORMAL"] = 1] = "CONTENTSOURCENORMAL";
    ContentSource[ContentSource["CONTENTSOURCECAMERA"] = 2] = "CONTENTSOURCECAMERA";
    ContentSource[ContentSource["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ContentSource = exports.ContentSource || (exports.ContentSource = {}));
var EmotePrivateType;
(function (EmotePrivateType) {
    EmotePrivateType[EmotePrivateType["EMOTE_PRIVATE_TYPE_NORMAL"] = 0] = "EMOTE_PRIVATE_TYPE_NORMAL";
    EmotePrivateType[EmotePrivateType["EMOTE_PRIVATE_TYPE_SUB_WAVE"] = 1] = "EMOTE_PRIVATE_TYPE_SUB_WAVE";
    EmotePrivateType[EmotePrivateType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(EmotePrivateType = exports.EmotePrivateType || (exports.EmotePrivateType = {}));
var TextType;
(function (TextType) {
    TextType[TextType["DISPLAY_TEXT"] = 0] = "DISPLAY_TEXT";
    TextType[TextType["CONTENT"] = 1] = "CONTENT";
    TextType[TextType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(TextType = exports.TextType || (exports.TextType = {}));
var LinkmicApplierSortSetting;
(function (LinkmicApplierSortSetting) {
    LinkmicApplierSortSetting[LinkmicApplierSortSetting["LINKMIC_APPLIER_SORT_SETTING_NONE"] = 0] = "LINKMIC_APPLIER_SORT_SETTING_NONE";
    LinkmicApplierSortSetting[LinkmicApplierSortSetting["LINKMIC_APPLIER_SORT_SETTING_BY_GIFT_SCORE"] = 1] = "LINKMIC_APPLIER_SORT_SETTING_BY_GIFT_SCORE";
    LinkmicApplierSortSetting[LinkmicApplierSortSetting["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LinkmicApplierSortSetting = exports.LinkmicApplierSortSetting || (exports.LinkmicApplierSortSetting = {}));
var HashtagNamespace;
(function (HashtagNamespace) {
    HashtagNamespace[HashtagNamespace["GLOBAL"] = 0] = "GLOBAL";
    HashtagNamespace[HashtagNamespace["GAMING"] = 1] = "GAMING";
    HashtagNamespace[HashtagNamespace["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(HashtagNamespace = exports.HashtagNamespace || (exports.HashtagNamespace = {}));
var AgreeStatus;
(function (AgreeStatus) {
    AgreeStatus[AgreeStatus["AGREE_UNKNOWN"] = 0] = "AGREE_UNKNOWN";
    AgreeStatus[AgreeStatus["AGREE"] = 1] = "AGREE";
    AgreeStatus[AgreeStatus["REJECT"] = 2] = "REJECT";
    AgreeStatus[AgreeStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(AgreeStatus = exports.AgreeStatus || (exports.AgreeStatus = {}));
var KickoutReason;
(function (KickoutReason) {
    KickoutReason[KickoutReason["KICKOUT_REASON_UNKNOWN"] = 0] = "KICKOUT_REASON_UNKNOWN";
    KickoutReason[KickoutReason["KICKOUT_REASON_FIRST_FRAME_TIMEOUT"] = 1] = "KICKOUT_REASON_FIRST_FRAME_TIMEOUT";
    KickoutReason[KickoutReason["KICKOUT_REASON_BY_HOST"] = 2] = "KICKOUT_REASON_BY_HOST";
    KickoutReason[KickoutReason["KICKOUT_REASON_RTC_LOST_CONNECTION"] = 3] = "KICKOUT_REASON_RTC_LOST_CONNECTION";
    KickoutReason[KickoutReason["KICKOUT_REASON_BY_PUNISH"] = 4] = "KICKOUT_REASON_BY_PUNISH";
    KickoutReason[KickoutReason["KICKOUT_REASON_BY_ADMIN"] = 5] = "KICKOUT_REASON_BY_ADMIN";
    KickoutReason[KickoutReason["KICKOUT_REASON_HOST_REMOVE_ALL_GUESTS"] = 6] = "KICKOUT_REASON_HOST_REMOVE_ALL_GUESTS";
    KickoutReason[KickoutReason["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(KickoutReason = exports.KickoutReason || (exports.KickoutReason = {}));
var GroupStatus;
(function (GroupStatus) {
    GroupStatus[GroupStatus["GROUP_STATUS_UNKNOWN"] = 0] = "GROUP_STATUS_UNKNOWN";
    GroupStatus[GroupStatus["GROUP_STATUS_WAITING"] = 1] = "GROUP_STATUS_WAITING";
    GroupStatus[GroupStatus["GROUP_STATUS_LINKED"] = 3] = "GROUP_STATUS_LINKED";
    GroupStatus[GroupStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(GroupStatus = exports.GroupStatus || (exports.GroupStatus = {}));
var BusinessCase;
(function (BusinessCase) {
    BusinessCase[BusinessCase["BUSINESS_NOT_SET"] = 0] = "BUSINESS_NOT_SET";
    BusinessCase[BusinessCase["APPLY_BIZ_CONTENT"] = 1] = "APPLY_BIZ_CONTENT";
    BusinessCase[BusinessCase["INVITE_BIZ_CONTENT"] = 2] = "INVITE_BIZ_CONTENT";
    BusinessCase[BusinessCase["REPLY_BIZ_CONTENT"] = 3] = "REPLY_BIZ_CONTENT";
    BusinessCase[BusinessCase["PERMIT_BIZ_CONTENT"] = 4] = "PERMIT_BIZ_CONTENT";
    BusinessCase[BusinessCase["JOIN_DIRECT_BIZ_CONTENT"] = 5] = "JOIN_DIRECT_BIZ_CONTENT";
    BusinessCase[BusinessCase["KICK_OUT_BIZ_CONTENT"] = 6] = "KICK_OUT_BIZ_CONTENT";
    BusinessCase[BusinessCase["LIST_CHANGE_BIZ_CONTENT"] = 11] = "LIST_CHANGE_BIZ_CONTENT";
    BusinessCase[BusinessCase["MULTI_LIVE_CONTENT"] = 100] = "MULTI_LIVE_CONTENT";
    BusinessCase[BusinessCase["COHOST_CONTENT"] = 200] = "COHOST_CONTENT";
    BusinessCase[BusinessCase["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BusinessCase = exports.BusinessCase || (exports.BusinessCase = {}));
var ReplyStatus;
(function (ReplyStatus) {
    ReplyStatus[ReplyStatus["REPLY_STATUS_UNKNOWN"] = 0] = "REPLY_STATUS_UNKNOWN";
    ReplyStatus[ReplyStatus["REPLY_STATUS_AGREE"] = 1] = "REPLY_STATUS_AGREE";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_PERSONALLY"] = 2] = "REPLY_STATUS_REFUSE_PERSONALLY";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_TYPE_NOT_SUPPORT"] = 3] = "REPLY_STATUS_REFUSE_TYPE_NOT_SUPPORT";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_PROCESSING_INVITATION"] = 4] = "REPLY_STATUS_REFUSE_PROCESSING_INVITATION";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_BY_TIMEOUT"] = 5] = "REPLY_STATUS_REFUSE_BY_TIMEOUT";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_EXCEPTION"] = 6] = "REPLY_STATUS_REFUSE_EXCEPTION";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_SYSTEM_NOT_SUPPORTED"] = 7] = "REPLY_STATUS_REFUSE_SYSTEM_NOT_SUPPORTED";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_SUBTYPE_DIFFERENCE"] = 8] = "REPLY_STATUS_REFUSE_SUBTYPE_DIFFERENCE";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_IN_MICROOM"] = 9] = "REPLY_STATUS_REFUSE_IN_MICROOM";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_NOT_LOAD_PLUGIN"] = 10] = "REPLY_STATUS_REFUSE_NOT_LOAD_PLUGIN";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_IN_MULTI_GUEST"] = 11] = "REPLY_STATUS_REFUSE_IN_MULTI_GUEST";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_PAUSE_LIVE"] = 12] = "REPLY_STATUS_REFUSE_PAUSE_LIVE";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_OPEN_CAMERA_DIALOG_SHOWING"] = 13] = "REPLY_STATUS_REFUSE_OPEN_CAMERA_DIALOG_SHOWING";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_DRAW_GUESSING"] = 14] = "REPLY_STATUS_REFUSE_DRAW_GUESSING";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_RANDOM_MATCHING"] = 15] = "REPLY_STATUS_REFUSE_RANDOM_MATCHING";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_IN_MATCH_PROCESSING"] = 16] = "REPLY_STATUS_REFUSE_IN_MATCH_PROCESSING";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_IN_MICROOM_FOR_MULTI_COHOST"] = 17] = "REPLY_STATUS_REFUSE_IN_MICROOM_FOR_MULTI_COHOST";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_COHOST_FINISHED"] = 18] = "REPLY_STATUS_REFUSE_COHOST_FINISHED";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_NOT_CONNECTED"] = 19] = "REPLY_STATUS_REFUSE_NOT_CONNECTED";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_LINKMIC_FULL"] = 20] = "REPLY_STATUS_REFUSE_LINKMIC_FULL";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_ARC_INCOMPATIBLE"] = 21] = "REPLY_STATUS_REFUSE_ARC_INCOMPATIBLE";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_PROCESSING_OTHER_INVITE"] = 22] = "REPLY_STATUS_REFUSE_PROCESSING_OTHER_INVITE";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_PROCESSING_OTHER_APPLY"] = 23] = "REPLY_STATUS_REFUSE_PROCESSING_OTHER_APPLY";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_IN_ANCHOR_COHOST"] = 24] = "REPLY_STATUS_REFUSE_IN_ANCHOR_COHOST";
    ReplyStatus[ReplyStatus["REPLY_STATUS_REFUSE_TOPIC_PAIRING"] = 25] = "REPLY_STATUS_REFUSE_TOPIC_PAIRING";
    ReplyStatus[ReplyStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ReplyStatus = exports.ReplyStatus || (exports.ReplyStatus = {}));
var SubscribeType;
(function (SubscribeType) {
    SubscribeType[SubscribeType["SUBSCRIBETYPE_ONCE"] = 0] = "SUBSCRIBETYPE_ONCE";
    SubscribeType[SubscribeType["SUBSCRIBETYPE_AUTO"] = 1] = "SUBSCRIBETYPE_AUTO";
    SubscribeType[SubscribeType["SUBSCRIBETYPE_DEFAULT"] = 100] = "SUBSCRIBETYPE_DEFAULT";
    SubscribeType[SubscribeType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SubscribeType = exports.SubscribeType || (exports.SubscribeType = {}));
var OldSubscribeStatus;
(function (OldSubscribeStatus) {
    OldSubscribeStatus[OldSubscribeStatus["OLD_SUBSCRIBE_STATUS_FIRST"] = 0] = "OLD_SUBSCRIBE_STATUS_FIRST";
    OldSubscribeStatus[OldSubscribeStatus["OLD_SUBSCRIBE_STATUS_RESUB"] = 1] = "OLD_SUBSCRIBE_STATUS_RESUB";
    OldSubscribeStatus[OldSubscribeStatus["OLD_SUBSCRIBE_STATUS_SUBIN_GRACE_PERIOD"] = 2] = "OLD_SUBSCRIBE_STATUS_SUBIN_GRACE_PERIOD";
    OldSubscribeStatus[OldSubscribeStatus["OLD_SUBSCRIBE_STATUS_SUB_NOTIN_GRACE_PERIOD"] = 3] = "OLD_SUBSCRIBE_STATUS_SUB_NOTIN_GRACE_PERIOD";
    OldSubscribeStatus[OldSubscribeStatus["OLD_SUBSCRIBE_STATUS_DEFAULT"] = 100] = "OLD_SUBSCRIBE_STATUS_DEFAULT";
    OldSubscribeStatus[OldSubscribeStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(OldSubscribeStatus = exports.OldSubscribeStatus || (exports.OldSubscribeStatus = {}));
var SubscribingStatus;
(function (SubscribingStatus) {
    SubscribingStatus[SubscribingStatus["SUBSCRIBING_STATUS_UNKNOWN"] = 0] = "SUBSCRIBING_STATUS_UNKNOWN";
    SubscribingStatus[SubscribingStatus["SUBSCRIBING_STATUS_ONCE"] = 1] = "SUBSCRIBING_STATUS_ONCE";
    SubscribingStatus[SubscribingStatus["SUBSCRIBING_STATUS_CIRCLE"] = 2] = "SUBSCRIBING_STATUS_CIRCLE";
    SubscribingStatus[SubscribingStatus["SUBSCRIBING_STATUS_CIRCLE_CANCEL"] = 3] = "SUBSCRIBING_STATUS_CIRCLE_CANCEL";
    SubscribingStatus[SubscribingStatus["SUBSCRIBING_STATUS_REFUND"] = 4] = "SUBSCRIBING_STATUS_REFUND";
    SubscribingStatus[SubscribingStatus["SUBSCRIBING_STATUS_IN_GRACE_PERIOD"] = 5] = "SUBSCRIBING_STATUS_IN_GRACE_PERIOD";
    SubscribingStatus[SubscribingStatus["SUBSCRIBING_STATUS_NOT_IN_GRACE_PERIOD"] = 6] = "SUBSCRIBING_STATUS_NOT_IN_GRACE_PERIOD";
    SubscribingStatus[SubscribingStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SubscribingStatus = exports.SubscribingStatus || (exports.SubscribingStatus = {}));
var LinkmicStatus;
(function (LinkmicStatus) {
    LinkmicStatus[LinkmicStatus["Disable"] = 0] = "Disable";
    LinkmicStatus[LinkmicStatus["Enable"] = 1] = "Enable";
    LinkmicStatus[LinkmicStatus["Just_Following"] = 2] = "Just_Following";
    LinkmicStatus[LinkmicStatus["Multi_Linking"] = 3] = "Multi_Linking";
    LinkmicStatus[LinkmicStatus["Multi_Linking_Only_Following"] = 4] = "Multi_Linking_Only_Following";
    LinkmicStatus[LinkmicStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LinkmicStatus = exports.LinkmicStatus || (exports.LinkmicStatus = {}));
var MemberMessageAction;
(function (MemberMessageAction) {
    MemberMessageAction[MemberMessageAction["UNKNOWN"] = 0] = "UNKNOWN";
    /** JOINED - User Joined the Stream */
    MemberMessageAction[MemberMessageAction["JOINED"] = 1] = "JOINED";
    /** SUBSCRIBED - User Subscribed to the Host */
    MemberMessageAction[MemberMessageAction["SUBSCRIBED"] = 3] = "SUBSCRIBED";
    MemberMessageAction[MemberMessageAction["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MemberMessageAction = exports.MemberMessageAction || (exports.MemberMessageAction = {}));
var ControlAction;
(function (ControlAction) {
    ControlAction[ControlAction["CONTROL_ACTION_FALLBACK_UNKNOWN"] = 0] = "CONTROL_ACTION_FALLBACK_UNKNOWN";
    ControlAction[ControlAction["CONTROL_ACTION_STREAM_PAUSED"] = 1] = "CONTROL_ACTION_STREAM_PAUSED";
    ControlAction[ControlAction["CONTROL_ACTION_STREAM_UNPAUSED"] = 2] = "CONTROL_ACTION_STREAM_UNPAUSED";
    ControlAction[ControlAction["CONTROL_ACTION_STREAM_ENDED"] = 3] = "CONTROL_ACTION_STREAM_ENDED";
    ControlAction[ControlAction["CONTROL_ACTION_STREAM_SUSPENDED"] = 4] = "CONTROL_ACTION_STREAM_SUSPENDED";
    ControlAction[ControlAction["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ControlAction = exports.ControlAction || (exports.ControlAction = {}));
var LinkLayerMessageType;
(function (LinkLayerMessageType) {
    LinkLayerMessageType[LinkLayerMessageType["Linker_Unknown"] = 0] = "Linker_Unknown";
    LinkLayerMessageType[LinkLayerMessageType["Linker_Create"] = 1] = "Linker_Create";
    LinkLayerMessageType[LinkLayerMessageType["Linker_Invite"] = 2] = "Linker_Invite";
    LinkLayerMessageType[LinkLayerMessageType["Linker_Apply"] = 3] = "Linker_Apply";
    LinkLayerMessageType[LinkLayerMessageType["Linker_Permit"] = 4] = "Linker_Permit";
    LinkLayerMessageType[LinkLayerMessageType["Linker_Reply"] = 5] = "Linker_Reply";
    LinkLayerMessageType[LinkLayerMessageType["Linker_Kick_Out"] = 6] = "Linker_Kick_Out";
    LinkLayerMessageType[LinkLayerMessageType["Linker_Cancel_Apply"] = 7] = "Linker_Cancel_Apply";
    LinkLayerMessageType[LinkLayerMessageType["Linker_Cancel_Invite"] = 8] = "Linker_Cancel_Invite";
    LinkLayerMessageType[LinkLayerMessageType["Linker_Leave"] = 9] = "Linker_Leave";
    LinkLayerMessageType[LinkLayerMessageType["Linker_Finish"] = 10] = "Linker_Finish";
    LinkLayerMessageType[LinkLayerMessageType["Linker_List_Change"] = 11] = "Linker_List_Change";
    LinkLayerMessageType[LinkLayerMessageType["Linker_Join_Direct"] = 12] = "Linker_Join_Direct";
    LinkLayerMessageType[LinkLayerMessageType["Linker_Join_Group"] = 13] = "Linker_Join_Group";
    LinkLayerMessageType[LinkLayerMessageType["Linker_Permit_Group"] = 14] = "Linker_Permit_Group";
    LinkLayerMessageType[LinkLayerMessageType["Linker_Cancel_Group"] = 15] = "Linker_Cancel_Group";
    LinkLayerMessageType[LinkLayerMessageType["Linker_Leave_Group"] = 16] = "Linker_Leave_Group";
    LinkLayerMessageType[LinkLayerMessageType["Linker_P2P_Group_Change"] = 17] = "Linker_P2P_Group_Change";
    LinkLayerMessageType[LinkLayerMessageType["Linker_Group_Change"] = 18] = "Linker_Group_Change";
    LinkLayerMessageType[LinkLayerMessageType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LinkLayerMessageType = exports.LinkLayerMessageType || (exports.LinkLayerMessageType = {}));
var BarrageType;
(function (BarrageType) {
    BarrageType[BarrageType["BarrageType_Unknown"] = 0] = "BarrageType_Unknown";
    BarrageType[BarrageType["EComOrdering"] = 1] = "EComOrdering";
    BarrageType[BarrageType["EComBuying"] = 2] = "EComBuying";
    BarrageType[BarrageType["Normal"] = 3] = "Normal";
    BarrageType[BarrageType["Subscribe"] = 4] = "Subscribe";
    BarrageType[BarrageType["EventView"] = 5] = "EventView";
    BarrageType[BarrageType["EventRegistered"] = 6] = "EventRegistered";
    BarrageType[BarrageType["SubscribeGift"] = 7] = "SubscribeGift";
    BarrageType[BarrageType["UserUpgrade"] = 8] = "UserUpgrade";
    BarrageType[BarrageType["GradeUserEntranceNotification"] = 9] = "GradeUserEntranceNotification";
    BarrageType[BarrageType["FansLevelUpgrade"] = 10] = "FansLevelUpgrade";
    BarrageType[BarrageType["FansLevelEntrance"] = 11] = "FansLevelEntrance";
    BarrageType[BarrageType["GamePartnership"] = 12] = "GamePartnership";
    BarrageType[BarrageType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BarrageType = exports.BarrageType || (exports.BarrageType = {}));
var EnvelopeBusinessType;
(function (EnvelopeBusinessType) {
    EnvelopeBusinessType[EnvelopeBusinessType["BusinessTypeUnknown"] = 0] = "BusinessTypeUnknown";
    EnvelopeBusinessType[EnvelopeBusinessType["BusinessTypeUserDiamond"] = 1] = "BusinessTypeUserDiamond";
    EnvelopeBusinessType[EnvelopeBusinessType["BusinessTypePlatformDiamond"] = 2] = "BusinessTypePlatformDiamond";
    EnvelopeBusinessType[EnvelopeBusinessType["BusinessTypePlatformShell"] = 3] = "BusinessTypePlatformShell";
    EnvelopeBusinessType[EnvelopeBusinessType["BusinessTypePortal"] = 4] = "BusinessTypePortal";
    EnvelopeBusinessType[EnvelopeBusinessType["BusinessTypePlatformMerch"] = 5] = "BusinessTypePlatformMerch";
    EnvelopeBusinessType[EnvelopeBusinessType["BusinessTypeEoYDiamond"] = 6] = "BusinessTypeEoYDiamond";
    EnvelopeBusinessType[EnvelopeBusinessType["BusinessTypeFanClubGtM"] = 7] = "BusinessTypeFanClubGtM";
    EnvelopeBusinessType[EnvelopeBusinessType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(EnvelopeBusinessType = exports.EnvelopeBusinessType || (exports.EnvelopeBusinessType = {}));
var EnvelopeFollowShowStatus;
(function (EnvelopeFollowShowStatus) {
    EnvelopeFollowShowStatus[EnvelopeFollowShowStatus["ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW_UNKNOWN"] = 0] = "ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW_UNKNOWN";
    EnvelopeFollowShowStatus[EnvelopeFollowShowStatus["ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW"] = 1] = "ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_SHOW";
    EnvelopeFollowShowStatus[EnvelopeFollowShowStatus["ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_NOT_SHOW"] = 2] = "ENVELOPE_FOLLOW_SHOW_STATUS_ENVELOPE_FOLLOW_NOT_SHOW";
    EnvelopeFollowShowStatus[EnvelopeFollowShowStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(EnvelopeFollowShowStatus = exports.EnvelopeFollowShowStatus || (exports.EnvelopeFollowShowStatus = {}));
var EnvelopeDisplay;
(function (EnvelopeDisplay) {
    EnvelopeDisplay[EnvelopeDisplay["ENVELOPE_DISPLAY_UNKNOWN"] = 0] = "ENVELOPE_DISPLAY_UNKNOWN";
    EnvelopeDisplay[EnvelopeDisplay["ENVELOPE_DISPLAY_NEW"] = 1] = "ENVELOPE_DISPLAY_NEW";
    EnvelopeDisplay[EnvelopeDisplay["ENVELOPE_DISPLAY_HIDE"] = 2] = "ENVELOPE_DISPLAY_HIDE";
    EnvelopeDisplay[EnvelopeDisplay["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(EnvelopeDisplay = exports.EnvelopeDisplay || (exports.EnvelopeDisplay = {}));
var CommonContentCase;
(function (CommonContentCase) {
    CommonContentCase[CommonContentCase["COMMON_CONTENT_NOT_SET"] = 0] = "COMMON_CONTENT_NOT_SET";
    CommonContentCase[CommonContentCase["CREATE_CHANNEL_CONTENT"] = 100] = "CREATE_CHANNEL_CONTENT";
    CommonContentCase[CommonContentCase["LIST_CHANGE_CONTENT"] = 102] = "LIST_CHANGE_CONTENT";
    CommonContentCase[CommonContentCase["INVITE_CONTENT"] = 103] = "INVITE_CONTENT";
    CommonContentCase[CommonContentCase["APPLY_CONTENT"] = 104] = "APPLY_CONTENT";
    CommonContentCase[CommonContentCase["PERMIT_APPLY_CONTENT"] = 105] = "PERMIT_APPLY_CONTENT";
    CommonContentCase[CommonContentCase["REPLY_INVITE_CONTENT"] = 106] = "REPLY_INVITE_CONTENT";
    CommonContentCase[CommonContentCase["KICK_OUT_CONTENT"] = 107] = "KICK_OUT_CONTENT";
    CommonContentCase[CommonContentCase["CANCEL_APPLY_CONTENT"] = 108] = "CANCEL_APPLY_CONTENT";
    CommonContentCase[CommonContentCase["CANCEL_INVITE_CONTENT"] = 109] = "CANCEL_INVITE_CONTENT";
    CommonContentCase[CommonContentCase["LEAVE_CONTENT"] = 110] = "LEAVE_CONTENT";
    CommonContentCase[CommonContentCase["FINISH_CONTENT"] = 111] = "FINISH_CONTENT";
    CommonContentCase[CommonContentCase["JOIN_DIRECT_CONTENT"] = 112] = "JOIN_DIRECT_CONTENT";
    CommonContentCase[CommonContentCase["JOIN_GROUP_CONTENT"] = 113] = "JOIN_GROUP_CONTENT";
    CommonContentCase[CommonContentCase["PERMIT_GROUP_CONTENT"] = 114] = "PERMIT_GROUP_CONTENT";
    CommonContentCase[CommonContentCase["CANCEL_GROUP_CONTENT"] = 115] = "CANCEL_GROUP_CONTENT";
    CommonContentCase[CommonContentCase["LEAVE_GROUP_CONTENT"] = 116] = "LEAVE_GROUP_CONTENT";
    CommonContentCase[CommonContentCase["P2P_GROUP_CHANGE_CONTENT"] = 117] = "P2P_GROUP_CHANGE_CONTENT";
    CommonContentCase[CommonContentCase["GROUP_CHANGE_CONTENT"] = 118] = "GROUP_CHANGE_CONTENT";
    CommonContentCase[CommonContentCase["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CommonContentCase = exports.CommonContentCase || (exports.CommonContentCase = {}));
var LinkMessageType;
(function (LinkMessageType) {
    LinkMessageType[LinkMessageType["TYPE_LINKER_UNKNOWN"] = 0] = "TYPE_LINKER_UNKNOWN";
    LinkMessageType[LinkMessageType["TYPE_LINKER_CREATE"] = 1] = "TYPE_LINKER_CREATE";
    LinkMessageType[LinkMessageType["TYPE_LINKER_CLOSE"] = 2] = "TYPE_LINKER_CLOSE";
    LinkMessageType[LinkMessageType["TYPE_LINKER_INVITE"] = 3] = "TYPE_LINKER_INVITE";
    LinkMessageType[LinkMessageType["TYPE_LINKER_APPLY"] = 4] = "TYPE_LINKER_APPLY";
    LinkMessageType[LinkMessageType["TYPE_LINKER_REPLY"] = 5] = "TYPE_LINKER_REPLY";
    LinkMessageType[LinkMessageType["TYPE_LINKER_ENTER"] = 6] = "TYPE_LINKER_ENTER";
    LinkMessageType[LinkMessageType["TYPE_LINKER_LEAVE"] = 7] = "TYPE_LINKER_LEAVE";
    LinkMessageType[LinkMessageType["TYPE_LINKER_PERMIT"] = 8] = "TYPE_LINKER_PERMIT";
    LinkMessageType[LinkMessageType["TYPE_LINKER_CANCEL_INVITE"] = 9] = "TYPE_LINKER_CANCEL_INVITE";
    LinkMessageType[LinkMessageType["TYPE_LINKER_WAITING_LIST_CHANGE"] = 10] = "TYPE_LINKER_WAITING_LIST_CHANGE";
    LinkMessageType[LinkMessageType["TYPE_LINKER_LINKED_LIST_CHANGE"] = 11] = "TYPE_LINKER_LINKED_LIST_CHANGE";
    LinkMessageType[LinkMessageType["TYPE_LINKER_UPDATE_USER"] = 12] = "TYPE_LINKER_UPDATE_USER";
    LinkMessageType[LinkMessageType["TYPE_LINKER_KICK_OUT"] = 13] = "TYPE_LINKER_KICK_OUT";
    LinkMessageType[LinkMessageType["TYPE_LINKER_CANCEL_APPLY"] = 14] = "TYPE_LINKER_CANCEL_APPLY";
    LinkMessageType[LinkMessageType["TYPE_LINKER_MUTE"] = 15] = "TYPE_LINKER_MUTE";
    LinkMessageType[LinkMessageType["TYPE_LINKER_MATCH"] = 16] = "TYPE_LINKER_MATCH";
    LinkMessageType[LinkMessageType["TYPE_LINKER_UPDATE_USER_SETTING"] = 17] = "TYPE_LINKER_UPDATE_USER_SETTING";
    LinkMessageType[LinkMessageType["TYPE_LINKER_MIC_IDX_UPDATE"] = 18] = "TYPE_LINKER_MIC_IDX_UPDATE";
    LinkMessageType[LinkMessageType["TYPE_LINKER_LEAVE_V2"] = 19] = "TYPE_LINKER_LEAVE_V2";
    LinkMessageType[LinkMessageType["TYPE_LINKER_WAITING_LIST_CHANGE_V2"] = 20] = "TYPE_LINKER_WAITING_LIST_CHANGE_V2";
    LinkMessageType[LinkMessageType["TYPE_LINKER_LINKED_LIST_CHANGE_V2"] = 21] = "TYPE_LINKER_LINKED_LIST_CHANGE_V2";
    LinkMessageType[LinkMessageType["TYPE_LINKER_COHOST_LIST_CHANGE"] = 22] = "TYPE_LINKER_COHOST_LIST_CHANGE";
    LinkMessageType[LinkMessageType["TYPE_LINKER_MEDIA_CHANGE"] = 23] = "TYPE_LINKER_MEDIA_CHANGE";
    LinkMessageType[LinkMessageType["TYPE_LINKER_ACCEPT_NOTICE"] = 24] = "TYPE_LINKER_ACCEPT_NOTICE";
    LinkMessageType[LinkMessageType["TYPE_LINKER_SYS_KICK_OUT"] = 101] = "TYPE_LINKER_SYS_KICK_OUT";
    LinkMessageType[LinkMessageType["TYPE_LINKMIC_USER_TOAST"] = 102] = "TYPE_LINKMIC_USER_TOAST";
    LinkMessageType[LinkMessageType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LinkMessageType = exports.LinkMessageType || (exports.LinkMessageType = {}));
var MessageType;
(function (MessageType) {
    MessageType[MessageType["MESSAGE_TYPE_SUB_SUCCESS"] = 0] = "MESSAGE_TYPE_SUB_SUCCESS";
    MessageType[MessageType["MESSAGE_TYPE_ANCHOR_REMINDER"] = 1] = "MESSAGE_TYPE_ANCHOR_REMINDER";
    MessageType[MessageType["MESSAGE_TYPE_ENTER_ROOM_EXPIRE_SOON"] = 2] = "MESSAGE_TYPE_ENTER_ROOM_EXPIRE_SOON";
    MessageType[MessageType["MESSAGE_TYPE_SUB_GOAL_CREATE_TO_ANCHOR"] = 3] = "MESSAGE_TYPE_SUB_GOAL_CREATE_TO_ANCHOR";
    MessageType[MessageType["MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_AUDIENCE"] = 4] = "MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_AUDIENCE";
    MessageType[MessageType["MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_ANCHOR"] = 5] = "MESSAGE_TYPE_SUB_GOAL_COMPLETE_TO_ANCHOR";
    MessageType[MessageType["MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_USER_NOTICE"] = 6] = "MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_USER_NOTICE";
    MessageType[MessageType["MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_ANCHOR_NOTICE"] = 7] = "MESSAGE_TYPE_SUB_GIFT_TIK_TOK_2_ANCHOR_NOTICE";
    MessageType[MessageType["MESSAGE_TYPE_SUB_GIFT_T_RECEIVES_END_NOTICE"] = 8] = "MESSAGE_TYPE_SUB_GIFT_T_RECEIVES_END_NOTICE";
    MessageType[MessageType["MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ROOM_MESSAGE"] = 9] = "MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ROOM_MESSAGE";
    MessageType[MessageType["MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ANCHOR_NOTICE"] = 10] = "MESSAGE_TYPE_SUB_GIFTS_END_SUCCEED_ANCHOR_NOTICE";
    MessageType[MessageType["MESSAGE_TYPE_SUB_GIFT_LOW_VERSION_UPGRADE_NOTICE"] = 11] = "MESSAGE_TYPE_SUB_GIFT_LOW_VERSION_UPGRADE_NOTICE";
    MessageType[MessageType["MESSAGE_TYPE_SUB_GIFT_USER_BUY_AU_TH_NOTICE"] = 12] = "MESSAGE_TYPE_SUB_GIFT_USER_BUY_AU_TH_NOTICE";
    MessageType[MessageType["MESSAGE_TYPE_SUB_COMMON_TEXT_NOTICE"] = 13] = "MESSAGE_TYPE_SUB_COMMON_TEXT_NOTICE";
    MessageType[MessageType["MESSAGE_TYPE_SUB_MODERATOR_PIN_PERK"] = 14] = "MESSAGE_TYPE_SUB_MODERATOR_PIN_PERK";
    MessageType[MessageType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
var Scene;
(function (Scene) {
    Scene[Scene["SCENE_UNKNOWN"] = 0] = "SCENE_UNKNOWN";
    Scene[Scene["SCENE_CO_HOST"] = 2] = "SCENE_CO_HOST";
    Scene[Scene["SCENE_MULTI_LIVE"] = 4] = "SCENE_MULTI_LIVE";
    Scene[Scene["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Scene = exports.Scene || (exports.Scene = {}));
var RewardCondition;
(function (RewardCondition) {
    RewardCondition[RewardCondition["REWARD_CONDITION_SUBSCRIPTION"] = 0] = "REWARD_CONDITION_SUBSCRIPTION";
    RewardCondition[RewardCondition["REWARD_CONDITION_SUB_WAVE_CUSTOM"] = 1] = "REWARD_CONDITION_SUB_WAVE_CUSTOM";
    RewardCondition[RewardCondition["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RewardCondition = exports.RewardCondition || (exports.RewardCondition = {}));
var UserEmoteUploadSource;
(function (UserEmoteUploadSource) {
    UserEmoteUploadSource[UserEmoteUploadSource["USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR"] = 0] = "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR";
    UserEmoteUploadSource[UserEmoteUploadSource["USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER"] = 1] = "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER";
    UserEmoteUploadSource[UserEmoteUploadSource["USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR"] = 2] = "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR";
    UserEmoteUploadSource[UserEmoteUploadSource["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(UserEmoteUploadSource = exports.UserEmoteUploadSource || (exports.UserEmoteUploadSource = {}));
var EmoteScene;
(function (EmoteScene) {
    EmoteScene[EmoteScene["EMOTE_SCENE_SUBSCRIPTION"] = 0] = "EMOTE_SCENE_SUBSCRIPTION";
    EmoteScene[EmoteScene["EMOTE_SCENE_GAME"] = 1] = "EMOTE_SCENE_GAME";
    EmoteScene[EmoteScene["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(EmoteScene = exports.EmoteScene || (exports.EmoteScene = {}));
var PunishTypeId;
(function (PunishTypeId) {
    PunishTypeId[PunishTypeId["PUNISH_TYPE_IDUN_KNOWN"] = 0] = "PUNISH_TYPE_IDUN_KNOWN";
    PunishTypeId[PunishTypeId["PUNISH_TYPE_ID_BAN_LINK_MIC"] = 9] = "PUNISH_TYPE_ID_BAN_LINK_MIC";
    PunishTypeId[PunishTypeId["PUNISH_TYPE_ID_BAN_GAME_PARTNERSHIP"] = 25] = "PUNISH_TYPE_ID_BAN_GAME_PARTNERSHIP";
    PunishTypeId[PunishTypeId["PUNISH_TYPE_ID_REMOVE_GAME_PARTNERSHIP"] = 26] = "PUNISH_TYPE_ID_REMOVE_GAME_PARTNERSHIP";
    PunishTypeId[PunishTypeId["PUNISH_TYPE_ID_BANCO_HOST_LINK_MIC"] = 55] = "PUNISH_TYPE_ID_BANCO_HOST_LINK_MIC";
    PunishTypeId[PunishTypeId["PUNISH_TYPE_ID_AUTHORITY_LIMIT_MATCH"] = 57] = "PUNISH_TYPE_ID_AUTHORITY_LIMIT_MATCH";
    PunishTypeId[PunishTypeId["PUNISH_TYPE_ID_BAN_VOICE_CHAT"] = 59] = "PUNISH_TYPE_ID_BAN_VOICE_CHAT";
    PunishTypeId[PunishTypeId["PUNISH_TYPE_ID_BAN_LIVE_GOAL"] = 64] = "PUNISH_TYPE_ID_BAN_LIVE_GOAL";
    PunishTypeId[PunishTypeId["PUNISH_TYPE_ID_VIEWER_LIMIT"] = 70] = "PUNISH_TYPE_ID_VIEWER_LIMIT";
    PunishTypeId[PunishTypeId["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PunishTypeId = exports.PunishTypeId || (exports.PunishTypeId = {}));
var MultiplierType;
(function (MultiplierType) {
    MultiplierType[MultiplierType["MULTIPLIER_TYPE_UNSPECIFIED"] = 0] = "MULTIPLIER_TYPE_UNSPECIFIED";
    MultiplierType[MultiplierType["MULTIPLIER_TYPE_CRITICAL_STRIKE"] = 1] = "MULTIPLIER_TYPE_CRITICAL_STRIKE";
    MultiplierType[MultiplierType["MULTIPLIER_TYPE_TOP_2"] = 2] = "MULTIPLIER_TYPE_TOP_2";
    MultiplierType[MultiplierType["MULTIPLIER_TYPE_TOP_3"] = 3] = "MULTIPLIER_TYPE_TOP_3";
    MultiplierType[MultiplierType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MultiplierType = exports.MultiplierType || (exports.MultiplierType = {}));
var LinkmicGiftExpressionStrategy;
(function (LinkmicGiftExpressionStrategy) {
    LinkmicGiftExpressionStrategy[LinkmicGiftExpressionStrategy["LINKMIC_GIFT_EXPRESSION_STRATEGY_CONTROL_V_1"] = 0] = "LINKMIC_GIFT_EXPRESSION_STRATEGY_CONTROL_V_1";
    LinkmicGiftExpressionStrategy[LinkmicGiftExpressionStrategy["LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_1"] = 1] = "LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_1";
    LinkmicGiftExpressionStrategy[LinkmicGiftExpressionStrategy["LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_2"] = 2] = "LINKMIC_GIFT_EXPRESSION_STRATEGY_EXPERIMENT_V_2";
    LinkmicGiftExpressionStrategy[LinkmicGiftExpressionStrategy["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LinkmicGiftExpressionStrategy = exports.LinkmicGiftExpressionStrategy || (exports.LinkmicGiftExpressionStrategy = {}));
var GiftMessageVersion;
(function (GiftMessageVersion) {
    GiftMessageVersion[GiftMessageVersion["GIFT_MESSAGE_VERSION_0"] = 0] = "GIFT_MESSAGE_VERSION_0";
    GiftMessageVersion[GiftMessageVersion["GIFT_MESSAGE_VERSION_1"] = 1] = "GIFT_MESSAGE_VERSION_1";
    GiftMessageVersion[GiftMessageVersion["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(GiftMessageVersion = exports.GiftMessageVersion || (exports.GiftMessageVersion = {}));
var TagType;
(function (TagType) {
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_UNKNOWN"] = 0] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_UNKNOWN";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_USER_GRADE"] = 1] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_USER_GRADE";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_LEVEL"] = 2] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_LEVEL";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_WATCH_ME_DAYS_AGO"] = 3] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_WATCH_ME_DAYS_AGO";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_CUSTOM"] = 4] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_CUSTOM";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_TITLE_GIFT"] = 5] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_TITLE_GIFT";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_JOINED_TEAM"] = 6] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_JOINED_TEAM";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_PAY_ACCOMPANY_DAYS"] = 7] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_PAY_ACCOMPANY_DAYS";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_SPONSOR_GIFT_LAST_ROOM"] = 8] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_SPONSOR_GIFT_LAST_ROOM";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MATCH_MVP_LAST_ROOM"] = 9] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MATCH_MVP_LAST_ROOM";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_LARGE_AMOUNT_GIFT_LAST_ROOM"] = 10] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_LARGE_AMOUNT_GIFT_LAST_ROOM";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_COMMENT_LAST_ROOM"] = 11] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_COMMENT_LAST_ROOM";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_TITLED_GIFT"] = 12] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_TITLED_GIFT";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MEET_ANNIVERSARY"] = 13] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_MEET_ANNIVERSARY";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_SLEEP"] = 14] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FANS_SLEEP";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_SEND_HEART_ME"] = 15] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_SEND_HEART_ME";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_JOIN_TEAM"] = 16] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_NOT_JOIN_TEAM";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_WATCH_LIVE"] = 17] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FIRST_WATCH_LIVE";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_COMMENT"] = 18] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_COMMENT";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT_TIMES"] = 19] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT_TIMES";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_WATCH_LIVE_DURATION"] = 20] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_WATCH_LIVE_DURATION";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT"] = 21] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_GIFT";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_LIVE_CONTRIBUTION_TOP"] = 22] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_RECENT_LIVE_CONTRIBUTION_TOP";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_JUST_UPGRADE"] = 28] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_JUST_UPGRADE";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_WATCH_DURATION"] = 29] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_WATCH_DURATION";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_COMMENT_NUM"] = 30] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_COMMENT_NUM";
    TagType[TagType["TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_GIFT_SENT_NUM"] = 31] = "TAG_TYPE_CREATOR_CR_M_TAG_TYPE_FAN_TOTAL_GIFT_SENT_NUM";
    TagType[TagType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(TagType = exports.TagType || (exports.TagType = {}));
var TopicActionType;
(function (TopicActionType) {
    TopicActionType[TopicActionType["TOPIC_ACTION_TYPE_UNKNOWN"] = 0] = "TOPIC_ACTION_TYPE_UNKNOWN";
    TopicActionType[TopicActionType["TOPIC_ACTION_TYPE_FOLLOW"] = 1] = "TOPIC_ACTION_TYPE_FOLLOW";
    TopicActionType[TopicActionType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(TopicActionType = exports.TopicActionType || (exports.TopicActionType = {}));
var UserMetricsType;
(function (UserMetricsType) {
    UserMetricsType[UserMetricsType["USER_METRICS_TYPE_UNKNOWN"] = 0] = "USER_METRICS_TYPE_UNKNOWN";
    UserMetricsType[UserMetricsType["USER_METRICS_TYPE_GRADE"] = 1] = "USER_METRICS_TYPE_GRADE";
    UserMetricsType[UserMetricsType["USER_METRICS_TYPE_SUBSCRIBE"] = 2] = "USER_METRICS_TYPE_SUBSCRIBE";
    UserMetricsType[UserMetricsType["USER_METRICS_TYPE_FOLLOW"] = 3] = "USER_METRICS_TYPE_FOLLOW";
    UserMetricsType[UserMetricsType["USER_METRICS_TYPE_FANS_CLUB"] = 4] = "USER_METRICS_TYPE_FANS_CLUB";
    UserMetricsType[UserMetricsType["USER_METRICS_TYPE_TOP_VIEWER"] = 5] = "USER_METRICS_TYPE_TOP_VIEWER";
    UserMetricsType[UserMetricsType["USER_METRICS_TYPE_GIFT"] = 6] = "USER_METRICS_TYPE_GIFT";
    UserMetricsType[UserMetricsType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(UserMetricsType = exports.UserMetricsType || (exports.UserMetricsType = {}));
var GiftMessageIgnoreConfig;
(function (GiftMessageIgnoreConfig) {
    GiftMessageIgnoreConfig[GiftMessageIgnoreConfig["GIFT_MESSAGE_IGNORE_CONFIG_NOT_IGNORE"] = 0] = "GIFT_MESSAGE_IGNORE_CONFIG_NOT_IGNORE";
    GiftMessageIgnoreConfig[GiftMessageIgnoreConfig["GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY"] = 1] = "GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY";
    GiftMessageIgnoreConfig[GiftMessageIgnoreConfig["GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_PS_M"] = 2] = "GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_PS_M";
    GiftMessageIgnoreConfig[GiftMessageIgnoreConfig["GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY_AND_PS_M"] = 3] = "GIFT_MESSAGE_IGNORE_CONFIG_IGNORE_TRAY_AND_PS_M";
    GiftMessageIgnoreConfig[GiftMessageIgnoreConfig["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(GiftMessageIgnoreConfig = exports.GiftMessageIgnoreConfig || (exports.GiftMessageIgnoreConfig = {}));
var HorizontalOnclickTriggerType;
(function (HorizontalOnclickTriggerType) {
    HorizontalOnclickTriggerType[HorizontalOnclickTriggerType["HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_UNKNOWN"] = 0] = "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_UNKNOWN";
    HorizontalOnclickTriggerType[HorizontalOnclickTriggerType["HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_LEFT"] = 1] = "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_LEFT";
    HorizontalOnclickTriggerType[HorizontalOnclickTriggerType["HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_MIDDLE"] = 2] = "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_MIDDLE";
    HorizontalOnclickTriggerType[HorizontalOnclickTriggerType["HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_RIGHT"] = 3] = "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_RIGHT";
    HorizontalOnclickTriggerType[HorizontalOnclickTriggerType["HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_ALL_AREA"] = 4] = "HORIZONTAL_ONCLICK_TRIGGER_TYPE_ONCLICK_TRIGGER_TYPE_ALL_AREA";
    HorizontalOnclickTriggerType[HorizontalOnclickTriggerType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(HorizontalOnclickTriggerType = exports.HorizontalOnclickTriggerType || (exports.HorizontalOnclickTriggerType = {}));
var ShowType;
(function (ShowType) {
    ShowType[ShowType["SHOW_TYPE_NORMAL"] = 0] = "SHOW_TYPE_NORMAL";
    ShowType[ShowType["SHOW_TYPE_FADE_IN_OUT"] = 1] = "SHOW_TYPE_FADE_IN_OUT";
    ShowType[ShowType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ShowType = exports.ShowType || (exports.ShowType = {}));
var RenderType;
(function (RenderType) {
    RenderType[RenderType["RENDER_TYPE_NATIVE"] = 0] = "RENDER_TYPE_NATIVE";
    RenderType[RenderType["RENDER_TYPE_HYBRID"] = 1] = "RENDER_TYPE_HYBRID";
    RenderType[RenderType["RENDER_TYPE_ALPHA"] = 2] = "RENDER_TYPE_ALPHA";
    RenderType[RenderType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RenderType = exports.RenderType || (exports.RenderType = {}));
var IconDisplayType;
(function (IconDisplayType) {
    IconDisplayType[IconDisplayType["ICON_DISPLAY_TYPE_IMAGE"] = 0] = "ICON_DISPLAY_TYPE_IMAGE";
    IconDisplayType[IconDisplayType["ICON_DISPLAY_TYPE_BADGE"] = 1] = "ICON_DISPLAY_TYPE_BADGE";
    IconDisplayType[IconDisplayType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(IconDisplayType = exports.IconDisplayType || (exports.IconDisplayType = {}));
var CommentTag;
(function (CommentTag) {
    CommentTag[CommentTag["COMMENT_TAG_NORMAL"] = 0] = "COMMENT_TAG_NORMAL";
    CommentTag[CommentTag["COMMENT_TAG_CANDIDATE"] = 1] = "COMMENT_TAG_CANDIDATE";
    CommentTag[CommentTag["COMMENT_TAG_OVERAGE"] = 2] = "COMMENT_TAG_OVERAGE";
    CommentTag[CommentTag["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CommentTag = exports.CommentTag || (exports.CommentTag = {}));
var PerceptionDialogIconType;
(function (PerceptionDialogIconType) {
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE"] = 0] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_NONE";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING"] = 1] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_WARNING";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC"] = 2] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LINK_MIC";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC"] = 3] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GUEST_LINK_MIC";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE"] = 4] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX"] = 5] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_TREASURE_BOX";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE"] = 6] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MUTE";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED"] = 7] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_GAMEPAD_ACCESS_REVOKED";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM"] = 8] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_SINGLE_ROOM";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM"] = 9] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_ALL_ROOM";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN"] = 10] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_BAN_REPORT_LIVE_GREEN_SCREEN";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT"] = 11] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_GIFT";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS"] = 12] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_APPEAL_SUCCESS";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH"] = 13] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_MATCH";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL"] = 14] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_LIVE_GOAL";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION"] = 15] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_SUBSCRIPTION";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT"] = 16] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_STAR_COMMENT";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING"] = 17] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_RANKING";
    PerceptionDialogIconType[PerceptionDialogIconType["PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON"] = 18] = "PERCEPTION_DIALOG_ICON_TYPE_ICON_TYPE_COMMON";
    PerceptionDialogIconType[PerceptionDialogIconType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PerceptionDialogIconType = exports.PerceptionDialogIconType || (exports.PerceptionDialogIconType = {}));
var GoalMessageSource;
(function (GoalMessageSource) {
    GoalMessageSource[GoalMessageSource["GOAL_MESSAGE_SOURCE_UNKNOWN"] = 0] = "GOAL_MESSAGE_SOURCE_UNKNOWN";
    GoalMessageSource[GoalMessageSource["GOAL_MESSAGE_SOURCE_COMMIT"] = 1] = "GOAL_MESSAGE_SOURCE_COMMIT";
    GoalMessageSource[GoalMessageSource["GOAL_MESSAGE_SOURCE_PROGRESS_UPDATE"] = 2] = "GOAL_MESSAGE_SOURCE_PROGRESS_UPDATE";
    GoalMessageSource[GoalMessageSource["GOAL_MESSAGE_SOURCE_PIN"] = 3] = "GOAL_MESSAGE_SOURCE_PIN";
    GoalMessageSource[GoalMessageSource["GOAL_MESSAGE_SOURCE_UNPIN"] = 4] = "GOAL_MESSAGE_SOURCE_UNPIN";
    GoalMessageSource[GoalMessageSource["GOAL_MESSAGE_SOURCE_REVIEW_CALLBACK"] = 5] = "GOAL_MESSAGE_SOURCE_REVIEW_CALLBACK";
    GoalMessageSource[GoalMessageSource["GOAL_MESSAGE_SOURCE_SUSPEND"] = 6] = "GOAL_MESSAGE_SOURCE_SUSPEND";
    GoalMessageSource[GoalMessageSource["GOAL_MESSAGE_SOURCE_CHALLENGE_PROMPT"] = 7] = "GOAL_MESSAGE_SOURCE_CHALLENGE_PROMPT";
    GoalMessageSource[GoalMessageSource["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(GoalMessageSource = exports.GoalMessageSource || (exports.GoalMessageSource = {}));
var ExhibitionType;
(function (ExhibitionType) {
    ExhibitionType[ExhibitionType["EXHIBITION_TYPE_DEFAULT"] = 0] = "EXHIBITION_TYPE_DEFAULT";
    ExhibitionType[ExhibitionType["EXHIBITION_TYPE_FOLD"] = 1] = "EXHIBITION_TYPE_FOLD";
    ExhibitionType[ExhibitionType["EXHIBITION_TYPE_PUBLIC_SCREEN"] = 2] = "EXHIBITION_TYPE_PUBLIC_SCREEN";
    ExhibitionType[ExhibitionType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ExhibitionType = exports.ExhibitionType || (exports.ExhibitionType = {}));
var GiftSource;
(function (GiftSource) {
    GiftSource[GiftSource["GIFT_SOURCE_UNKNOWN"] = 0] = "GIFT_SOURCE_UNKNOWN";
    GiftSource[GiftSource["GIFT_SOURCE_PLATFORM"] = 1] = "GIFT_SOURCE_PLATFORM";
    GiftSource[GiftSource["GIFT_SOURCE_USER_BUY_RANDOM"] = 2] = "GIFT_SOURCE_USER_BUY_RANDOM";
    GiftSource[GiftSource["GIFT_SOURCE_USER_BUY_SPECIFIC"] = 3] = "GIFT_SOURCE_USER_BUY_SPECIFIC";
    GiftSource[GiftSource["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(GiftSource = exports.GiftSource || (exports.GiftSource = {}));
var MessageDisplayStyle;
(function (MessageDisplayStyle) {
    MessageDisplayStyle[MessageDisplayStyle["MESSAGE_DISPLAY_STYLE_DEFAULT"] = 0] = "MESSAGE_DISPLAY_STYLE_DEFAULT";
    MessageDisplayStyle[MessageDisplayStyle["MESSAGE_DISPLAY_STYLE_POPUP"] = 1] = "MESSAGE_DISPLAY_STYLE_POPUP";
    MessageDisplayStyle[MessageDisplayStyle["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MessageDisplayStyle = exports.MessageDisplayStyle || (exports.MessageDisplayStyle = {}));
var ProfitRankType;
(function (ProfitRankType) {
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_HOURLY_RANK"] = 0] = "PROFIT_RANK_TYPE_TYPE_HOURLY_RANK";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK"] = 1] = "PROFIT_RANK_TYPE_TYPE_WEEKLY_RANK";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK"] = 2] = "PROFIT_RANK_TYPE_TYPE_HOURLY_STAR_RANK";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY"] = 3] = "PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK_ACTIVITY";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK"] = 4] = "PROFIT_RANK_TYPE_TYPE_WEEKLY_RISING_RANK";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE"] = 5] = "PROFIT_RANK_TYPE_TYPE_WEEKLY_ROOKIE";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY"] = 6] = "PROFIT_RANK_TYPE_TYPE_E_COMMERCE_WEEKLY";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY"] = 7] = "PROFIT_RANK_TYPE_TYPE_E_COMMERCE_DAILY";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_DAILY_RANK"] = 8] = "PROFIT_RANK_TYPE_TYPE_DAILY_RANK";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK"] = 9] = "PROFIT_RANK_TYPE_TYPE_FIRST_GIFT_RANK";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_GAME_RANK"] = 10] = "PROFIT_RANK_TYPE_TYPE_GAME_RANK";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_DAILY_GAME"] = 11] = "PROFIT_RANK_TYPE_TYPE_DAILY_GAME";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK"] = 12] = "PROFIT_RANK_TYPE_TYPE_HALL_OF_FAME_RANK";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE"] = 13] = "PROFIT_RANK_TYPE_TYPE_RANK_LEAGUE";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_DAILY_ROOKIE"] = 14] = "PROFIT_RANK_TYPE_DAILY_ROOKIE";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_TEAM_RANK"] = 15] = "PROFIT_RANK_TYPE_TYPE_TEAM_RANK";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_CLASS_RANK"] = 16] = "PROFIT_RANK_TYPE_TYPE_CLASS_RANK";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G"] = 20] = "PROFIT_RANK_TYPE_TYPE_DAILY_GAME_PUB_G";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B"] = 21] = "PROFIT_RANK_TYPE_TYPE_DAILY_GAME_MLB_B";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE"] = 22] = "PROFIT_RANK_TYPE_TYPE_DAILY_GAME_FREE_FIRE";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE"] = 23] = "PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_ONE";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO"] = 24] = "PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_TWO";
    ProfitRankType[ProfitRankType["PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE"] = 25] = "PROFIT_RANK_TYPE_TYPE_WEEKLY_GAME_SUBCATEGORY_THREE";
    ProfitRankType[ProfitRankType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ProfitRankType = exports.ProfitRankType || (exports.ProfitRankType = {}));
var UnionAnimationInfoType;
(function (UnionAnimationInfoType) {
    UnionAnimationInfoType[UnionAnimationInfoType["UNION_ANIMATION_INFO_TYPE_NO_UNION_ANIMATION"] = 0] = "UNION_ANIMATION_INFO_TYPE_NO_UNION_ANIMATION";
    UnionAnimationInfoType[UnionAnimationInfoType["UNION_ANIMATION_INFO_TYPE_LOOP"] = 1] = "UNION_ANIMATION_INFO_TYPE_LOOP";
    UnionAnimationInfoType[UnionAnimationInfoType["UNION_ANIMATION_INFO_TYPE_LOCK"] = 2] = "UNION_ANIMATION_INFO_TYPE_LOCK";
    UnionAnimationInfoType[UnionAnimationInfoType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(UnionAnimationInfoType = exports.UnionAnimationInfoType || (exports.UnionAnimationInfoType = {}));
var DisplayStyle;
(function (DisplayStyle) {
    DisplayStyle[DisplayStyle["DISPLAY_STYLE_NORMAL"] = 0] = "DISPLAY_STYLE_NORMAL";
    DisplayStyle[DisplayStyle["DISPLAY_STYLE_STAY"] = 1] = "DISPLAY_STYLE_STAY";
    DisplayStyle[DisplayStyle["DISPLAY_STYLE_CHAT"] = 2] = "DISPLAY_STYLE_CHAT";
    DisplayStyle[DisplayStyle["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(DisplayStyle = exports.DisplayStyle || (exports.DisplayStyle = {}));
var HitABStatus;
(function (HitABStatus) {
    HitABStatus[HitABStatus["HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT"] = 0] = "HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT";
    HitABStatus[HitABStatus["HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT"] = 1] = "HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT";
    HitABStatus[HitABStatus["HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT"] = 2] = "HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT";
    HitABStatus[HitABStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(HitABStatus = exports.HitABStatus || (exports.HitABStatus = {}));
var PollKind;
(function (PollKind) {
    PollKind[PollKind["POLL_KIND_NORMAL"] = 0] = "POLL_KIND_NORMAL";
    PollKind[PollKind["POLL_KIND_GIFT"] = 1] = "POLL_KIND_GIFT";
    PollKind[PollKind["POLL_KIND_CUSTOMIZABLE"] = 2] = "POLL_KIND_CUSTOMIZABLE";
    PollKind[PollKind["POLL_KIND_CUSTOMIZABLE_GIFT"] = 3] = "POLL_KIND_CUSTOMIZABLE_GIFT";
    PollKind[PollKind["POLL_KIND_QUICK_GIFT"] = 4] = "POLL_KIND_QUICK_GIFT";
    PollKind[PollKind["POLL_KIND_EMOTE"] = 5] = "POLL_KIND_EMOTE";
    PollKind[PollKind["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PollKind = exports.PollKind || (exports.PollKind = {}));
var PollTemplateStatus;
(function (PollTemplateStatus) {
    PollTemplateStatus[PollTemplateStatus["POLL_TEMPLATE_STATUS_TO_BE_REVIEWED"] = 0] = "POLL_TEMPLATE_STATUS_TO_BE_REVIEWED";
    PollTemplateStatus[PollTemplateStatus["POLL_TEMPLATE_STATUS_UNDER_REVIEW"] = 1] = "POLL_TEMPLATE_STATUS_UNDER_REVIEW";
    PollTemplateStatus[PollTemplateStatus["POLL_TEMPLATE_STATUS_REVIEWED"] = 2] = "POLL_TEMPLATE_STATUS_REVIEWED";
    PollTemplateStatus[PollTemplateStatus["POLL_TEMPLATE_STATUS_REFUSED"] = 3] = "POLL_TEMPLATE_STATUS_REFUSED";
    PollTemplateStatus[PollTemplateStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PollTemplateStatus = exports.PollTemplateStatus || (exports.PollTemplateStatus = {}));
var PollAppealStatus;
(function (PollAppealStatus) {
    PollAppealStatus[PollAppealStatus["POLL_APPEAL_STATUS_UNKNOWN"] = 0] = "POLL_APPEAL_STATUS_UNKNOWN";
    PollAppealStatus[PollAppealStatus["POLL_APPEAL_STATUS_PASS"] = 1] = "POLL_APPEAL_STATUS_PASS";
    PollAppealStatus[PollAppealStatus["POLL_APPEAL_STATUS_FAIL"] = 2] = "POLL_APPEAL_STATUS_FAIL";
    PollAppealStatus[PollAppealStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PollAppealStatus = exports.PollAppealStatus || (exports.PollAppealStatus = {}));
var RankTestMessageScene;
(function (RankTestMessageScene) {
    RankTestMessageScene[RankTestMessageScene["RANK_TEST_MESSAGE_SCENE_UNKNOWN"] = 0] = "RANK_TEST_MESSAGE_SCENE_UNKNOWN";
    RankTestMessageScene[RankTestMessageScene["RANK_TEST_MESSAGE_SCENE_ONLINE_AUDIENCE_TOP_N_UPDATE_PUBLIC_SCREEN"] = 1] = "RANK_TEST_MESSAGE_SCENE_ONLINE_AUDIENCE_TOP_N_UPDATE_PUBLIC_SCREEN";
    RankTestMessageScene[RankTestMessageScene["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RankTestMessageScene = exports.RankTestMessageScene || (exports.RankTestMessageScene = {}));
var TriggerReason;
(function (TriggerReason) {
    TriggerReason[TriggerReason["TRIGGER_REASON_UNKNOWN"] = 0] = "TRIGGER_REASON_UNKNOWN";
    TriggerReason[TriggerReason["TRIGGER_REASON_SCORE_UPDATE"] = 1] = "TRIGGER_REASON_SCORE_UPDATE";
    TriggerReason[TriggerReason["TRIGGER_REASON_BATTLE_END"] = 2] = "TRIGGER_REASON_BATTLE_END";
    TriggerReason[TriggerReason["TRIGGER_REASON_OPT_OUT_UPDATE"] = 3] = "TRIGGER_REASON_OPT_OUT_UPDATE";
    TriggerReason[TriggerReason["TRIGGER_REASON_KEEP_ALIVE"] = 4] = "TRIGGER_REASON_KEEP_ALIVE";
    TriggerReason[TriggerReason["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(TriggerReason = exports.TriggerReason || (exports.TriggerReason = {}));
var Reason;
(function (Reason) {
    Reason[Reason["REASON_TIME_UP"] = 0] = "REASON_TIME_UP";
    Reason[Reason["REASON_CUT_SHORT"] = 1] = "REASON_CUT_SHORT";
    Reason[Reason["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Reason = exports.Reason || (exports.Reason = {}));
var BattleTaskMessageType;
(function (BattleTaskMessageType) {
    BattleTaskMessageType[BattleTaskMessageType["BATTLE_TASK_MESSAGE_TYPE_START"] = 0] = "BATTLE_TASK_MESSAGE_TYPE_START";
    BattleTaskMessageType[BattleTaskMessageType["BATTLE_TASK_MESSAGE_TYPE_TASK_UPDATE"] = 1] = "BATTLE_TASK_MESSAGE_TYPE_TASK_UPDATE";
    BattleTaskMessageType[BattleTaskMessageType["BATTLE_TASK_MESSAGE_TYPE_TASK_SETTLE"] = 2] = "BATTLE_TASK_MESSAGE_TYPE_TASK_SETTLE";
    BattleTaskMessageType[BattleTaskMessageType["BATTLE_TASK_MESSAGE_TYPE_REWARD_SETTLE"] = 3] = "BATTLE_TASK_MESSAGE_TYPE_REWARD_SETTLE";
    BattleTaskMessageType[BattleTaskMessageType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BattleTaskMessageType = exports.BattleTaskMessageType || (exports.BattleTaskMessageType = {}));
var RewardStatus;
(function (RewardStatus) {
    RewardStatus[RewardStatus["REWARD_STATUS_SUCCEED"] = 0] = "REWARD_STATUS_SUCCEED";
    RewardStatus[RewardStatus["REWARD_STATUS_FAILED"] = 1] = "REWARD_STATUS_FAILED";
    RewardStatus[RewardStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(RewardStatus = exports.RewardStatus || (exports.RewardStatus = {}));
var BattleAction;
(function (BattleAction) {
    BattleAction[BattleAction["BATTLE_ACTION_UNKNOWN"] = 0] = "BATTLE_ACTION_UNKNOWN";
    BattleAction[BattleAction["BATTLE_ACTION_INVITE"] = 1] = "BATTLE_ACTION_INVITE";
    BattleAction[BattleAction["BATTLE_ACTION_REJECT"] = 2] = "BATTLE_ACTION_REJECT";
    BattleAction[BattleAction["BATTLE_ACTION_CANCEL"] = 3] = "BATTLE_ACTION_CANCEL";
    BattleAction[BattleAction["BATTLE_ACTION_OPEN"] = 4] = "BATTLE_ACTION_OPEN";
    BattleAction[BattleAction["BATTLE_ACTION_FINISH"] = 5] = "BATTLE_ACTION_FINISH";
    BattleAction[BattleAction["BATTLE_ACTION_CUT_SHORT"] = 6] = "BATTLE_ACTION_CUT_SHORT";
    BattleAction[BattleAction["BATTLE_ACTION_ACCEPT"] = 7] = "BATTLE_ACTION_ACCEPT";
    BattleAction[BattleAction["BATTLE_ACTION_QUIT_APPLY"] = 8] = "BATTLE_ACTION_QUIT_APPLY";
    BattleAction[BattleAction["BATTLE_ACTION_DECLINE_QUIT"] = 9] = "BATTLE_ACTION_DECLINE_QUIT";
    BattleAction[BattleAction["BATTLE_ACTION_DECLINE_OFF_QUIT"] = 10] = "BATTLE_ACTION_DECLINE_OFF_QUIT";
    BattleAction[BattleAction["BATTLE_ACTION_LEAVE_LINK_MIC"] = 11] = "BATTLE_ACTION_LEAVE_LINK_MIC";
    BattleAction[BattleAction["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BattleAction = exports.BattleAction || (exports.BattleAction = {}));
var Result;
(function (Result) {
    Result[Result["RESULT_WIN"] = 0] = "RESULT_WIN";
    Result[Result["RESULT_LOSE"] = 1] = "RESULT_LOSE";
    Result[Result["RESULT_DRAW"] = 2] = "RESULT_DRAW";
    Result[Result["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Result = exports.Result || (exports.Result = {}));
var GiftPermissionType;
(function (GiftPermissionType) {
    GiftPermissionType[GiftPermissionType["GIFT_PERMISSION_TYPE_UNKNOWN_TYPE"] = 0] = "GIFT_PERMISSION_TYPE_UNKNOWN_TYPE";
    GiftPermissionType[GiftPermissionType["GIFT_PERMISSION_TYPE_NO_GIFT_PERMISSION"] = 1] = "GIFT_PERMISSION_TYPE_NO_GIFT_PERMISSION";
    GiftPermissionType[GiftPermissionType["GIFT_PERMISSION_TYPE_ANCHOR_CLOSE"] = 2] = "GIFT_PERMISSION_TYPE_ANCHOR_CLOSE";
    GiftPermissionType[GiftPermissionType["GIFT_PERMISSION_TYPE_HAS_GIFT_PERMISSION"] = 3] = "GIFT_PERMISSION_TYPE_HAS_GIFT_PERMISSION";
    GiftPermissionType[GiftPermissionType["GIFT_PERMISSION_TYPE_ANCHOR_BANNED"] = 4] = "GIFT_PERMISSION_TYPE_ANCHOR_BANNED";
    GiftPermissionType[GiftPermissionType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(GiftPermissionType = exports.GiftPermissionType || (exports.GiftPermissionType = {}));
var BattleABTestType;
(function (BattleABTestType) {
    BattleABTestType[BattleABTestType["BATTLE_A_B_TEST_TYPE_UNKNOWN_AB_TEST_TYPE"] = 0] = "BATTLE_A_B_TEST_TYPE_UNKNOWN_AB_TEST_TYPE";
    BattleABTestType[BattleABTestType["BATTLE_A_B_TEST_TYPE_MEANWHILE_INVITE"] = 1] = "BATTLE_A_B_TEST_TYPE_MEANWHILE_INVITE";
    BattleABTestType[BattleABTestType["BATTLE_A_B_TEST_TYPE_SPECIFIED_GIFT"] = 2] = "BATTLE_A_B_TEST_TYPE_SPECIFIED_GIFT";
    BattleABTestType[BattleABTestType["BATTLE_A_B_TEST_TYPE_RT_C_MESSAGE_CHANNEL"] = 3] = "BATTLE_A_B_TEST_TYPE_RT_C_MESSAGE_CHANNEL";
    BattleABTestType[BattleABTestType["BATTLE_A_B_TEST_TYPE_CONNECTION_TIME_OUT"] = 4] = "BATTLE_A_B_TEST_TYPE_CONNECTION_TIME_OUT";
    BattleABTestType[BattleABTestType["BATTLE_A_B_TEST_TYPE_REMATCH_SKIP_TEAMMATE"] = 5] = "BATTLE_A_B_TEST_TYPE_REMATCH_SKIP_TEAMMATE";
    BattleABTestType[BattleABTestType["BATTLE_A_B_TEST_TYPE_OPT_INVITEE_4048"] = 6] = "BATTLE_A_B_TEST_TYPE_OPT_INVITEE_4048";
    BattleABTestType[BattleABTestType["BATTLE_A_B_TEST_TYPE_BATTLE_AB_TEST_TYPE_TIME_CALIBRATE"] = 7] = "BATTLE_A_B_TEST_TYPE_BATTLE_AB_TEST_TYPE_TIME_CALIBRATE";
    BattleABTestType[BattleABTestType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BattleABTestType = exports.BattleABTestType || (exports.BattleABTestType = {}));
var PlayScene;
(function (PlayScene) {
    PlayScene[PlayScene["PLAY_SCENE_UNKNOWN"] = 0] = "PLAY_SCENE_UNKNOWN";
    PlayScene[PlayScene["PLAY_SCENE_COUNTDOWN_FOR_ALL"] = 1] = "PLAY_SCENE_COUNTDOWN_FOR_ALL";
    PlayScene[PlayScene["PLAY_SCENE_COUNTDOWN_FOR_SINGLE"] = 2] = "PLAY_SCENE_COUNTDOWN_FOR_SINGLE";
    PlayScene[PlayScene["PLAY_SCENE_LIVE_SHOW"] = 3] = "PLAY_SCENE_LIVE_SHOW";
    PlayScene[PlayScene["PLAY_SCENE_AIG_C"] = 4] = "PLAY_SCENE_AIG_C";
    PlayScene[PlayScene["PLAY_SCENE_KARAOKE"] = 5] = "PLAY_SCENE_KARAOKE";
    PlayScene[PlayScene["PLAY_SCENE_DRAW_GUESS"] = 6] = "PLAY_SCENE_DRAW_GUESS";
    PlayScene[PlayScene["PLAY_SCENE_ENLARGE_GRID"] = 7] = "PLAY_SCENE_ENLARGE_GRID";
    PlayScene[PlayScene["PLAY_SCENE_GIFT_PRIORITY_LINK"] = 8] = "PLAY_SCENE_GIFT_PRIORITY_LINK";
    PlayScene[PlayScene["PLAY_SCENE_GIFT_THRESHOLD_LINK"] = 9] = "PLAY_SCENE_GIFT_THRESHOLD_LINK";
    PlayScene[PlayScene["PLAY_SCENE_NOTICE_BOARD"] = 10] = "PLAY_SCENE_NOTICE_BOARD";
    PlayScene[PlayScene["PLAY_SCENE_PLAY_BOOK"] = 11] = "PLAY_SCENE_PLAY_BOOK";
    PlayScene[PlayScene["PLAY_SCENE_GUEST_SHOWDOWN"] = 12] = "PLAY_SCENE_GUEST_SHOWDOWN";
    PlayScene[PlayScene["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PlayScene = exports.PlayScene || (exports.PlayScene = {}));
var LinkType;
(function (LinkType) {
    LinkType[LinkType["LINK_TYPE_TYPE_UNKNOWN"] = 0] = "LINK_TYPE_TYPE_UNKNOWN";
    LinkType[LinkType["LINK_TYPE_TYPE_VIDEO"] = 1] = "LINK_TYPE_TYPE_VIDEO";
    LinkType[LinkType["LINK_TYPE_TYPE_AUDIO"] = 2] = "LINK_TYPE_TYPE_AUDIO";
    LinkType[LinkType["LINK_TYPE_TYPE_VIRTUAL"] = 3] = "LINK_TYPE_TYPE_VIRTUAL";
    LinkType[LinkType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LinkType = exports.LinkType || (exports.LinkType = {}));
var LinkSilenceStatus;
(function (LinkSilenceStatus) {
    LinkSilenceStatus[LinkSilenceStatus["LINK_SILENCE_STATUS_STATUS_UN_SILENCE"] = 0] = "LINK_SILENCE_STATUS_STATUS_UN_SILENCE";
    LinkSilenceStatus[LinkSilenceStatus["LINK_SILENCE_STATUS_STATUS_SILENCE_BY_SELF"] = 1] = "LINK_SILENCE_STATUS_STATUS_SILENCE_BY_SELF";
    LinkSilenceStatus[LinkSilenceStatus["LINK_SILENCE_STATUS_STATUS_SILENCE_BY_OWNER"] = 2] = "LINK_SILENCE_STATUS_STATUS_SILENCE_BY_OWNER";
    LinkSilenceStatus[LinkSilenceStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LinkSilenceStatus = exports.LinkSilenceStatus || (exports.LinkSilenceStatus = {}));
var LinkmicRoleType;
(function (LinkmicRoleType) {
    LinkmicRoleType[LinkmicRoleType["LINKMIC_ROLE_TYPE_ROLE_TYPE_UNKOWN"] = 0] = "LINKMIC_ROLE_TYPE_ROLE_TYPE_UNKOWN";
    LinkmicRoleType[LinkmicRoleType["LINKMIC_ROLE_TYPE_LEADER"] = 1] = "LINKMIC_ROLE_TYPE_LEADER";
    LinkmicRoleType[LinkmicRoleType["LINKMIC_ROLE_TYPE_PLAYER"] = 2] = "LINKMIC_ROLE_TYPE_PLAYER";
    LinkmicRoleType[LinkmicRoleType["LINKMIC_ROLE_TYPE_INVITEE"] = 3] = "LINKMIC_ROLE_TYPE_INVITEE";
    LinkmicRoleType[LinkmicRoleType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LinkmicRoleType = exports.LinkmicRoleType || (exports.LinkmicRoleType = {}));
var LinkRoleType;
(function (LinkRoleType) {
    LinkRoleType[LinkRoleType["LINK_ROLE_TYPE_TYPE_ROLE_TYPE_UNKOWN"] = 0] = "LINK_ROLE_TYPE_TYPE_ROLE_TYPE_UNKOWN";
    LinkRoleType[LinkRoleType["LINK_ROLE_TYPE_TYPE_LEADER"] = 1] = "LINK_ROLE_TYPE_TYPE_LEADER";
    LinkRoleType[LinkRoleType["LINK_ROLE_TYPE_TYPE_PLAYER"] = 2] = "LINK_ROLE_TYPE_TYPE_PLAYER";
    LinkRoleType[LinkRoleType["LINK_ROLE_TYPE_TYPE_INVITEE"] = 3] = "LINK_ROLE_TYPE_TYPE_INVITEE";
    LinkRoleType[LinkRoleType["LINK_ROLE_TYPE_TYPE_APPLIER"] = 4] = "LINK_ROLE_TYPE_TYPE_APPLIER";
    LinkRoleType[LinkRoleType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LinkRoleType = exports.LinkRoleType || (exports.LinkRoleType = {}));
var MuteStatus;
(function (MuteStatus) {
    MuteStatus[MuteStatus["MUTE_STATUS_MUTE"] = 0] = "MUTE_STATUS_MUTE";
    MuteStatus[MuteStatus["MUTE_STATUS_UN_MUTE"] = 1] = "MUTE_STATUS_UN_MUTE";
    MuteStatus[MuteStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MuteStatus = exports.MuteStatus || (exports.MuteStatus = {}));
var GuestMicCameraManageOp;
(function (GuestMicCameraManageOp) {
    GuestMicCameraManageOp[GuestMicCameraManageOp["GUEST_MIC_CAMERA_MANAGE_OP_OPEN_MIC"] = 0] = "GUEST_MIC_CAMERA_MANAGE_OP_OPEN_MIC";
    GuestMicCameraManageOp[GuestMicCameraManageOp["GUEST_MIC_CAMERA_MANAGE_OP_OPEN_CAMERA"] = 1] = "GUEST_MIC_CAMERA_MANAGE_OP_OPEN_CAMERA";
    GuestMicCameraManageOp[GuestMicCameraManageOp["GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC"] = 2] = "GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC";
    GuestMicCameraManageOp[GuestMicCameraManageOp["GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_CAMERA"] = 3] = "GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_CAMERA";
    GuestMicCameraManageOp[GuestMicCameraManageOp["GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC_PUNISH"] = 4] = "GUEST_MIC_CAMERA_MANAGE_OP_CLOSE_MIC_PUNISH";
    GuestMicCameraManageOp[GuestMicCameraManageOp["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(GuestMicCameraManageOp = exports.GuestMicCameraManageOp || (exports.GuestMicCameraManageOp = {}));
var GuestMicCameraChangeScene;
(function (GuestMicCameraChangeScene) {
    GuestMicCameraChangeScene[GuestMicCameraChangeScene["GUEST_MIC_CAMERA_CHANGE_SCENE_CHANGE_SCENE_UNKNOWN"] = 0] = "GUEST_MIC_CAMERA_CHANGE_SCENE_CHANGE_SCENE_UNKNOWN";
    GuestMicCameraChangeScene[GuestMicCameraChangeScene["GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_ANCHOR_AUTO"] = 1] = "GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_ANCHOR_AUTO";
    GuestMicCameraChangeScene[GuestMicCameraChangeScene["GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SERVER_NORMAL"] = 2] = "GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SERVER_NORMAL";
    GuestMicCameraChangeScene[GuestMicCameraChangeScene["GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SHOW_END"] = 3] = "GUEST_MIC_CAMERA_CHANGE_SCENE_LIVE_SHOW_BY_SHOW_END";
    GuestMicCameraChangeScene[GuestMicCameraChangeScene["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(GuestMicCameraChangeScene = exports.GuestMicCameraChangeScene || (exports.GuestMicCameraChangeScene = {}));
var LinkMicUserAdminType;
(function (LinkMicUserAdminType) {
    LinkMicUserAdminType[LinkMicUserAdminType["LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE"] = 0] = "LINK_MIC_USER_ADMIN_TYPE_UNDEFINED_TYPE";
    LinkMicUserAdminType[LinkMicUserAdminType["LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE"] = 1] = "LINK_MIC_USER_ADMIN_TYPE_MANAGER_TYPE";
    LinkMicUserAdminType[LinkMicUserAdminType["LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE"] = 2] = "LINK_MIC_USER_ADMIN_TYPE_HOST_TYPE";
    LinkMicUserAdminType[LinkMicUserAdminType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LinkMicUserAdminType = exports.LinkMicUserAdminType || (exports.LinkMicUserAdminType = {}));
var LinkmicMultiLiveEnum;
(function (LinkmicMultiLiveEnum) {
    LinkmicMultiLiveEnum[LinkmicMultiLiveEnum["LINKMIC_MULTI_LIVE_ENUM_DEFAULT"] = 0] = "LINKMIC_MULTI_LIVE_ENUM_DEFAULT";
    LinkmicMultiLiveEnum[LinkmicMultiLiveEnum["LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT"] = 1] = "LINKMIC_MULTI_LIVE_ENUM_ANCHOR_USE_NEW_LAYOUT";
    LinkmicMultiLiveEnum[LinkmicMultiLiveEnum["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LinkmicMultiLiveEnum = exports.LinkmicMultiLiveEnum || (exports.LinkmicMultiLiveEnum = {}));
var PollEndType;
(function (PollEndType) {
    PollEndType[PollEndType["POLL_END_TYPE_POLL_END_BY_TIME"] = 0] = "POLL_END_TYPE_POLL_END_BY_TIME";
    PollEndType[PollEndType["POLL_END_TYPE_POLL_END_BY_OWNER"] = 1] = "POLL_END_TYPE_POLL_END_BY_OWNER";
    PollEndType[PollEndType["POLL_END_TYPE_POLL_END_BY_OTHER"] = 2] = "POLL_END_TYPE_POLL_END_BY_OTHER";
    PollEndType[PollEndType["POLL_END_TYPE_POLL_END_BY_ADMIN"] = 3] = "POLL_END_TYPE_POLL_END_BY_ADMIN";
    PollEndType[PollEndType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PollEndType = exports.PollEndType || (exports.PollEndType = {}));
var CohostABTestType;
(function (CohostABTestType) {
    CohostABTestType[CohostABTestType["COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_UNKNOWN"] = 0] = "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_UNKNOWN";
    CohostABTestType[CohostABTestType["COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_LINK_TIME_OUT_STRATEGY"] = 1] = "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_LINK_TIME_OUT_STRATEGY";
    CohostABTestType[CohostABTestType["COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_RESERVATION"] = 2] = "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_RESERVATION";
    CohostABTestType[CohostABTestType["COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_QUICK_PAIR_NEW_ARCH_SWITCH"] = 3] = "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_QUICK_PAIR_NEW_ARCH_SWITCH";
    CohostABTestType[CohostABTestType["COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_INVITATION_TEXT"] = 4] = "COHOST_A_B_TEST_TYPE_COHOST_AB_TEST_TYPE_COHOST_INVITATION_TEXT";
    CohostABTestType[CohostABTestType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CohostABTestType = exports.CohostABTestType || (exports.CohostABTestType = {}));
var OptPairStatus;
(function (OptPairStatus) {
    OptPairStatus[OptPairStatus["OPT_PAIR_STATUS_UNKNOWN"] = 0] = "OPT_PAIR_STATUS_UNKNOWN";
    OptPairStatus[OptPairStatus["OPT_PAIR_STATUS_OFFLINE"] = 1] = "OPT_PAIR_STATUS_OFFLINE";
    OptPairStatus[OptPairStatus["OPT_PAIR_STATUS_FINISHED"] = 2] = "OPT_PAIR_STATUS_FINISHED";
    OptPairStatus[OptPairStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(OptPairStatus = exports.OptPairStatus || (exports.OptPairStatus = {}));
var ContentPositionType;
(function (ContentPositionType) {
    ContentPositionType[ContentPositionType["CONTENT_POSITION_TYPE_UNKNOWN"] = 0] = "CONTENT_POSITION_TYPE_UNKNOWN";
    ContentPositionType[ContentPositionType["CONTENT_POSITION_TYPE_STREAM"] = 1] = "CONTENT_POSITION_TYPE_STREAM";
    ContentPositionType[ContentPositionType["CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_PORTRAIT"] = 2] = "CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_PORTRAIT";
    ContentPositionType[ContentPositionType["CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_LANDSCAPE"] = 3] = "CONTENT_POSITION_TYPE_LIVE_STUDIO_STREAM_LANDSCAPE";
    ContentPositionType[ContentPositionType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ContentPositionType = exports.ContentPositionType || (exports.ContentPositionType = {}));
var MultiGuestOutsideRoomInviteSource;
(function (MultiGuestOutsideRoomInviteSource) {
    MultiGuestOutsideRoomInviteSource[MultiGuestOutsideRoomInviteSource["MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_UNKNOWN"] = 0] = "MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_UNKNOWN";
    MultiGuestOutsideRoomInviteSource[MultiGuestOutsideRoomInviteSource["MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_PANEL"] = 1] = "MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_PANEL";
    MultiGuestOutsideRoomInviteSource[MultiGuestOutsideRoomInviteSource["MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_CAPSULE"] = 2] = "MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_CAPSULE";
    MultiGuestOutsideRoomInviteSource[MultiGuestOutsideRoomInviteSource["MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_EMPTY_POSITION"] = 3] = "MULTI_GUEST_OUTSIDE_ROOM_INVITE_SOURCE_OUTSIDE_ROOM_INVITE_SOURCE_EMPTY_POSITION";
    MultiGuestOutsideRoomInviteSource[MultiGuestOutsideRoomInviteSource["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(MultiGuestOutsideRoomInviteSource = exports.MultiGuestOutsideRoomInviteSource || (exports.MultiGuestOutsideRoomInviteSource = {}));
var LinkUserType;
(function (LinkUserType) {
    LinkUserType[LinkUserType["LINK_USER_TYPE_DEFAULT"] = 0] = "LINK_USER_TYPE_DEFAULT";
    LinkUserType[LinkUserType["LINK_USER_TYPE_KARAOKE"] = 1] = "LINK_USER_TYPE_KARAOKE";
    LinkUserType[LinkUserType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LinkUserType = exports.LinkUserType || (exports.LinkUserType = {}));
var ContentInviteSource;
(function (ContentInviteSource) {
    ContentInviteSource[ContentInviteSource["CONTENT_INVITE_SOURCE_INVITE_SOURCE_UNKNOWN"] = 0] = "CONTENT_INVITE_SOURCE_INVITE_SOURCE_UNKNOWN";
    ContentInviteSource[ContentInviteSource["CONTENT_INVITE_SOURCE_INVITE_SOURCE_PANEL_GO_LIVE"] = 1] = "CONTENT_INVITE_SOURCE_INVITE_SOURCE_PANEL_GO_LIVE";
    ContentInviteSource[ContentInviteSource["CONTENT_INVITE_SOURCE_INVITE_SOURCE_MUTUAL_NOTICE"] = 2] = "CONTENT_INVITE_SOURCE_INVITE_SOURCE_MUTUAL_NOTICE";
    ContentInviteSource[ContentInviteSource["CONTENT_INVITE_SOURCE_INVITE_SOURCE_USER_PROFILE"] = 3] = "CONTENT_INVITE_SOURCE_INVITE_SOURCE_USER_PROFILE";
    ContentInviteSource[ContentInviteSource["CONTENT_INVITE_SOURCE_INVITE_SOURCE_RESERVE"] = 4] = "CONTENT_INVITE_SOURCE_INVITE_SOURCE_RESERVE";
    ContentInviteSource[ContentInviteSource["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(ContentInviteSource = exports.ContentInviteSource || (exports.ContentInviteSource = {}));
var LinkmicShareRevenueSetting;
(function (LinkmicShareRevenueSetting) {
    LinkmicShareRevenueSetting[LinkmicShareRevenueSetting["LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_NOT_SET"] = 0] = "LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_NOT_SET";
    LinkmicShareRevenueSetting[LinkmicShareRevenueSetting["LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_OPEN"] = 1] = "LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_OPEN";
    LinkmicShareRevenueSetting[LinkmicShareRevenueSetting["LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_CLOSE"] = 2] = "LINKMIC_SHARE_REVENUE_SETTING_LINK_MIC_SHARE_REVENUE_CLOSE";
    LinkmicShareRevenueSetting[LinkmicShareRevenueSetting["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(LinkmicShareRevenueSetting = exports.LinkmicShareRevenueSetting || (exports.LinkmicShareRevenueSetting = {}));
var PosIdentityType;
(function (PosIdentityType) {
    PosIdentityType[PosIdentityType["POS_IDENTITY_TYPE_IDENTITY_EMPTY_SLOT"] = 0] = "POS_IDENTITY_TYPE_IDENTITY_EMPTY_SLOT";
    PosIdentityType[PosIdentityType["POS_IDENTITY_TYPE_IDENTITY_RT_C_USER_ID"] = 1] = "POS_IDENTITY_TYPE_IDENTITY_RT_C_USER_ID";
    PosIdentityType[PosIdentityType["POS_IDENTITY_TYPE_IDENTITY_RT_C_STREAM_ID"] = 2] = "POS_IDENTITY_TYPE_IDENTITY_RT_C_STREAM_ID";
    PosIdentityType[PosIdentityType["POS_IDENTITY_TYPE_IDENTITY_LIVE_USER_ID"] = 3] = "POS_IDENTITY_TYPE_IDENTITY_LIVE_USER_ID";
    PosIdentityType[PosIdentityType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PosIdentityType = exports.PosIdentityType || (exports.PosIdentityType = {}));
var JoinType;
(function (JoinType) {
    JoinType[JoinType["JOIN_TYPE_UNKNOWN"] = 0] = "JOIN_TYPE_UNKNOWN";
    JoinType[JoinType["JOIN_TYPE_CHANNEL_APPLY"] = 1] = "JOIN_TYPE_CHANNEL_APPLY";
    JoinType[JoinType["JOIN_TYPE_CHANNEL_INVITE"] = 2] = "JOIN_TYPE_CHANNEL_INVITE";
    JoinType[JoinType["JOIN_TYPE_GROUP_APPLY"] = 100] = "JOIN_TYPE_GROUP_APPLY";
    JoinType[JoinType["JOIN_TYPE_GROUP_APPLY_FOLLOW"] = 101] = "JOIN_TYPE_GROUP_APPLY_FOLLOW";
    JoinType[JoinType["JOIN_TYPE_GROUP_INVITE"] = 102] = "JOIN_TYPE_GROUP_INVITE";
    JoinType[JoinType["JOIN_TYPE_GROUP_INVITE_FOLLOW"] = 103] = "JOIN_TYPE_GROUP_INVITE_FOLLOW";
    JoinType[JoinType["JOIN_TYPE_GROUP_OWNER_JOIN"] = 104] = "JOIN_TYPE_GROUP_OWNER_JOIN";
    JoinType[JoinType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(JoinType = exports.JoinType || (exports.JoinType = {}));
var CohostLayoutMode;
(function (CohostLayoutMode) {
    CohostLayoutMode[CohostLayoutMode["COHOST_LAYOUT_MODE_NORMAL"] = 0] = "COHOST_LAYOUT_MODE_NORMAL";
    CohostLayoutMode[CohostLayoutMode["COHOST_LAYOUT_MODE_SCREEN_SHARE"] = 1] = "COHOST_LAYOUT_MODE_SCREEN_SHARE";
    CohostLayoutMode[CohostLayoutMode["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CohostLayoutMode = exports.CohostLayoutMode || (exports.CohostLayoutMode = {}));
var TagClassification;
(function (TagClassification) {
    TagClassification[TagClassification["TAG_CLASSIFICATION_UNKNOWN"] = 0] = "TAG_CLASSIFICATION_UNKNOWN";
    TagClassification[TagClassification["TAG_CLASSIFICATION_COHOST_HISTORY"] = 1] = "TAG_CLASSIFICATION_COHOST_HISTORY";
    TagClassification[TagClassification["TAG_CLASSIFICATION_FIRST_DEGREE_RELATION"] = 2] = "TAG_CLASSIFICATION_FIRST_DEGREE_RELATION";
    TagClassification[TagClassification["TAG_CLASSIFICATION_SECOND_DEGREE_RELATION"] = 3] = "TAG_CLASSIFICATION_SECOND_DEGREE_RELATION";
    TagClassification[TagClassification["TAG_CLASSIFICATION_RANK"] = 4] = "TAG_CLASSIFICATION_RANK";
    TagClassification[TagClassification["TAG_CLASSIFICATION_SIMILAR_INTERESTS"] = 5] = "TAG_CLASSIFICATION_SIMILAR_INTERESTS";
    TagClassification[TagClassification["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(TagClassification = exports.TagClassification || (exports.TagClassification = {}));
var SourceType;
(function (SourceType) {
    SourceType[SourceType["SOURCE_TYPE_UNKNOWN"] = 0] = "SOURCE_TYPE_UNKNOWN";
    SourceType[SourceType["SOURCE_TYPE_FRIEND_LIST"] = 1] = "SOURCE_TYPE_FRIEND_LIST";
    SourceType[SourceType["SOURCE_TYPE_RECOMMEND_LIST"] = 2] = "SOURCE_TYPE_RECOMMEND_LIST";
    SourceType[SourceType["SOURCE_TYPE_RECENT"] = 3] = "SOURCE_TYPE_RECENT";
    SourceType[SourceType["SOURCE_TYPE_OTHER_FOLLOW"] = 4] = "SOURCE_TYPE_OTHER_FOLLOW";
    SourceType[SourceType["SOURCE_TYPE_QUICK_PAIR"] = 5] = "SOURCE_TYPE_QUICK_PAIR";
    SourceType[SourceType["SOURCE_TYPE_ACTIVITY"] = 6] = "SOURCE_TYPE_ACTIVITY";
    SourceType[SourceType["SOURCE_TYPE_QUICK_RECOMMEND"] = 7] = "SOURCE_TYPE_QUICK_RECOMMEND";
    SourceType[SourceType["SOURCE_TYPE_OFFICIAL_CHANNEL"] = 8] = "SOURCE_TYPE_OFFICIAL_CHANNEL";
    SourceType[SourceType["SOURCE_TYPE_BEST_TEAMMATE"] = 9] = "SOURCE_TYPE_BEST_TEAMMATE";
    SourceType[SourceType["SOURCE_TYPE_RESERVATION"] = 10] = "SOURCE_TYPE_RESERVATION";
    SourceType[SourceType["SOURCE_TYPE_PAIRING"] = 11] = "SOURCE_TYPE_PAIRING";
    SourceType[SourceType["SOURCE_TYPE_PAIRING_ON_RESERVATION"] = 12] = "SOURCE_TYPE_PAIRING_ON_RESERVATION";
    SourceType[SourceType["SOURCE_TYPE_TOPIC_QUICK_PAIR"] = 13] = "SOURCE_TYPE_TOPIC_QUICK_PAIR";
    SourceType[SourceType["SOURCE_TYPE_TOPIC_QUICK_RECOMMEND"] = 14] = "SOURCE_TYPE_TOPIC_QUICK_RECOMMEND";
    SourceType[SourceType["SOURCE_TYPE_ONLINE_FRIEND_CAPSULE"] = 15] = "SOURCE_TYPE_ONLINE_FRIEND_CAPSULE";
    SourceType[SourceType["SOURCE_TYPE_WEEKLY_RANK"] = 20] = "SOURCE_TYPE_WEEKLY_RANK";
    SourceType[SourceType["SOURCE_TYPE_HOURLY_RANK"] = 21] = "SOURCE_TYPE_HOURLY_RANK";
    SourceType[SourceType["SOURCE_TYPE_WEEKLY_RISING"] = 23] = "SOURCE_TYPE_WEEKLY_RISING";
    SourceType[SourceType["SOURCE_TYPE_WEEKLY_ROOKIE"] = 24] = "SOURCE_TYPE_WEEKLY_ROOKIE";
    SourceType[SourceType["SOURCE_TYPE_CONNECTION_LIST"] = 25] = "SOURCE_TYPE_CONNECTION_LIST";
    SourceType[SourceType["SOURCE_TYPE_DAILY_RANK"] = 26] = "SOURCE_TYPE_DAILY_RANK";
    SourceType[SourceType["SOURCE_TYPE_DAILY_RANK_HALL_OF_FAME"] = 27] = "SOURCE_TYPE_DAILY_RANK_HALL_OF_FAME";
    SourceType[SourceType["SOURCE_TYPE_RESERVATION_BUBBLE"] = 28] = "SOURCE_TYPE_RESERVATION_BUBBLE";
    SourceType[SourceType["SOURCE_TYPE_PAIRING_BUBBLE"] = 29] = "SOURCE_TYPE_PAIRING_BUBBLE";
    SourceType[SourceType["SOURCE_TYPE_LEAGUE_PHASE_ONE"] = 30] = "SOURCE_TYPE_LEAGUE_PHASE_ONE";
    SourceType[SourceType["SOURCE_TYPE_LEAGUE_PHASE_TWO"] = 31] = "SOURCE_TYPE_LEAGUE_PHASE_TWO";
    SourceType[SourceType["SOURCE_TYPE_LEAGUE_PHASE_THREE"] = 32] = "SOURCE_TYPE_LEAGUE_PHASE_THREE";
    SourceType[SourceType["SOURCE_TYPE_DAILY_ROOKIE"] = 33] = "SOURCE_TYPE_DAILY_ROOKIE";
    SourceType[SourceType["SOURCE_TYPE_MAY_KNOW_LIST"] = 34] = "SOURCE_TYPE_MAY_KNOW_LIST";
    SourceType[SourceType["SOURCE_TYPE_BANNER"] = 35] = "SOURCE_TYPE_BANNER";
    SourceType[SourceType["SOURCE_TYPE_FANS_TEAM_RANK"] = 36] = "SOURCE_TYPE_FANS_TEAM_RANK";
    SourceType[SourceType["SOURCE_TYPE_SEARCH"] = 37] = "SOURCE_TYPE_SEARCH";
    SourceType[SourceType["SOURCE_TYPE_E_OY_RANK_LIST"] = 38] = "SOURCE_TYPE_E_OY_RANK_LIST";
    SourceType[SourceType["SOURCE_TYPE_LEAGUE_CAMPAIGN_RANK"] = 39] = "SOURCE_TYPE_LEAGUE_CAMPAIGN_RANK";
    SourceType[SourceType["SOURCE_TYPE_CREATOR_CLASS_RANK"] = 40] = "SOURCE_TYPE_CREATOR_CLASS_RANK";
    SourceType[SourceType["SOURCE_TYPE_HISTORY"] = 41] = "SOURCE_TYPE_HISTORY";
    SourceType[SourceType["SOURCE_TYPE_QUICK_RECOMMEND_DURING_COHOST"] = 43] = "SOURCE_TYPE_QUICK_RECOMMEND_DURING_COHOST";
    SourceType[SourceType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SourceType = exports.SourceType || (exports.SourceType = {}));
var BattleType;
(function (BattleType) {
    BattleType[BattleType["BATTLE_TYPE_UNKNOWN_BATTLE_TYPE"] = 0] = "BATTLE_TYPE_UNKNOWN_BATTLE_TYPE";
    BattleType[BattleType["BATTLE_TYPE_NORMAL_BATTLE"] = 1] = "BATTLE_TYPE_NORMAL_BATTLE";
    BattleType[BattleType["BATTLE_TYPE_TEAM_BATTLE"] = 2] = "BATTLE_TYPE_TEAM_BATTLE";
    BattleType[BattleType["BATTLE_TYPE_INDIVIDUAL_BATTLE"] = 3] = "BATTLE_TYPE_INDIVIDUAL_BATTLE";
    BattleType[BattleType["BATTLE_TYPE_1_V_N"] = 4] = "BATTLE_TYPE_1_V_N";
    BattleType[BattleType["BATTLE_TYPE_TAKE_THE_STAGE"] = 51] = "BATTLE_TYPE_TAKE_THE_STAGE";
    BattleType[BattleType["BATTLE_TYPE_GROUP_SHOW"] = 52] = "BATTLE_TYPE_GROUP_SHOW";
    BattleType[BattleType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BattleType = exports.BattleType || (exports.BattleType = {}));
var BattleInviteType;
(function (BattleInviteType) {
    BattleInviteType[BattleInviteType["BATTLE_INVITE_TYPE_NORMAL"] = 0] = "BATTLE_INVITE_TYPE_NORMAL";
    BattleInviteType[BattleInviteType["BATTLE_INVITE_TYPE_AGAIN"] = 1] = "BATTLE_INVITE_TYPE_AGAIN";
    BattleInviteType[BattleInviteType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BattleInviteType = exports.BattleInviteType || (exports.BattleInviteType = {}));
var CommonMessageData_IMDispatchStrategy;
(function (CommonMessageData_IMDispatchStrategy) {
    CommonMessageData_IMDispatchStrategy[CommonMessageData_IMDispatchStrategy["IM_DISPATCH_STRATEGY_DEFAULT"] = 0] = "IM_DISPATCH_STRATEGY_DEFAULT";
    CommonMessageData_IMDispatchStrategy[CommonMessageData_IMDispatchStrategy["IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE"] = 1] = "IM_DISPATCH_STRATEGY_BYPASS_DISPATCH_QUEUE";
    CommonMessageData_IMDispatchStrategy[CommonMessageData_IMDispatchStrategy["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(CommonMessageData_IMDispatchStrategy = exports.CommonMessageData_IMDispatchStrategy || (exports.CommonMessageData_IMDispatchStrategy = {}));
var Text_ShowType;
(function (Text_ShowType) {
    Text_ShowType[Text_ShowType["SHOW_TYPE_NORMAL"] = 0] = "SHOW_TYPE_NORMAL";
    Text_ShowType[Text_ShowType["SHOW_TYPE_FADE_IN_OUT"] = 1] = "SHOW_TYPE_FADE_IN_OUT";
    Text_ShowType[Text_ShowType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Text_ShowType = exports.Text_ShowType || (exports.Text_ShowType = {}));
var BadgeStruct_BadgeDisplayType;
(function (BadgeStruct_BadgeDisplayType) {
    BadgeStruct_BadgeDisplayType[BadgeStruct_BadgeDisplayType["BADGEDISPLAYTYPE_UNKNOWN"] = 0] = "BADGEDISPLAYTYPE_UNKNOWN";
    BadgeStruct_BadgeDisplayType[BadgeStruct_BadgeDisplayType["BADGEDISPLAYTYPE_IMAGE"] = 1] = "BADGEDISPLAYTYPE_IMAGE";
    BadgeStruct_BadgeDisplayType[BadgeStruct_BadgeDisplayType["BADGEDISPLAYTYPE_TEXT"] = 2] = "BADGEDISPLAYTYPE_TEXT";
    BadgeStruct_BadgeDisplayType[BadgeStruct_BadgeDisplayType["BADGEDISPLAYTYPE_STRING"] = 3] = "BADGEDISPLAYTYPE_STRING";
    BadgeStruct_BadgeDisplayType[BadgeStruct_BadgeDisplayType["BADGEDISPLAYTYPE_COMBINE"] = 4] = "BADGEDISPLAYTYPE_COMBINE";
    BadgeStruct_BadgeDisplayType[BadgeStruct_BadgeDisplayType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BadgeStruct_BadgeDisplayType = exports.BadgeStruct_BadgeDisplayType || (exports.BadgeStruct_BadgeDisplayType = {}));
var BadgeStruct_BadgePriorityType;
(function (BadgeStruct_BadgePriorityType) {
    BadgeStruct_BadgePriorityType[BadgeStruct_BadgePriorityType["BADGE_PRIORITY_TYPE_UNKNOWN"] = 0] = "BADGE_PRIORITY_TYPE_UNKNOWN";
    BadgeStruct_BadgePriorityType[BadgeStruct_BadgePriorityType["BADGE_PRIORITY_TYPE_STRONG_RELATION"] = 10] = "BADGE_PRIORITY_TYPE_STRONG_RELATION";
    BadgeStruct_BadgePriorityType[BadgeStruct_BadgePriorityType["BADGE_PRIORITY_TYPE_PLATFORM"] = 20] = "BADGE_PRIORITY_TYPE_PLATFORM";
    BadgeStruct_BadgePriorityType[BadgeStruct_BadgePriorityType["BADGE_PRIORITY_TYPE_RELATION"] = 30] = "BADGE_PRIORITY_TYPE_RELATION";
    BadgeStruct_BadgePriorityType[BadgeStruct_BadgePriorityType["BADGE_PRIORITY_TYPE_ACTIVITY"] = 40] = "BADGE_PRIORITY_TYPE_ACTIVITY";
    BadgeStruct_BadgePriorityType[BadgeStruct_BadgePriorityType["BADGE_PRIORITY_TYPE_RANK_LIST"] = 50] = "BADGE_PRIORITY_TYPE_RANK_LIST";
    BadgeStruct_BadgePriorityType[BadgeStruct_BadgePriorityType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BadgeStruct_BadgePriorityType = exports.BadgeStruct_BadgePriorityType || (exports.BadgeStruct_BadgePriorityType = {}));
var BadgeStruct_BadgeSceneType;
(function (BadgeStruct_BadgeSceneType) {
    BadgeStruct_BadgeSceneType[BadgeStruct_BadgeSceneType["BADGE_SCENE_TYPE_UNKNOWN"] = 0] = "BADGE_SCENE_TYPE_UNKNOWN";
    BadgeStruct_BadgeSceneType[BadgeStruct_BadgeSceneType["BADGE_SCENE_TYPE_ADMIN"] = 1] = "BADGE_SCENE_TYPE_ADMIN";
    BadgeStruct_BadgeSceneType[BadgeStruct_BadgeSceneType["BADGE_SCENE_TYPE_FIRST_RECHARGE"] = 2] = "BADGE_SCENE_TYPE_FIRST_RECHARGE";
    BadgeStruct_BadgeSceneType[BadgeStruct_BadgeSceneType["BADGE_SCENE_TYPE_FRIENDS"] = 3] = "BADGE_SCENE_TYPE_FRIENDS";
    BadgeStruct_BadgeSceneType[BadgeStruct_BadgeSceneType["BADGE_SCENE_TYPE_SUBSCRIBER"] = 4] = "BADGE_SCENE_TYPE_SUBSCRIBER";
    BadgeStruct_BadgeSceneType[BadgeStruct_BadgeSceneType["BADGE_SCENE_TYPE_ACTIVITY"] = 5] = "BADGE_SCENE_TYPE_ACTIVITY";
    BadgeStruct_BadgeSceneType[BadgeStruct_BadgeSceneType["BADGE_SCENE_TYPE_RANK_LIST"] = 6] = "BADGE_SCENE_TYPE_RANK_LIST";
    BadgeStruct_BadgeSceneType[BadgeStruct_BadgeSceneType["BADGE_SCENE_TYPE_NEW_SUBSCRIBER"] = 7] = "BADGE_SCENE_TYPE_NEW_SUBSCRIBER";
    BadgeStruct_BadgeSceneType[BadgeStruct_BadgeSceneType["BADGE_SCENE_TYPE_USER_GRADE"] = 8] = "BADGE_SCENE_TYPE_USER_GRADE";
    BadgeStruct_BadgeSceneType[BadgeStruct_BadgeSceneType["BADGE_SCENE_TYPE_STATE_CONTROLLED_MEDIA"] = 9] = "BADGE_SCENE_TYPE_STATE_CONTROLLED_MEDIA";
    BadgeStruct_BadgeSceneType[BadgeStruct_BadgeSceneType["BADGE_SCENE_TYPE_FANS"] = 10] = "BADGE_SCENE_TYPE_FANS";
    BadgeStruct_BadgeSceneType[BadgeStruct_BadgeSceneType["BADGE_SCENE_TYPE_LIVE_PRO"] = 11] = "BADGE_SCENE_TYPE_LIVE_PRO";
    BadgeStruct_BadgeSceneType[BadgeStruct_BadgeSceneType["BADGE_SCENE_TYPE_ANCHOR"] = 12] = "BADGE_SCENE_TYPE_ANCHOR";
    BadgeStruct_BadgeSceneType[BadgeStruct_BadgeSceneType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BadgeStruct_BadgeSceneType = exports.BadgeStruct_BadgeSceneType || (exports.BadgeStruct_BadgeSceneType = {}));
var BadgeStruct_DisplayStatus;
(function (BadgeStruct_DisplayStatus) {
    BadgeStruct_DisplayStatus[BadgeStruct_DisplayStatus["DISPLAY_STATUS_NORMAL"] = 0] = "DISPLAY_STATUS_NORMAL";
    BadgeStruct_DisplayStatus[BadgeStruct_DisplayStatus["DISPLAY_STATUS_SHADOW"] = 1] = "DISPLAY_STATUS_SHADOW";
    BadgeStruct_DisplayStatus[BadgeStruct_DisplayStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BadgeStruct_DisplayStatus = exports.BadgeStruct_DisplayStatus || (exports.BadgeStruct_DisplayStatus = {}));
var BadgeStruct_BadgeExhibitionType;
(function (BadgeStruct_BadgeExhibitionType) {
    BadgeStruct_BadgeExhibitionType[BadgeStruct_BadgeExhibitionType["BADGE_EXHIBITION_TYPE_BADGE"] = 0] = "BADGE_EXHIBITION_TYPE_BADGE";
    BadgeStruct_BadgeExhibitionType[BadgeStruct_BadgeExhibitionType["BADGE_EXHIBITION_TYPE_IDENTITY_LABEL"] = 1] = "BADGE_EXHIBITION_TYPE_IDENTITY_LABEL";
    BadgeStruct_BadgeExhibitionType[BadgeStruct_BadgeExhibitionType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BadgeStruct_BadgeExhibitionType = exports.BadgeStruct_BadgeExhibitionType || (exports.BadgeStruct_BadgeExhibitionType = {}));
var BadgeStruct_Position;
(function (BadgeStruct_Position) {
    BadgeStruct_Position[BadgeStruct_Position["POSITIONUNKNOWN"] = 0] = "POSITIONUNKNOWN";
    BadgeStruct_Position[BadgeStruct_Position["POSITIONLEFT"] = 1] = "POSITIONLEFT";
    BadgeStruct_Position[BadgeStruct_Position["POSITIONRIGHT"] = 2] = "POSITIONRIGHT";
    BadgeStruct_Position[BadgeStruct_Position["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BadgeStruct_Position = exports.BadgeStruct_Position || (exports.BadgeStruct_Position = {}));
var BadgeStruct_HorizontalPaddingRule;
(function (BadgeStruct_HorizontalPaddingRule) {
    BadgeStruct_HorizontalPaddingRule[BadgeStruct_HorizontalPaddingRule["HORIZONTAL_PADDING_RULE_USE_MIDDLE_AND_WIDTH"] = 0] = "HORIZONTAL_PADDING_RULE_USE_MIDDLE_AND_WIDTH";
    BadgeStruct_HorizontalPaddingRule[BadgeStruct_HorizontalPaddingRule["HORIZONTAL_PADDING_RULE_USE_LEFT_AND_MIDDLE_AND_RIGHT"] = 1] = "HORIZONTAL_PADDING_RULE_USE_LEFT_AND_MIDDLE_AND_RIGHT";
    BadgeStruct_HorizontalPaddingRule[BadgeStruct_HorizontalPaddingRule["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BadgeStruct_HorizontalPaddingRule = exports.BadgeStruct_HorizontalPaddingRule || (exports.BadgeStruct_HorizontalPaddingRule = {}));
var BadgeStruct_VerticalPaddingRule;
(function (BadgeStruct_VerticalPaddingRule) {
    BadgeStruct_VerticalPaddingRule[BadgeStruct_VerticalPaddingRule["VERTICAL_PADDING_RULE_USE_DEFAULT"] = 0] = "VERTICAL_PADDING_RULE_USE_DEFAULT";
    BadgeStruct_VerticalPaddingRule[BadgeStruct_VerticalPaddingRule["VERTICAL_PADDING_RULE_USE_TOP_AND_BOTTOM"] = 1] = "VERTICAL_PADDING_RULE_USE_TOP_AND_BOTTOM";
    BadgeStruct_VerticalPaddingRule[BadgeStruct_VerticalPaddingRule["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(BadgeStruct_VerticalPaddingRule = exports.BadgeStruct_VerticalPaddingRule || (exports.BadgeStruct_VerticalPaddingRule = {}));
/**
 * @EventPayMethod
 * webcast.data.LiveEventInfo
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
var User_LiveEventInfo_EventPayMethod;
(function (User_LiveEventInfo_EventPayMethod) {
    User_LiveEventInfo_EventPayMethod[User_LiveEventInfo_EventPayMethod["EVENTPAYMETHODINVALID"] = 0] = "EVENTPAYMETHODINVALID";
    User_LiveEventInfo_EventPayMethod[User_LiveEventInfo_EventPayMethod["EVENTPAYMETHODCOINS"] = 1] = "EVENTPAYMETHODCOINS";
    User_LiveEventInfo_EventPayMethod[User_LiveEventInfo_EventPayMethod["EVENTPAYMETHODCASH"] = 2] = "EVENTPAYMETHODCASH";
    User_LiveEventInfo_EventPayMethod[User_LiveEventInfo_EventPayMethod["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(User_LiveEventInfo_EventPayMethod = exports.User_LiveEventInfo_EventPayMethod || (exports.User_LiveEventInfo_EventPayMethod = {}));
/**
 * @CreatorType
 * webcast.data.User.EcommerceEntrance
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
var User_EcommerceEntrance_CreatorType;
(function (User_EcommerceEntrance_CreatorType) {
    User_EcommerceEntrance_CreatorType[User_EcommerceEntrance_CreatorType["UNDEFINED"] = 0] = "UNDEFINED";
    User_EcommerceEntrance_CreatorType[User_EcommerceEntrance_CreatorType["OFFICIAL"] = 1] = "OFFICIAL";
    User_EcommerceEntrance_CreatorType[User_EcommerceEntrance_CreatorType["MARKET"] = 2] = "MARKET";
    User_EcommerceEntrance_CreatorType[User_EcommerceEntrance_CreatorType["NORMAL"] = 3] = "NORMAL";
    User_EcommerceEntrance_CreatorType[User_EcommerceEntrance_CreatorType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(User_EcommerceEntrance_CreatorType = exports.User_EcommerceEntrance_CreatorType || (exports.User_EcommerceEntrance_CreatorType = {}));
/**
 * @EntranceType
 * webcast.data.User.EcommerceEntrance
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
var User_EcommerceEntrance_EntranceType;
(function (User_EcommerceEntrance_EntranceType) {
    User_EcommerceEntrance_EntranceType[User_EcommerceEntrance_EntranceType["PROFILE"] = 0] = "PROFILE";
    User_EcommerceEntrance_EntranceType[User_EcommerceEntrance_EntranceType["SHOWCASE"] = 1] = "SHOWCASE";
    User_EcommerceEntrance_EntranceType[User_EcommerceEntrance_EntranceType["SHOP"] = 2] = "SHOP";
    User_EcommerceEntrance_EntranceType[User_EcommerceEntrance_EntranceType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(User_EcommerceEntrance_EntranceType = exports.User_EcommerceEntrance_EntranceType || (exports.User_EcommerceEntrance_EntranceType = {}));
/**
 * @StoreBrandLabelType
 * webcast.data.User.EcommerceEntrance.ShopEntranceInfo.StoreLabel
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
var User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType;
(function (User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType) {
    User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType[User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType["NONE"] = 0] = "NONE";
    User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType[User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType["OFFICIAL"] = 1] = "OFFICIAL";
    User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType[User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType["AUTHORIZED"] = 2] = "AUTHORIZED";
    User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType[User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType["STORE_BRAND_LABEL_TYPE_BLUE_V"] = 3] = "STORE_BRAND_LABEL_TYPE_BLUE_V";
    User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType[User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType["STORE_BRAND_LABEL_TYPE_TOP_CHOICE"] = 4] = "STORE_BRAND_LABEL_TYPE_TOP_CHOICE";
    User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType[User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType || (exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreBrandLabelType = {}));
/**
 * @PreferntialType
 * webcast.data.User.FansClub
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
var User_FansClub_PreferntialType;
(function (User_FansClub_PreferntialType) {
    User_FansClub_PreferntialType[User_FansClub_PreferntialType["PRESONALPROFILE"] = 0] = "PRESONALPROFILE";
    User_FansClub_PreferntialType[User_FansClub_PreferntialType["OTHERROOM"] = 1] = "OTHERROOM";
    User_FansClub_PreferntialType[User_FansClub_PreferntialType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(User_FansClub_PreferntialType = exports.User_FansClub_PreferntialType || (exports.User_FansClub_PreferntialType = {}));
/**
 * @BadgeIcon
 * webcast.data.User.FansClub.FansClubData
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
var User_FansClub_FansClubData_BadgeIcon;
(function (User_FansClub_FansClubData_BadgeIcon) {
    User_FansClub_FansClubData_BadgeIcon[User_FansClub_FansClubData_BadgeIcon["UNKNOWN"] = 0] = "UNKNOWN";
    User_FansClub_FansClubData_BadgeIcon[User_FansClub_FansClubData_BadgeIcon["ICON"] = 1] = "ICON";
    User_FansClub_FansClubData_BadgeIcon[User_FansClub_FansClubData_BadgeIcon["SMALLICON"] = 2] = "SMALLICON";
    User_FansClub_FansClubData_BadgeIcon[User_FansClub_FansClubData_BadgeIcon["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(User_FansClub_FansClubData_BadgeIcon = exports.User_FansClub_FansClubData_BadgeIcon || (exports.User_FansClub_FansClubData_BadgeIcon = {}));
/**
 * @UserFansClubStatus
 * webcast.data.User.FansClub.FansClubData
 * C:\Users\ja\RiderProjects\TikTokProBufferGenerator\Application\output\sources\test.js
 */
var User_FansClub_FansClubData_UserFansClubStatus;
(function (User_FansClub_FansClubData_UserFansClubStatus) {
    User_FansClub_FansClubData_UserFansClubStatus[User_FansClub_FansClubData_UserFansClubStatus["NOTJOINED"] = 0] = "NOTJOINED";
    User_FansClub_FansClubData_UserFansClubStatus[User_FansClub_FansClubData_UserFansClubStatus["ACTIVE"] = 1] = "ACTIVE";
    User_FansClub_FansClubData_UserFansClubStatus[User_FansClub_FansClubData_UserFansClubStatus["INACTIVE"] = 2] = "INACTIVE";
    User_FansClub_FansClubData_UserFansClubStatus[User_FansClub_FansClubData_UserFansClubStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(User_FansClub_FansClubData_UserFansClubStatus = exports.User_FansClub_FansClubData_UserFansClubStatus || (exports.User_FansClub_FansClubData_UserFansClubStatus = {}));
var Emote_AuditInfo_AuditTaskType;
(function (Emote_AuditInfo_AuditTaskType) {
    Emote_AuditInfo_AuditTaskType[Emote_AuditInfo_AuditTaskType["AUDIT_TASK_TYPE_DEFAULT"] = 0] = "AUDIT_TASK_TYPE_DEFAULT";
    Emote_AuditInfo_AuditTaskType[Emote_AuditInfo_AuditTaskType["AUDIT_TASK_TYPE_APPEAL"] = 1] = "AUDIT_TASK_TYPE_APPEAL";
    Emote_AuditInfo_AuditTaskType[Emote_AuditInfo_AuditTaskType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Emote_AuditInfo_AuditTaskType = exports.Emote_AuditInfo_AuditTaskType || (exports.Emote_AuditInfo_AuditTaskType = {}));
var WebcastChatMessage_CommentTag;
(function (WebcastChatMessage_CommentTag) {
    WebcastChatMessage_CommentTag[WebcastChatMessage_CommentTag["COMMENT_TAG_NORMAL"] = 0] = "COMMENT_TAG_NORMAL";
    WebcastChatMessage_CommentTag[WebcastChatMessage_CommentTag["COMMENT_TAG_CANDIDATE"] = 1] = "COMMENT_TAG_CANDIDATE";
    WebcastChatMessage_CommentTag[WebcastChatMessage_CommentTag["COMMENT_TAG_OVERAGE"] = 2] = "COMMENT_TAG_OVERAGE";
    WebcastChatMessage_CommentTag[WebcastChatMessage_CommentTag["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(WebcastChatMessage_CommentTag = exports.WebcastChatMessage_CommentTag || (exports.WebcastChatMessage_CommentTag = {}));
var EmoteUploadInfo_UserEmoteUploadSource;
(function (EmoteUploadInfo_UserEmoteUploadSource) {
    EmoteUploadInfo_UserEmoteUploadSource[EmoteUploadInfo_UserEmoteUploadSource["USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR"] = 0] = "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_ANCHOR";
    EmoteUploadInfo_UserEmoteUploadSource[EmoteUploadInfo_UserEmoteUploadSource["USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER"] = 1] = "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_SUBSCRIBER";
    EmoteUploadInfo_UserEmoteUploadSource[EmoteUploadInfo_UserEmoteUploadSource["USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR"] = 2] = "USER_EMOTE_UPLOAD_SOURCE_EMOTE_UPLOAD_SOURCE_MODERATOR";
    EmoteUploadInfo_UserEmoteUploadSource[EmoteUploadInfo_UserEmoteUploadSource["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(EmoteUploadInfo_UserEmoteUploadSource = exports.EmoteUploadInfo_UserEmoteUploadSource || (exports.EmoteUploadInfo_UserEmoteUploadSource = {}));
var WebcastMemberMessage_DisplayStyle;
(function (WebcastMemberMessage_DisplayStyle) {
    WebcastMemberMessage_DisplayStyle[WebcastMemberMessage_DisplayStyle["DISPLAY_STYLE_NORMAL"] = 0] = "DISPLAY_STYLE_NORMAL";
    WebcastMemberMessage_DisplayStyle[WebcastMemberMessage_DisplayStyle["DISPLAY_STYLE_STAY"] = 1] = "DISPLAY_STYLE_STAY";
    WebcastMemberMessage_DisplayStyle[WebcastMemberMessage_DisplayStyle["DISPLAY_STYLE_CHAT"] = 2] = "DISPLAY_STYLE_CHAT";
    WebcastMemberMessage_DisplayStyle[WebcastMemberMessage_DisplayStyle["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(WebcastMemberMessage_DisplayStyle = exports.WebcastMemberMessage_DisplayStyle || (exports.WebcastMemberMessage_DisplayStyle = {}));
var WebcastMemberMessage_HitABStatus;
(function (WebcastMemberMessage_HitABStatus) {
    WebcastMemberMessage_HitABStatus[WebcastMemberMessage_HitABStatus["HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT"] = 0] = "HIT_A_B_STATUS_HIT_AB_STATUS_NO_HIT";
    WebcastMemberMessage_HitABStatus[WebcastMemberMessage_HitABStatus["HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT"] = 1] = "HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_EXTERNAL_LINK_NEW_TEXT";
    WebcastMemberMessage_HitABStatus[WebcastMemberMessage_HitABStatus["HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT"] = 2] = "HIT_A_B_STATUS_HIT_AB_STATUS_ENTER_FROM_RE_POST_NEW_TEXT";
    WebcastMemberMessage_HitABStatus[WebcastMemberMessage_HitABStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(WebcastMemberMessage_HitABStatus = exports.WebcastMemberMessage_HitABStatus || (exports.WebcastMemberMessage_HitABStatus = {}));
var WebcastBarrageMessage_BarrageType;
(function (WebcastBarrageMessage_BarrageType) {
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["BARRAGE_TYPE_UNKNOWN"] = 0] = "BARRAGE_TYPE_UNKNOWN";
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["BARRAGE_TYPE_E_COM_ORDERING"] = 1] = "BARRAGE_TYPE_E_COM_ORDERING";
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["BARRAGE_TYPE_E_COM_BUYING"] = 2] = "BARRAGE_TYPE_E_COM_BUYING";
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["BARRAGE_TYPE_NORMAL"] = 3] = "BARRAGE_TYPE_NORMAL";
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["BARRAGE_TYPE_SUBSCRIBE"] = 4] = "BARRAGE_TYPE_SUBSCRIBE";
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["BARRAGE_TYPE_EVENT_VIEW"] = 5] = "BARRAGE_TYPE_EVENT_VIEW";
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["BARRAGE_TYPE_EVENT_REGISTERED"] = 6] = "BARRAGE_TYPE_EVENT_REGISTERED";
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["BARRAGE_TYPE_SUBSCRIBE_GIFT"] = 7] = "BARRAGE_TYPE_SUBSCRIBE_GIFT";
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["BARRAGE_TYPE_USER_UPGRADE"] = 8] = "BARRAGE_TYPE_USER_UPGRADE";
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["BARRAGE_TYPE_GRADE_USER_ENTRANCE_NOTIFICATION"] = 9] = "BARRAGE_TYPE_GRADE_USER_ENTRANCE_NOTIFICATION";
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["BARRAGE_TYPE_FANS_LEVEL_UPGRADE"] = 10] = "BARRAGE_TYPE_FANS_LEVEL_UPGRADE";
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["BARRAGE_TYPE_FANS_LEVEL_ENTRANCE"] = 11] = "BARRAGE_TYPE_FANS_LEVEL_ENTRANCE";
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["BARRAGE_TYPE_GAME_PARTNERSHIP"] = 12] = "BARRAGE_TYPE_GAME_PARTNERSHIP";
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["BARRAGE_TYPE_GIFT_GALLERY"] = 13] = "BARRAGE_TYPE_GIFT_GALLERY";
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["BARRAGE_TYPE_E_COM_BOUGHT"] = 14] = "BARRAGE_TYPE_E_COM_BOUGHT";
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["BARRAGE_TYPE_COMMON_BARRAGE"] = 100] = "BARRAGE_TYPE_COMMON_BARRAGE";
    WebcastBarrageMessage_BarrageType[WebcastBarrageMessage_BarrageType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(WebcastBarrageMessage_BarrageType = exports.WebcastBarrageMessage_BarrageType || (exports.WebcastBarrageMessage_BarrageType = {}));
var WebcastBarrageMessage_ShowType;
(function (WebcastBarrageMessage_ShowType) {
    WebcastBarrageMessage_ShowType[WebcastBarrageMessage_ShowType["SHOW_TYPE_NORMAL"] = 0] = "SHOW_TYPE_NORMAL";
    WebcastBarrageMessage_ShowType[WebcastBarrageMessage_ShowType["SHOW_TYPE_FADE_IN_OUT"] = 1] = "SHOW_TYPE_FADE_IN_OUT";
    WebcastBarrageMessage_ShowType[WebcastBarrageMessage_ShowType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(WebcastBarrageMessage_ShowType = exports.WebcastBarrageMessage_ShowType || (exports.WebcastBarrageMessage_ShowType = {}));
var WebcastBarrageMessage_RenderType;
(function (WebcastBarrageMessage_RenderType) {
    WebcastBarrageMessage_RenderType[WebcastBarrageMessage_RenderType["RENDER_TYPE_NATIVE"] = 0] = "RENDER_TYPE_NATIVE";
    WebcastBarrageMessage_RenderType[WebcastBarrageMessage_RenderType["RENDER_TYPE_HYBRID"] = 1] = "RENDER_TYPE_HYBRID";
    WebcastBarrageMessage_RenderType[WebcastBarrageMessage_RenderType["RENDER_TYPE_ALPHA"] = 2] = "RENDER_TYPE_ALPHA";
    WebcastBarrageMessage_RenderType[WebcastBarrageMessage_RenderType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(WebcastBarrageMessage_RenderType = exports.WebcastBarrageMessage_RenderType || (exports.WebcastBarrageMessage_RenderType = {}));
var WebcastBarrageMessage_IconDisplayType;
(function (WebcastBarrageMessage_IconDisplayType) {
    WebcastBarrageMessage_IconDisplayType[WebcastBarrageMessage_IconDisplayType["ICON_DISPLAY_TYPE_IMAGE"] = 0] = "ICON_DISPLAY_TYPE_IMAGE";
    WebcastBarrageMessage_IconDisplayType[WebcastBarrageMessage_IconDisplayType["ICON_DISPLAY_TYPE_BADGE"] = 1] = "ICON_DISPLAY_TYPE_BADGE";
    WebcastBarrageMessage_IconDisplayType[WebcastBarrageMessage_IconDisplayType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(WebcastBarrageMessage_IconDisplayType = exports.WebcastBarrageMessage_IconDisplayType || (exports.WebcastBarrageMessage_IconDisplayType = {}));
var WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result;
(function (WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result) {
    WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result[WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result["RESULT_SUCCEED"] = 0] = "RESULT_SUCCEED";
    WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result[WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result["RESULT_FAILED"] = 1] = "RESULT_FAILED";
    WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result[WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result["RESULT_BOTH_SUCCEED"] = 2] = "RESULT_BOTH_SUCCEED";
    WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result[WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result = exports.WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result || (exports.WebcastLinkmicBattleTaskMessage_BattleTaskSettle_Result = {}));
function createBaseCommonMessageData() {
    return {
        method: "",
        msgId: "0",
        roomId: "0",
        createTime: "0",
        monitor: 0,
        isShowMsg: false,
        describe: "",
        displayText: undefined,
        foldType: "0",
        anchorFoldType: "0",
        priorityScore: "0",
        logId: "",
        msgProcessFilterK: "",
        msgProcessFilterV: "",
        fromIdc: "",
        toIdc: "",
        filterMsgTagsList: [],
        sei: undefined,
        dependRootId: undefined,
        dependId: undefined,
        anchorPriorityScore: "0",
        roomMessageHeatLevel: "0",
        foldTypeForWeb: "0",
        anchorFoldTypeForWeb: "0",
        clientSendTime: "0",
        dispatchStrategy: 0,
    };
}
exports.CommonMessageDataDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.method !== "") {
            writer.uint32(10).string(message.method);
        }
        if (message.msgId !== "0") {
            writer.uint32(16).int64(message.msgId);
        }
        if (message.roomId !== "0") {
            writer.uint32(24).int64(message.roomId);
        }
        if (message.createTime !== "0") {
            writer.uint32(32).int64(message.createTime);
        }
        if (message.monitor !== 0) {
            writer.uint32(40).int32(message.monitor);
        }
        if (message.isShowMsg !== false) {
            writer.uint32(48).bool(message.isShowMsg);
        }
        if (message.describe !== "") {
            writer.uint32(58).string(message.describe);
        }
        if (message.displayText !== undefined) {
            exports.TextDecoder.encode(message.displayText, writer.uint32(66).fork()).join();
        }
        if (message.foldType !== "0") {
            writer.uint32(72).int64(message.foldType);
        }
        if (message.anchorFoldType !== "0") {
            writer.uint32(80).int64(message.anchorFoldType);
        }
        if (message.priorityScore !== "0") {
            writer.uint32(88).int64(message.priorityScore);
        }
        if (message.logId !== "") {
            writer.uint32(98).string(message.logId);
        }
        if (message.msgProcessFilterK !== "") {
            writer.uint32(106).string(message.msgProcessFilterK);
        }
        if (message.msgProcessFilterV !== "") {
            writer.uint32(114).string(message.msgProcessFilterV);
        }
        if (message.fromIdc !== "") {
            writer.uint32(122).string(message.fromIdc);
        }
        if (message.toIdc !== "") {
            writer.uint32(130).string(message.toIdc);
        }
        for (const v of message.filterMsgTagsList) {
            writer.uint32(138).string(v);
        }
        if (message.sei !== undefined) {
            exports.CommonMessageData_LiveMessageSEIDecoder.encode(message.sei, writer.uint32(146).fork()).join();
        }
        if (message.dependRootId !== undefined) {
            exports.CommonMessageData_LiveMessageIDDecoder.encode(message.dependRootId, writer.uint32(154).fork()).join();
        }
        if (message.dependId !== undefined) {
            exports.CommonMessageData_LiveMessageIDDecoder.encode(message.dependId, writer.uint32(162).fork()).join();
        }
        if (message.anchorPriorityScore !== "0") {
            writer.uint32(168).int64(message.anchorPriorityScore);
        }
        if (message.roomMessageHeatLevel !== "0") {
            writer.uint32(176).int64(message.roomMessageHeatLevel);
        }
        if (message.foldTypeForWeb !== "0") {
            writer.uint32(184).int64(message.foldTypeForWeb);
        }
        if (message.anchorFoldTypeForWeb !== "0") {
            writer.uint32(192).int64(message.anchorFoldTypeForWeb);
        }
        if (message.clientSendTime !== "0") {
            writer.uint32(200).int64(message.clientSendTime);
        }
        if (message.dispatchStrategy !== 0) {
            writer.uint32(208).int32(message.dispatchStrategy);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommonMessageData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.method = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.msgId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.roomId = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.createTime = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.monitor = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.isShowMsg = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.describe = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.displayText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.foldType = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.anchorFoldType = reader.int64().toString();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.priorityScore = reader.int64().toString();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.logId = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.msgProcessFilterK = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.msgProcessFilterV = reader.string();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.fromIdc = reader.string();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.toIdc = reader.string();
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.filterMsgTagsList.push(reader.string());
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.sei = exports.CommonMessageData_LiveMessageSEIDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.dependRootId = exports.CommonMessageData_LiveMessageIDDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.dependId = exports.CommonMessageData_LiveMessageIDDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.anchorPriorityScore = reader.int64().toString();
                    continue;
                }
                case 22: {
                    if (tag !== 176) {
                        break;
                    }
                    message.roomMessageHeatLevel = reader.int64().toString();
                    continue;
                }
                case 23: {
                    if (tag !== 184) {
                        break;
                    }
                    message.foldTypeForWeb = reader.int64().toString();
                    continue;
                }
                case 24: {
                    if (tag !== 192) {
                        break;
                    }
                    message.anchorFoldTypeForWeb = reader.int64().toString();
                    continue;
                }
                case 25: {
                    if (tag !== 200) {
                        break;
                    }
                    message.clientSendTime = reader.int64().toString();
                    continue;
                }
                case 26: {
                    if (tag !== 208) {
                        break;
                    }
                    message.dispatchStrategy = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCommonMessageData_LiveMessageSEI() {
    return { uniqueId: undefined, timestamp: "0" };
}
exports.CommonMessageData_LiveMessageSEIDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.uniqueId !== undefined) {
            exports.CommonMessageData_LiveMessageIDDecoder.encode(message.uniqueId, writer.uint32(10).fork()).join();
        }
        if (message.timestamp !== "0") {
            writer.uint32(16).int64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommonMessageData_LiveMessageSEI();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.uniqueId = exports.CommonMessageData_LiveMessageIDDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.timestamp = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCommonMessageData_LiveMessageID() {
    return { primaryId: "", messageScene: "" };
}
exports.CommonMessageData_LiveMessageIDDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.primaryId !== "") {
            writer.uint32(10).string(message.primaryId);
        }
        if (message.messageScene !== "") {
            writer.uint32(18).string(message.messageScene);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCommonMessageData_LiveMessageID();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.primaryId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.messageScene = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseText() {
    return { displayType: "", defaultPattern: "", defaultFormat: undefined, piecesList: [] };
}
exports.TextDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.displayType !== "") {
            writer.uint32(10).string(message.displayType);
        }
        if (message.defaultPattern !== "") {
            writer.uint32(18).string(message.defaultPattern);
        }
        if (message.defaultFormat !== undefined) {
            exports.Text_TextFormatDecoder.encode(message.defaultFormat, writer.uint32(26).fork()).join();
        }
        for (const v of message.piecesList) {
            exports.Text_TextPieceDecoder.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseText();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.displayType = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.defaultPattern = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.defaultFormat = exports.Text_TextFormatDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.piecesList.push(exports.Text_TextPieceDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseText_TextPiece() {
    return {
        type: 0,
        format: undefined,
        stringValue: "",
        userValue: undefined,
        giftValue: undefined,
        patternRefValue: undefined,
    };
}
exports.Text_TextPieceDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.format !== undefined) {
            exports.Text_TextFormatDecoder.encode(message.format, writer.uint32(18).fork()).join();
        }
        if (message.stringValue !== "") {
            writer.uint32(90).string(message.stringValue);
        }
        if (message.userValue !== undefined) {
            exports.Text_TextPieceUserDecoder.encode(message.userValue, writer.uint32(170).fork()).join();
        }
        if (message.giftValue !== undefined) {
            exports.Text_TextPieceGiftDecoder.encode(message.giftValue, writer.uint32(178).fork()).join();
        }
        if (message.patternRefValue !== undefined) {
            exports.Text_TextPiecePatternRefDecoder.encode(message.patternRefValue, writer.uint32(194).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseText_TextPiece();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.format = exports.Text_TextFormatDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.stringValue = reader.string();
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.userValue = exports.Text_TextPieceUserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.giftValue = exports.Text_TextPieceGiftDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.patternRefValue = exports.Text_TextPiecePatternRefDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseText_TextFormat() {
    return {
        color: "",
        bold: false,
        italic: false,
        weight: 0,
        italicAngle: 0,
        fontSize: 0,
        useHeighLightColor: false,
        useRemoteClor: false,
    };
}
exports.Text_TextFormatDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.color !== "") {
            writer.uint32(10).string(message.color);
        }
        if (message.bold !== false) {
            writer.uint32(16).bool(message.bold);
        }
        if (message.italic !== false) {
            writer.uint32(24).bool(message.italic);
        }
        if (message.weight !== 0) {
            writer.uint32(32).int32(message.weight);
        }
        if (message.italicAngle !== 0) {
            writer.uint32(40).int32(message.italicAngle);
        }
        if (message.fontSize !== 0) {
            writer.uint32(48).int32(message.fontSize);
        }
        if (message.useHeighLightColor !== false) {
            writer.uint32(56).bool(message.useHeighLightColor);
        }
        if (message.useRemoteClor !== false) {
            writer.uint32(64).bool(message.useRemoteClor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseText_TextFormat();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.color = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.bold = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.italic = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.weight = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.italicAngle = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.fontSize = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.useHeighLightColor = reader.bool();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.useRemoteClor = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseText_TextPieceGift() {
    return { giftId: 0, nameRef: undefined, showType: 0, colorId: "0" };
}
exports.Text_TextPieceGiftDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftId !== 0) {
            writer.uint32(8).int32(message.giftId);
        }
        if (message.nameRef !== undefined) {
            exports.Text_PatternRefDecoder.encode(message.nameRef, writer.uint32(18).fork()).join();
        }
        if (message.showType !== 0) {
            writer.uint32(24).int32(message.showType);
        }
        if (message.colorId !== "0") {
            writer.uint32(32).int64(message.colorId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseText_TextPieceGift();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.giftId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.nameRef = exports.Text_PatternRefDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.showType = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.colorId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseText_TextPiecePatternRef() {
    return { key: "", defaultPattern: "" };
}
exports.Text_TextPiecePatternRefDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.defaultPattern !== "") {
            writer.uint32(18).string(message.defaultPattern);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseText_TextPiecePatternRef();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.defaultPattern = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseText_TextPieceUser() {
    return { user: undefined, withColon: false };
}
exports.Text_TextPieceUserDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(10).fork()).join();
        }
        if (message.withColon !== false) {
            writer.uint32(16).bool(message.withColon);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseText_TextPieceUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.withColon = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseText_PatternRef() {
    return { key: "", defaultPattern: "" };
}
exports.Text_PatternRefDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.defaultPattern !== "") {
            writer.uint32(18).string(message.defaultPattern);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseText_PatternRef();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.defaultPattern = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseImage() {
    return {
        url: [],
        mUri: "",
        height: 0,
        width: 0,
        avgColor: "",
        imageType: 0,
        schema: "",
        content: undefined,
        isAnimated: false,
    };
}
exports.ImageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.url) {
            writer.uint32(10).string(v);
        }
        if (message.mUri !== "") {
            writer.uint32(18).string(message.mUri);
        }
        if (message.height !== 0) {
            writer.uint32(24).int32(message.height);
        }
        if (message.width !== 0) {
            writer.uint32(32).int32(message.width);
        }
        if (message.avgColor !== "") {
            writer.uint32(42).string(message.avgColor);
        }
        if (message.imageType !== 0) {
            writer.uint32(48).int32(message.imageType);
        }
        if (message.schema !== "") {
            writer.uint32(58).string(message.schema);
        }
        if (message.content !== undefined) {
            exports.Image_ContentDecoder.encode(message.content, writer.uint32(66).fork()).join();
        }
        if (message.isAnimated !== false) {
            writer.uint32(72).bool(message.isAnimated);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.url.push(reader.string());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.mUri = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.width = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.avgColor = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.imageType = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.schema = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.content = exports.Image_ContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.isAnimated = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseImage_Content() {
    return { name: "", fontColor: "", level: "0" };
}
exports.Image_ContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.fontColor !== "") {
            writer.uint32(18).string(message.fontColor);
        }
        if (message.level !== "0") {
            writer.uint32(24).int64(message.level);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImage_Content();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.fontColor = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.level = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBadgeStruct() {
    return {
        badgeDisplayType: 0,
        badgePriorityType: 0,
        badgeScene: 0,
        position: 0,
        displayStatus: 0,
        greyedByClient: "0",
        exhibitionType: 0,
        schemaUrl: "",
        display: false,
        logExtra: undefined,
        image: undefined,
        text: undefined,
        str: undefined,
        combine: undefined,
        isCustomized: false,
    };
}
exports.BadgeStructDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.badgeDisplayType !== 0) {
            writer.uint32(8).int32(message.badgeDisplayType);
        }
        if (message.badgePriorityType !== 0) {
            writer.uint32(16).int32(message.badgePriorityType);
        }
        if (message.badgeScene !== 0) {
            writer.uint32(24).int32(message.badgeScene);
        }
        if (message.position !== 0) {
            writer.uint32(32).int32(message.position);
        }
        if (message.displayStatus !== 0) {
            writer.uint32(40).int32(message.displayStatus);
        }
        if (message.greyedByClient !== "0") {
            writer.uint32(48).int64(message.greyedByClient);
        }
        if (message.exhibitionType !== 0) {
            writer.uint32(56).int32(message.exhibitionType);
        }
        if (message.schemaUrl !== "") {
            writer.uint32(82).string(message.schemaUrl);
        }
        if (message.display !== false) {
            writer.uint32(88).bool(message.display);
        }
        if (message.logExtra !== undefined) {
            exports.PrivilegeLogExtraDecoder.encode(message.logExtra, writer.uint32(98).fork()).join();
        }
        if (message.image !== undefined) {
            exports.BadgeStruct_ImageBadgeDecoder.encode(message.image, writer.uint32(162).fork()).join();
        }
        if (message.text !== undefined) {
            exports.BadgeStruct_TextBadgeDecoder.encode(message.text, writer.uint32(170).fork()).join();
        }
        if (message.str !== undefined) {
            exports.BadgeStruct_StringBadgeDecoder.encode(message.str, writer.uint32(178).fork()).join();
        }
        if (message.combine !== undefined) {
            exports.BadgeStruct_CombineBadgeDecoder.encode(message.combine, writer.uint32(186).fork()).join();
        }
        if (message.isCustomized !== false) {
            writer.uint32(192).bool(message.isCustomized);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.badgeDisplayType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.badgePriorityType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.badgeScene = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.position = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.displayStatus = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.greyedByClient = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.exhibitionType = reader.int32();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.schemaUrl = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.display = reader.bool();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.logExtra = exports.PrivilegeLogExtraDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.image = exports.BadgeStruct_ImageBadgeDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.text = exports.BadgeStruct_TextBadgeDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.str = exports.BadgeStruct_StringBadgeDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.combine = exports.BadgeStruct_CombineBadgeDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 24: {
                    if (tag !== 192) {
                        break;
                    }
                    message.isCustomized = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBadgeStruct_CombineBadge() {
    return {
        badgeDisplayType: 0,
        icon: undefined,
        text: undefined,
        str: "",
        padding: undefined,
        fontStyle: undefined,
        profileCardPanel: undefined,
        background: undefined,
        backgroundDarkMode: undefined,
        iconAutoMirrored: false,
        bgAutoMirrored: false,
        publicScreenShowStyle: 0,
        personalCardShowStyle: 0,
        rankListOnlineAudienceShowStyle: 0,
        multiGuestShowStyle: 0,
        arrowConfig: undefined,
        paddingNewFont: undefined,
    };
}
exports.BadgeStruct_CombineBadgeDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.badgeDisplayType !== 0) {
            writer.uint32(8).int32(message.badgeDisplayType);
        }
        if (message.icon !== undefined) {
            exports.ImageDecoder.encode(message.icon, writer.uint32(18).fork()).join();
        }
        if (message.text !== undefined) {
            exports.BadgeStruct_TextBadgeDecoder.encode(message.text, writer.uint32(26).fork()).join();
        }
        if (message.str !== "") {
            writer.uint32(34).string(message.str);
        }
        if (message.padding !== undefined) {
            exports.BadgeStruct_PaddingInfoDecoder.encode(message.padding, writer.uint32(42).fork()).join();
        }
        if (message.fontStyle !== undefined) {
            exports.FontStyleDecoder.encode(message.fontStyle, writer.uint32(50).fork()).join();
        }
        if (message.profileCardPanel !== undefined) {
            exports.BadgeStruct_ProfileCardPanelDecoder.encode(message.profileCardPanel, writer.uint32(58).fork()).join();
        }
        if (message.background !== undefined) {
            exports.BadgeStruct_CombineBadgeBackgroundDecoder.encode(message.background, writer.uint32(90).fork()).join();
        }
        if (message.backgroundDarkMode !== undefined) {
            exports.BadgeStruct_CombineBadgeBackgroundDecoder.encode(message.backgroundDarkMode, writer.uint32(98).fork()).join();
        }
        if (message.iconAutoMirrored !== false) {
            writer.uint32(104).bool(message.iconAutoMirrored);
        }
        if (message.bgAutoMirrored !== false) {
            writer.uint32(112).bool(message.bgAutoMirrored);
        }
        if (message.publicScreenShowStyle !== 0) {
            writer.uint32(120).int32(message.publicScreenShowStyle);
        }
        if (message.personalCardShowStyle !== 0) {
            writer.uint32(128).int32(message.personalCardShowStyle);
        }
        if (message.rankListOnlineAudienceShowStyle !== 0) {
            writer.uint32(136).int32(message.rankListOnlineAudienceShowStyle);
        }
        if (message.multiGuestShowStyle !== 0) {
            writer.uint32(144).int32(message.multiGuestShowStyle);
        }
        if (message.arrowConfig !== undefined) {
            exports.BadgeStruct_ArrowConfigDecoder.encode(message.arrowConfig, writer.uint32(154).fork()).join();
        }
        if (message.paddingNewFont !== undefined) {
            exports.BadgeStruct_PaddingInfoDecoder.encode(message.paddingNewFont, writer.uint32(162).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_CombineBadge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.badgeDisplayType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.icon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.text = exports.BadgeStruct_TextBadgeDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.str = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.padding = exports.BadgeStruct_PaddingInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.fontStyle = exports.FontStyleDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.profileCardPanel = exports.BadgeStruct_ProfileCardPanelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.background = exports.BadgeStruct_CombineBadgeBackgroundDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.backgroundDarkMode = exports.BadgeStruct_CombineBadgeBackgroundDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.iconAutoMirrored = reader.bool();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.bgAutoMirrored = reader.bool();
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.publicScreenShowStyle = reader.int32();
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.personalCardShowStyle = reader.int32();
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.rankListOnlineAudienceShowStyle = reader.int32();
                    continue;
                }
                case 18: {
                    if (tag !== 144) {
                        break;
                    }
                    message.multiGuestShowStyle = reader.int32();
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.arrowConfig = exports.BadgeStruct_ArrowConfigDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.paddingNewFont = exports.BadgeStruct_PaddingInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBadgeStruct_ArrowConfig() {
    return { icon: undefined };
}
exports.BadgeStruct_ArrowConfigDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.icon !== undefined) {
            exports.ImageDecoder.encode(message.icon, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_ArrowConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.icon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBadgeStruct_ProfileContent() {
    return { useContent: false, iconList: [], numberConfig: undefined };
}
exports.BadgeStruct_ProfileContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.useContent !== false) {
            writer.uint32(8).bool(message.useContent);
        }
        for (const v of message.iconList) {
            exports.BadgeStruct_IconConfigDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.numberConfig !== undefined) {
            exports.BadgeStruct_NumberConfigDecoder.encode(message.numberConfig, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_ProfileContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.useContent = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.iconList.push(exports.BadgeStruct_IconConfigDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.numberConfig = exports.BadgeStruct_NumberConfigDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBadgeStruct_ProjectionConfig() {
    return { useProjection: false, icon: undefined };
}
exports.BadgeStruct_ProjectionConfigDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.useProjection !== false) {
            writer.uint32(8).bool(message.useProjection);
        }
        if (message.icon !== undefined) {
            exports.ImageDecoder.encode(message.icon, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_ProjectionConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.useProjection = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.icon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBadgeStruct_NumberConfig() {
    return { number: "0", fontStyle: undefined, background: undefined };
}
exports.BadgeStruct_NumberConfigDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.number !== "0") {
            writer.uint32(8).int64(message.number);
        }
        if (message.fontStyle !== undefined) {
            exports.FontStyleDecoder.encode(message.fontStyle, writer.uint32(18).fork()).join();
        }
        if (message.background !== undefined) {
            exports.BadgeStruct_CombineBadgeBackgroundDecoder.encode(message.background, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_NumberConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.number = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.fontStyle = exports.FontStyleDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.background = exports.BadgeStruct_CombineBadgeBackgroundDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBadgeStruct_ProfileCardPanel() {
    return { useNewProfileCardStyle: false, projectionConfig: undefined, profileContent: undefined };
}
exports.BadgeStruct_ProfileCardPanelDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.useNewProfileCardStyle !== false) {
            writer.uint32(8).bool(message.useNewProfileCardStyle);
        }
        if (message.projectionConfig !== undefined) {
            exports.BadgeStruct_ProjectionConfigDecoder.encode(message.projectionConfig, writer.uint32(26).fork()).join();
        }
        if (message.profileContent !== undefined) {
            exports.BadgeStruct_ProfileContentDecoder.encode(message.profileContent, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_ProfileCardPanel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.useNewProfileCardStyle = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.projectionConfig = exports.BadgeStruct_ProjectionConfigDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.profileContent = exports.BadgeStruct_ProfileContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBadgeStruct_CombineBadgeBackground() {
    return { image: undefined, backgroundColorCode: "", borderColorCode: "" };
}
exports.BadgeStruct_CombineBadgeBackgroundDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.image !== undefined) {
            exports.ImageDecoder.encode(message.image, writer.uint32(10).fork()).join();
        }
        if (message.backgroundColorCode !== "") {
            writer.uint32(18).string(message.backgroundColorCode);
        }
        if (message.borderColorCode !== "") {
            writer.uint32(26).string(message.borderColorCode);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_CombineBadgeBackground();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.image = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.backgroundColorCode = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.borderColorCode = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBadgeStruct_ImageBadge() {
    return { badgeDisplayType: 0, image: undefined };
}
exports.BadgeStruct_ImageBadgeDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.badgeDisplayType !== 0) {
            writer.uint32(8).int32(message.badgeDisplayType);
        }
        if (message.image !== undefined) {
            exports.ImageDecoder.encode(message.image, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_ImageBadge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.badgeDisplayType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.image = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBadgeStruct_TextBadge() {
    return { badgeDisplayType: 0, key: "", defaultPattern: "", pieces: [] };
}
exports.BadgeStruct_TextBadgeDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.badgeDisplayType !== 0) {
            writer.uint32(8).int32(message.badgeDisplayType);
        }
        if (message.key !== "") {
            writer.uint32(18).string(message.key);
        }
        if (message.defaultPattern !== "") {
            writer.uint32(26).string(message.defaultPattern);
        }
        for (const v of message.pieces) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_TextBadge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.badgeDisplayType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.defaultPattern = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.pieces.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBadgeStruct_IconConfig() {
    return { icon: undefined, background: undefined };
}
exports.BadgeStruct_IconConfigDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.icon !== undefined) {
            exports.ImageDecoder.encode(message.icon, writer.uint32(10).fork()).join();
        }
        if (message.background !== undefined) {
            exports.BadgeStruct_CombineBadgeBackgroundDecoder.encode(message.background, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_IconConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.icon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.background = exports.BadgeStruct_CombineBadgeBackgroundDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBadgeStruct_StringBadge() {
    return { badgeDisplayType: 0, str: "" };
}
exports.BadgeStruct_StringBadgeDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.badgeDisplayType !== 0) {
            writer.uint32(8).int32(message.badgeDisplayType);
        }
        if (message.str !== "") {
            writer.uint32(18).string(message.str);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_StringBadge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.badgeDisplayType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.str = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBadgeStruct_PaddingInfo() {
    return {
        useSpecific: false,
        middlePadding: 0,
        badgeWidth: 0,
        leftPadding: 0,
        rightPadding: 0,
        iconTopPadding: 0,
        iconBottomPadding: 0,
        horizontalPaddingRule: 0,
        verticalPaddingRule: 0,
    };
}
exports.BadgeStruct_PaddingInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.useSpecific !== false) {
            writer.uint32(8).bool(message.useSpecific);
        }
        if (message.middlePadding !== 0) {
            writer.uint32(16).int32(message.middlePadding);
        }
        if (message.badgeWidth !== 0) {
            writer.uint32(24).int32(message.badgeWidth);
        }
        if (message.leftPadding !== 0) {
            writer.uint32(32).int32(message.leftPadding);
        }
        if (message.rightPadding !== 0) {
            writer.uint32(40).int32(message.rightPadding);
        }
        if (message.iconTopPadding !== 0) {
            writer.uint32(48).int32(message.iconTopPadding);
        }
        if (message.iconBottomPadding !== 0) {
            writer.uint32(56).int32(message.iconBottomPadding);
        }
        if (message.horizontalPaddingRule !== 0) {
            writer.uint32(64).int32(message.horizontalPaddingRule);
        }
        if (message.verticalPaddingRule !== 0) {
            writer.uint32(72).int32(message.verticalPaddingRule);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBadgeStruct_PaddingInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.useSpecific = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.middlePadding = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.badgeWidth = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.leftPadding = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.rightPadding = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.iconTopPadding = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.iconBottomPadding = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.horizontalPaddingRule = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.verticalPaddingRule = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGift() {
    return {
        giftImage: undefined,
        describe: "",
        duration: 0,
        id: "0",
        forLinkMic: false,
        combo: false,
        giftType: 0,
        diamondCount: 0,
        isDisplayedOnPanel: false,
        primaryEffectId: "0",
        giftLabelIcon: undefined,
        giftName: "",
        icon: undefined,
        goldEffect: "",
        previewImage: undefined,
        giftPanelBanner: undefined,
        isBroadcastGift: false,
        isEffectBefview: false,
        isRandomGift: false,
        isBoxGift: false,
        canPutInGiftBox: false,
        giftBoxInfo: undefined,
    };
}
exports.GiftDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftImage !== undefined) {
            exports.ImageDecoder.encode(message.giftImage, writer.uint32(10).fork()).join();
        }
        if (message.describe !== "") {
            writer.uint32(18).string(message.describe);
        }
        if (message.duration !== 0) {
            writer.uint32(32).int32(message.duration);
        }
        if (message.id !== "0") {
            writer.uint32(40).int64(message.id);
        }
        if (message.forLinkMic !== false) {
            writer.uint32(56).bool(message.forLinkMic);
        }
        if (message.combo !== false) {
            writer.uint32(80).bool(message.combo);
        }
        if (message.giftType !== 0) {
            writer.uint32(88).int32(message.giftType);
        }
        if (message.diamondCount !== 0) {
            writer.uint32(96).int32(message.diamondCount);
        }
        if (message.isDisplayedOnPanel !== false) {
            writer.uint32(104).bool(message.isDisplayedOnPanel);
        }
        if (message.primaryEffectId !== "0") {
            writer.uint32(112).int64(message.primaryEffectId);
        }
        if (message.giftLabelIcon !== undefined) {
            exports.ImageDecoder.encode(message.giftLabelIcon, writer.uint32(122).fork()).join();
        }
        if (message.giftName !== "") {
            writer.uint32(130).string(message.giftName);
        }
        if (message.icon !== undefined) {
            exports.ImageDecoder.encode(message.icon, writer.uint32(170).fork()).join();
        }
        if (message.goldEffect !== "") {
            writer.uint32(194).string(message.goldEffect);
        }
        if (message.previewImage !== undefined) {
            exports.ImageDecoder.encode(message.previewImage, writer.uint32(378).fork()).join();
        }
        if (message.giftPanelBanner !== undefined) {
            exports.Gift_GiftPanelBannerDecoder.encode(message.giftPanelBanner, writer.uint32(386).fork()).join();
        }
        if (message.isBroadcastGift !== false) {
            writer.uint32(392).bool(message.isBroadcastGift);
        }
        if (message.isEffectBefview !== false) {
            writer.uint32(400).bool(message.isEffectBefview);
        }
        if (message.isRandomGift !== false) {
            writer.uint32(408).bool(message.isRandomGift);
        }
        if (message.isBoxGift !== false) {
            writer.uint32(416).bool(message.isBoxGift);
        }
        if (message.canPutInGiftBox !== false) {
            writer.uint32(424).bool(message.canPutInGiftBox);
        }
        if (message.giftBoxInfo !== undefined) {
            exports.Gift_GiftBoxInfoDecoder.encode(message.giftBoxInfo, writer.uint32(434).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGift();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.giftImage = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.describe = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.duration = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.id = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.forLinkMic = reader.bool();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.combo = reader.bool();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.giftType = reader.int32();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.diamondCount = reader.int32();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.isDisplayedOnPanel = reader.bool();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.primaryEffectId = reader.int64().toString();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.giftLabelIcon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.giftName = reader.string();
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.icon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.goldEffect = reader.string();
                    continue;
                }
                case 47: {
                    if (tag !== 378) {
                        break;
                    }
                    message.previewImage = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 48: {
                    if (tag !== 386) {
                        break;
                    }
                    message.giftPanelBanner = exports.Gift_GiftPanelBannerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 49: {
                    if (tag !== 392) {
                        break;
                    }
                    message.isBroadcastGift = reader.bool();
                    continue;
                }
                case 50: {
                    if (tag !== 400) {
                        break;
                    }
                    message.isEffectBefview = reader.bool();
                    continue;
                }
                case 51: {
                    if (tag !== 408) {
                        break;
                    }
                    message.isRandomGift = reader.bool();
                    continue;
                }
                case 52: {
                    if (tag !== 416) {
                        break;
                    }
                    message.isBoxGift = reader.bool();
                    continue;
                }
                case 53: {
                    if (tag !== 424) {
                        break;
                    }
                    message.canPutInGiftBox = reader.bool();
                    continue;
                }
                case 54: {
                    if (tag !== 434) {
                        break;
                    }
                    message.giftBoxInfo = exports.Gift_GiftBoxInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGift_GiftPanelBanner() {
    return {
        displayText: undefined,
        leftIcon: undefined,
        schemaUrl: "",
        bgColors: [],
        bannerLynxUrl: "",
        bannerPriority: 0,
        bannerLynxExtra: "",
        bgImage: undefined,
    };
}
exports.Gift_GiftPanelBannerDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.displayText !== undefined) {
            exports.TextDecoder.encode(message.displayText, writer.uint32(10).fork()).join();
        }
        if (message.leftIcon !== undefined) {
            exports.ImageDecoder.encode(message.leftIcon, writer.uint32(18).fork()).join();
        }
        if (message.schemaUrl !== "") {
            writer.uint32(26).string(message.schemaUrl);
        }
        for (const v of message.bgColors) {
            writer.uint32(42).string(v);
        }
        if (message.bannerLynxUrl !== "") {
            writer.uint32(50).string(message.bannerLynxUrl);
        }
        if (message.bannerPriority !== 0) {
            writer.uint32(56).int32(message.bannerPriority);
        }
        if (message.bannerLynxExtra !== "") {
            writer.uint32(66).string(message.bannerLynxExtra);
        }
        if (message.bgImage !== undefined) {
            exports.ImageDecoder.encode(message.bgImage, writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGift_GiftPanelBanner();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.displayText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.leftIcon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.schemaUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.bgColors.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.bannerLynxUrl = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.bannerPriority = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.bannerLynxExtra = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.bgImage = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGift_BatchGiftInfo() {
    return { canBatchSend: false, availableCounts: [] };
}
exports.Gift_BatchGiftInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.canBatchSend !== false) {
            writer.uint32(8).bool(message.canBatchSend);
        }
        writer.uint32(18).fork();
        for (const v of message.availableCounts) {
            writer.int64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGift_BatchGiftInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.canBatchSend = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.availableCounts.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.availableCounts.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGift_CrossScreenEffectInfo() {
    return { singleActionEffectIds: {}, actionEffectIds: {}, reactionEffectIds: {} };
}
exports.Gift_CrossScreenEffectInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        Object.entries(message.singleActionEffectIds).forEach(([key, value]) => {
            exports.Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntryDecoder.encode({ key: key, value }, writer.uint32(10).fork())
                .join();
        });
        Object.entries(message.actionEffectIds).forEach(([key, value]) => {
            exports.Gift_CrossScreenEffectInfo_ActionEffectIdsEntryDecoder.encode({ key: key, value }, writer.uint32(18).fork())
                .join();
        });
        Object.entries(message.reactionEffectIds).forEach(([key, value]) => {
            exports.Gift_CrossScreenEffectInfo_ReactionEffectIdsEntryDecoder.encode({ key: key, value }, writer.uint32(26).fork())
                .join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGift_CrossScreenEffectInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntryDecoder.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.singleActionEffectIds[entry1.key] = entry1.value;
                    }
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.Gift_CrossScreenEffectInfo_ActionEffectIdsEntryDecoder.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.actionEffectIds[entry2.key] = entry2.value;
                    }
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.Gift_CrossScreenEffectInfo_ReactionEffectIdsEntryDecoder.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.reactionEffectIds[entry3.key] = entry3.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGift_CrossScreenEffectInfo_SingleActionEffectIdsEntry() {
    return { key: "0", value: 0 };
}
exports.Gift_CrossScreenEffectInfo_SingleActionEffectIdsEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
            writer.uint32(8).int64(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGift_CrossScreenEffectInfo_SingleActionEffectIdsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGift_CrossScreenEffectInfo_ActionEffectIdsEntry() {
    return { key: "0", value: 0 };
}
exports.Gift_CrossScreenEffectInfo_ActionEffectIdsEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
            writer.uint32(8).int64(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGift_CrossScreenEffectInfo_ActionEffectIdsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGift_CrossScreenEffectInfo_ReactionEffectIdsEntry() {
    return { key: "0", value: 0 };
}
exports.Gift_CrossScreenEffectInfo_ReactionEffectIdsEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
            writer.uint32(8).int64(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGift_CrossScreenEffectInfo_ReactionEffectIdsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGift_GiftSponsorInfo() {
    return { sponsorId: "0", sponsorCount: "0", currentCount: "0", leftCountToSponsor: "0", canSponsor: false };
}
exports.Gift_GiftSponsorInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sponsorId !== "0") {
            writer.uint32(8).int64(message.sponsorId);
        }
        if (message.sponsorCount !== "0") {
            writer.uint32(16).int64(message.sponsorCount);
        }
        if (message.currentCount !== "0") {
            writer.uint32(24).int64(message.currentCount);
        }
        if (message.leftCountToSponsor !== "0") {
            writer.uint32(32).int64(message.leftCountToSponsor);
        }
        if (message.canSponsor !== false) {
            writer.uint32(40).bool(message.canSponsor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGift_GiftSponsorInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.sponsorId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sponsorCount = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.currentCount = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.leftCountToSponsor = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.canSponsor = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGift_UGGiftStructInfo() {
    return { isUgGift: false, ugPointsCost: "0" };
}
exports.Gift_UGGiftStructInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isUgGift !== false) {
            writer.uint32(8).bool(message.isUgGift);
        }
        if (message.ugPointsCost !== "0") {
            writer.uint32(16).int64(message.ugPointsCost);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGift_UGGiftStructInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isUgGift = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.ugPointsCost = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGift_GiftSkin() {
    return { giftSkinId: "0", giftSkinName: "", staticImage: undefined, animatedImage: undefined };
}
exports.Gift_GiftSkinDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftSkinId !== "0") {
            writer.uint32(8).int64(message.giftSkinId);
        }
        if (message.giftSkinName !== "") {
            writer.uint32(18).string(message.giftSkinName);
        }
        if (message.staticImage !== undefined) {
            exports.ImageDecoder.encode(message.staticImage, writer.uint32(26).fork()).join();
        }
        if (message.animatedImage !== undefined) {
            exports.ImageDecoder.encode(message.animatedImage, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGift_GiftSkin();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.giftSkinId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.giftSkinName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.staticImage = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.animatedImage = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGift_GiftText() {
    return { giftTextId: "0", giftTextName: "" };
}
exports.Gift_GiftTextDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftTextId !== "0") {
            writer.uint32(8).int64(message.giftTextId);
        }
        if (message.giftTextName !== "") {
            writer.uint32(18).string(message.giftTextName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGift_GiftText();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.giftTextId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.giftTextName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGift_GiftSkinToGiftTextsInfo() {
    return { giftSkinId: "0", giftTextIds: [] };
}
exports.Gift_GiftSkinToGiftTextsInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftSkinId !== "0") {
            writer.uint32(8).int64(message.giftSkinId);
        }
        writer.uint32(18).fork();
        for (const v of message.giftTextIds) {
            writer.int64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGift_GiftSkinToGiftTextsInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.giftSkinId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.giftTextIds.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.giftTextIds.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGift_GiftBoxInfo() {
    return { capacity: "0", isPrimaryBox: false, schemeUrl: "" };
}
exports.Gift_GiftBoxInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.capacity !== "0") {
            writer.uint32(8).int64(message.capacity);
        }
        if (message.isPrimaryBox !== false) {
            writer.uint32(16).bool(message.isPrimaryBox);
        }
        if (message.schemeUrl !== "") {
            writer.uint32(26).string(message.schemeUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGift_GiftBoxInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.capacity = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isPrimaryBox = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.schemeUrl = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser() {
    return {
        userId: "0",
        nickname: "",
        bioDescription: "",
        profilePicture: undefined,
        profilePictureMedium: undefined,
        profilePictureLarge: undefined,
        verified: false,
        status: 0,
        createTime: "0",
        modifyTime: "0",
        secret: 0,
        shareQrcodeUri: "",
        badgeImageList: [],
        followInfo: undefined,
        userHonor: undefined,
        fansClub: undefined,
        border: undefined,
        specialId: "",
        avatarBorder: undefined,
        medal: undefined,
        userBadges: [],
        newUserBadges: [],
        topVipNo: 0,
        userAttr: undefined,
        ownRoom: undefined,
        payScore: "0",
        fanTicketCount: "0",
        anchorInfo: undefined,
        linkMicStats: 0,
        uniqueId: "",
        enableShowCommerceSale: false,
        withFusionShopEntry: false,
        payScores: "0",
        anchorLevel: undefined,
        verifiedContent: "",
        authorInfo: undefined,
        topFans: [],
        secUid: "",
        userRole: 0,
        rewardInfo: undefined,
        personalCard: undefined,
        authenticationInfo: undefined,
        mediaBadgeImageList: [],
        commerceWebcastConfigIds: [],
        borders: [],
        comboBadgeInfo: undefined,
        subscribeInfo: undefined,
        badges: [],
        mintTypeLabel: [],
        fansClubInfo: undefined,
        allowFindByContacts: false,
        allowOthersDownloadVideo: false,
        allowOthersDownloadWhenSharingVideo: false,
        allowShareShowProfile: false,
        allowShowInGossip: false,
        allowShowMyAction: false,
        allowStrangeComment: false,
        allowUnfollowerComment: false,
        allowUseLinkmic: false,
        avatarJpg: undefined,
        backgroundImgUrl: "",
        blockStatus: 0,
        commentRestrict: 0,
        constellation: "",
        disableIchat: 0,
        enableIchatImg: "0",
        exp: 0,
        foldStrangerChat: false,
        followStatus: "0",
        ichatRestrictType: 0,
        idStr: "",
        isFollower: false,
        isFollowing: false,
        needProfileGuide: false,
        pushCommentStatus: false,
        pushDigg: false,
        pushFollow: false,
        pushFriendAction: false,
        pushIchat: false,
        pushStatus: false,
        pushVideoPost: false,
        pushVideoRecommend: false,
        verifiedReason: "",
        enableCarManagementPermission: false,
        upcomingEventList: [],
        scmLabel: "",
        ecommerceEntrance: undefined,
        isBlock: false,
        isSubscribe: false,
        isAnchorMarked: false,
    };
}
exports.UserDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.nickname !== "") {
            writer.uint32(26).string(message.nickname);
        }
        if (message.bioDescription !== "") {
            writer.uint32(42).string(message.bioDescription);
        }
        if (message.profilePicture !== undefined) {
            exports.ImageDecoder.encode(message.profilePicture, writer.uint32(74).fork()).join();
        }
        if (message.profilePictureMedium !== undefined) {
            exports.ImageDecoder.encode(message.profilePictureMedium, writer.uint32(82).fork()).join();
        }
        if (message.profilePictureLarge !== undefined) {
            exports.ImageDecoder.encode(message.profilePictureLarge, writer.uint32(90).fork()).join();
        }
        if (message.verified !== false) {
            writer.uint32(96).bool(message.verified);
        }
        if (message.status !== 0) {
            writer.uint32(120).int32(message.status);
        }
        if (message.createTime !== "0") {
            writer.uint32(128).int64(message.createTime);
        }
        if (message.modifyTime !== "0") {
            writer.uint32(136).int64(message.modifyTime);
        }
        if (message.secret !== 0) {
            writer.uint32(144).int32(message.secret);
        }
        if (message.shareQrcodeUri !== "") {
            writer.uint32(154).string(message.shareQrcodeUri);
        }
        for (const v of message.badgeImageList) {
            exports.ImageDecoder.encode(v, writer.uint32(170).fork()).join();
        }
        if (message.followInfo !== undefined) {
            exports.User_FollowInfoDecoder.encode(message.followInfo, writer.uint32(178).fork()).join();
        }
        if (message.userHonor !== undefined) {
            exports.UserHonorDecoder.encode(message.userHonor, writer.uint32(186).fork()).join();
        }
        if (message.fansClub !== undefined) {
            exports.FansClubMemberDecoder.encode(message.fansClub, writer.uint32(194).fork()).join();
        }
        if (message.border !== undefined) {
            exports.BorderInfoDecoder.encode(message.border, writer.uint32(202).fork()).join();
        }
        if (message.specialId !== "") {
            writer.uint32(210).string(message.specialId);
        }
        if (message.avatarBorder !== undefined) {
            exports.ImageDecoder.encode(message.avatarBorder, writer.uint32(218).fork()).join();
        }
        if (message.medal !== undefined) {
            exports.ImageDecoder.encode(message.medal, writer.uint32(226).fork()).join();
        }
        for (const v of message.userBadges) {
            exports.ImageDecoder.encode(v, writer.uint32(234).fork()).join();
        }
        for (const v of message.newUserBadges) {
            exports.ImageDecoder.encode(v, writer.uint32(242).fork()).join();
        }
        if (message.topVipNo !== 0) {
            writer.uint32(248).int32(message.topVipNo);
        }
        if (message.userAttr !== undefined) {
            exports.User_UserAttrDecoder.encode(message.userAttr, writer.uint32(258).fork()).join();
        }
        if (message.ownRoom !== undefined) {
            exports.User_OwnRoomDecoder.encode(message.ownRoom, writer.uint32(266).fork()).join();
        }
        if (message.payScore !== "0") {
            writer.uint32(272).int64(message.payScore);
        }
        if (message.fanTicketCount !== "0") {
            writer.uint32(280).int64(message.fanTicketCount);
        }
        if (message.anchorInfo !== undefined) {
            exports.User_AnchorLevelDecoder.encode(message.anchorInfo, writer.uint32(290).fork()).join();
        }
        if (message.linkMicStats !== 0) {
            writer.uint32(296).int32(message.linkMicStats);
        }
        if (message.uniqueId !== "") {
            writer.uint32(306).string(message.uniqueId);
        }
        if (message.enableShowCommerceSale !== false) {
            writer.uint32(312).bool(message.enableShowCommerceSale);
        }
        if (message.withFusionShopEntry !== false) {
            writer.uint32(320).bool(message.withFusionShopEntry);
        }
        if (message.payScores !== "0") {
            writer.uint32(328).int64(message.payScores);
        }
        if (message.anchorLevel !== undefined) {
            exports.User_AnchorLevelDecoder.encode(message.anchorLevel, writer.uint32(338).fork()).join();
        }
        if (message.verifiedContent !== "") {
            writer.uint32(346).string(message.verifiedContent);
        }
        if (message.authorInfo !== undefined) {
            exports.AuthorDecoder.encode(message.authorInfo, writer.uint32(354).fork()).join();
        }
        for (const v of message.topFans) {
            exports.UserDecoder.encode(v, writer.uint32(362).fork()).join();
        }
        if (message.secUid !== "") {
            writer.uint32(370).string(message.secUid);
        }
        if (message.userRole !== 0) {
            writer.uint32(376).int32(message.userRole);
        }
        if (message.rewardInfo !== undefined) {
            exports.User_ActivityInfoDecoder.encode(message.rewardInfo, writer.uint32(394).fork()).join();
        }
        if (message.personalCard !== undefined) {
            exports.ImageDecoder.encode(message.personalCard, writer.uint32(418).fork()).join();
        }
        if (message.authenticationInfo !== undefined) {
            exports.User_AuthenticationInfoDecoder.encode(message.authenticationInfo, writer.uint32(426).fork()).join();
        }
        for (const v of message.mediaBadgeImageList) {
            exports.ImageDecoder.encode(v, writer.uint32(458).fork()).join();
        }
        writer.uint32(482).fork();
        for (const v of message.commerceWebcastConfigIds) {
            writer.int64(v);
        }
        writer.join();
        for (const v of message.borders) {
            exports.BorderInfoDecoder.encode(v, writer.uint32(490).fork()).join();
        }
        if (message.comboBadgeInfo !== undefined) {
            exports.User_ComboBadgeInfoDecoder.encode(message.comboBadgeInfo, writer.uint32(498).fork()).join();
        }
        if (message.subscribeInfo !== undefined) {
            exports.User_SubscribeInfoDecoder.encode(message.subscribeInfo, writer.uint32(506).fork()).join();
        }
        for (const v of message.badges) {
            exports.BadgeStructDecoder.encode(v, writer.uint32(514).fork()).join();
        }
        writer.uint32(522).fork();
        for (const v of message.mintTypeLabel) {
            writer.int64(v);
        }
        writer.join();
        if (message.fansClubInfo !== undefined) {
            exports.User_FansClubInfoDecoder.encode(message.fansClubInfo, writer.uint32(530).fork()).join();
        }
        if (message.allowFindByContacts !== false) {
            writer.uint32(8016).bool(message.allowFindByContacts);
        }
        if (message.allowOthersDownloadVideo !== false) {
            writer.uint32(8024).bool(message.allowOthersDownloadVideo);
        }
        if (message.allowOthersDownloadWhenSharingVideo !== false) {
            writer.uint32(8032).bool(message.allowOthersDownloadWhenSharingVideo);
        }
        if (message.allowShareShowProfile !== false) {
            writer.uint32(8040).bool(message.allowShareShowProfile);
        }
        if (message.allowShowInGossip !== false) {
            writer.uint32(8048).bool(message.allowShowInGossip);
        }
        if (message.allowShowMyAction !== false) {
            writer.uint32(8056).bool(message.allowShowMyAction);
        }
        if (message.allowStrangeComment !== false) {
            writer.uint32(8064).bool(message.allowStrangeComment);
        }
        if (message.allowUnfollowerComment !== false) {
            writer.uint32(8072).bool(message.allowUnfollowerComment);
        }
        if (message.allowUseLinkmic !== false) {
            writer.uint32(8080).bool(message.allowUseLinkmic);
        }
        if (message.avatarJpg !== undefined) {
            exports.ImageDecoder.encode(message.avatarJpg, writer.uint32(8098).fork()).join();
        }
        if (message.backgroundImgUrl !== "") {
            writer.uint32(8106).string(message.backgroundImgUrl);
        }
        if (message.blockStatus !== 0) {
            writer.uint32(8128).int32(message.blockStatus);
        }
        if (message.commentRestrict !== 0) {
            writer.uint32(8136).int32(message.commentRestrict);
        }
        if (message.constellation !== "") {
            writer.uint32(8146).string(message.constellation);
        }
        if (message.disableIchat !== 0) {
            writer.uint32(8152).int32(message.disableIchat);
        }
        if (message.enableIchatImg !== "0") {
            writer.uint32(8160).int64(message.enableIchatImg);
        }
        if (message.exp !== 0) {
            writer.uint32(8168).int32(message.exp);
        }
        if (message.foldStrangerChat !== false) {
            writer.uint32(8184).bool(message.foldStrangerChat);
        }
        if (message.followStatus !== "0") {
            writer.uint32(8192).int64(message.followStatus);
        }
        if (message.ichatRestrictType !== 0) {
            writer.uint32(8216).int32(message.ichatRestrictType);
        }
        if (message.idStr !== "") {
            writer.uint32(8226).string(message.idStr);
        }
        if (message.isFollower !== false) {
            writer.uint32(8232).bool(message.isFollower);
        }
        if (message.isFollowing !== false) {
            writer.uint32(8240).bool(message.isFollowing);
        }
        if (message.needProfileGuide !== false) {
            writer.uint32(8248).bool(message.needProfileGuide);
        }
        if (message.pushCommentStatus !== false) {
            writer.uint32(8264).bool(message.pushCommentStatus);
        }
        if (message.pushDigg !== false) {
            writer.uint32(8272).bool(message.pushDigg);
        }
        if (message.pushFollow !== false) {
            writer.uint32(8280).bool(message.pushFollow);
        }
        if (message.pushFriendAction !== false) {
            writer.uint32(8288).bool(message.pushFriendAction);
        }
        if (message.pushIchat !== false) {
            writer.uint32(8296).bool(message.pushIchat);
        }
        if (message.pushStatus !== false) {
            writer.uint32(8304).bool(message.pushStatus);
        }
        if (message.pushVideoPost !== false) {
            writer.uint32(8312).bool(message.pushVideoPost);
        }
        if (message.pushVideoRecommend !== false) {
            writer.uint32(8320).bool(message.pushVideoRecommend);
        }
        if (message.verifiedReason !== "") {
            writer.uint32(8346).string(message.verifiedReason);
        }
        if (message.enableCarManagementPermission !== false) {
            writer.uint32(8352).bool(message.enableCarManagementPermission);
        }
        for (const v of message.upcomingEventList) {
            exports.User_LiveEventInfoDecoder.encode(v, writer.uint32(8362).fork()).join();
        }
        if (message.scmLabel !== "") {
            writer.uint32(8370).string(message.scmLabel);
        }
        if (message.ecommerceEntrance !== undefined) {
            exports.User_EcommerceEntranceDecoder.encode(message.ecommerceEntrance, writer.uint32(8378).fork()).join();
        }
        if (message.isBlock !== false) {
            writer.uint32(8384).bool(message.isBlock);
        }
        if (message.isSubscribe !== false) {
            writer.uint32(8720).bool(message.isSubscribe);
        }
        if (message.isAnchorMarked !== false) {
            writer.uint32(8728).bool(message.isAnchorMarked);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.nickname = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.bioDescription = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.profilePicture = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.profilePictureMedium = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.profilePictureLarge = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.verified = reader.bool();
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.createTime = reader.int64().toString();
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.modifyTime = reader.int64().toString();
                    continue;
                }
                case 18: {
                    if (tag !== 144) {
                        break;
                    }
                    message.secret = reader.int32();
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.shareQrcodeUri = reader.string();
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.badgeImageList.push(exports.ImageDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.followInfo = exports.User_FollowInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.userHonor = exports.UserHonorDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.fansClub = exports.FansClubMemberDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.border = exports.BorderInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 26: {
                    if (tag !== 210) {
                        break;
                    }
                    message.specialId = reader.string();
                    continue;
                }
                case 27: {
                    if (tag !== 218) {
                        break;
                    }
                    message.avatarBorder = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 28: {
                    if (tag !== 226) {
                        break;
                    }
                    message.medal = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 29: {
                    if (tag !== 234) {
                        break;
                    }
                    message.userBadges.push(exports.ImageDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 30: {
                    if (tag !== 242) {
                        break;
                    }
                    message.newUserBadges.push(exports.ImageDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 31: {
                    if (tag !== 248) {
                        break;
                    }
                    message.topVipNo = reader.int32();
                    continue;
                }
                case 32: {
                    if (tag !== 258) {
                        break;
                    }
                    message.userAttr = exports.User_UserAttrDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 33: {
                    if (tag !== 266) {
                        break;
                    }
                    message.ownRoom = exports.User_OwnRoomDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 34: {
                    if (tag !== 272) {
                        break;
                    }
                    message.payScore = reader.int64().toString();
                    continue;
                }
                case 35: {
                    if (tag !== 280) {
                        break;
                    }
                    message.fanTicketCount = reader.int64().toString();
                    continue;
                }
                case 36: {
                    if (tag !== 290) {
                        break;
                    }
                    message.anchorInfo = exports.User_AnchorLevelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 37: {
                    if (tag !== 296) {
                        break;
                    }
                    message.linkMicStats = reader.int32();
                    continue;
                }
                case 38: {
                    if (tag !== 306) {
                        break;
                    }
                    message.uniqueId = reader.string();
                    continue;
                }
                case 39: {
                    if (tag !== 312) {
                        break;
                    }
                    message.enableShowCommerceSale = reader.bool();
                    continue;
                }
                case 40: {
                    if (tag !== 320) {
                        break;
                    }
                    message.withFusionShopEntry = reader.bool();
                    continue;
                }
                case 41: {
                    if (tag !== 328) {
                        break;
                    }
                    message.payScores = reader.int64().toString();
                    continue;
                }
                case 42: {
                    if (tag !== 338) {
                        break;
                    }
                    message.anchorLevel = exports.User_AnchorLevelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 43: {
                    if (tag !== 346) {
                        break;
                    }
                    message.verifiedContent = reader.string();
                    continue;
                }
                case 44: {
                    if (tag !== 354) {
                        break;
                    }
                    message.authorInfo = exports.AuthorDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 45: {
                    if (tag !== 362) {
                        break;
                    }
                    message.topFans.push(exports.UserDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 46: {
                    if (tag !== 370) {
                        break;
                    }
                    message.secUid = reader.string();
                    continue;
                }
                case 47: {
                    if (tag !== 376) {
                        break;
                    }
                    message.userRole = reader.int32();
                    continue;
                }
                case 49: {
                    if (tag !== 394) {
                        break;
                    }
                    message.rewardInfo = exports.User_ActivityInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 52: {
                    if (tag !== 418) {
                        break;
                    }
                    message.personalCard = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 53: {
                    if (tag !== 426) {
                        break;
                    }
                    message.authenticationInfo = exports.User_AuthenticationInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 57: {
                    if (tag !== 458) {
                        break;
                    }
                    message.mediaBadgeImageList.push(exports.ImageDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 60: {
                    if (tag === 480) {
                        message.commerceWebcastConfigIds.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 482) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.commerceWebcastConfigIds.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 61: {
                    if (tag !== 490) {
                        break;
                    }
                    message.borders.push(exports.BorderInfoDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 62: {
                    if (tag !== 498) {
                        break;
                    }
                    message.comboBadgeInfo = exports.User_ComboBadgeInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 63: {
                    if (tag !== 506) {
                        break;
                    }
                    message.subscribeInfo = exports.User_SubscribeInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 64: {
                    if (tag !== 514) {
                        break;
                    }
                    message.badges.push(exports.BadgeStructDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 65: {
                    if (tag === 520) {
                        message.mintTypeLabel.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 522) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.mintTypeLabel.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 66: {
                    if (tag !== 530) {
                        break;
                    }
                    message.fansClubInfo = exports.User_FansClubInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 1002: {
                    if (tag !== 8016) {
                        break;
                    }
                    message.allowFindByContacts = reader.bool();
                    continue;
                }
                case 1003: {
                    if (tag !== 8024) {
                        break;
                    }
                    message.allowOthersDownloadVideo = reader.bool();
                    continue;
                }
                case 1004: {
                    if (tag !== 8032) {
                        break;
                    }
                    message.allowOthersDownloadWhenSharingVideo = reader.bool();
                    continue;
                }
                case 1005: {
                    if (tag !== 8040) {
                        break;
                    }
                    message.allowShareShowProfile = reader.bool();
                    continue;
                }
                case 1006: {
                    if (tag !== 8048) {
                        break;
                    }
                    message.allowShowInGossip = reader.bool();
                    continue;
                }
                case 1007: {
                    if (tag !== 8056) {
                        break;
                    }
                    message.allowShowMyAction = reader.bool();
                    continue;
                }
                case 1008: {
                    if (tag !== 8064) {
                        break;
                    }
                    message.allowStrangeComment = reader.bool();
                    continue;
                }
                case 1009: {
                    if (tag !== 8072) {
                        break;
                    }
                    message.allowUnfollowerComment = reader.bool();
                    continue;
                }
                case 1010: {
                    if (tag !== 8080) {
                        break;
                    }
                    message.allowUseLinkmic = reader.bool();
                    continue;
                }
                case 1012: {
                    if (tag !== 8098) {
                        break;
                    }
                    message.avatarJpg = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 1013: {
                    if (tag !== 8106) {
                        break;
                    }
                    message.backgroundImgUrl = reader.string();
                    continue;
                }
                case 1016: {
                    if (tag !== 8128) {
                        break;
                    }
                    message.blockStatus = reader.int32();
                    continue;
                }
                case 1017: {
                    if (tag !== 8136) {
                        break;
                    }
                    message.commentRestrict = reader.int32();
                    continue;
                }
                case 1018: {
                    if (tag !== 8146) {
                        break;
                    }
                    message.constellation = reader.string();
                    continue;
                }
                case 1019: {
                    if (tag !== 8152) {
                        break;
                    }
                    message.disableIchat = reader.int32();
                    continue;
                }
                case 1020: {
                    if (tag !== 8160) {
                        break;
                    }
                    message.enableIchatImg = reader.int64().toString();
                    continue;
                }
                case 1021: {
                    if (tag !== 8168) {
                        break;
                    }
                    message.exp = reader.int32();
                    continue;
                }
                case 1023: {
                    if (tag !== 8184) {
                        break;
                    }
                    message.foldStrangerChat = reader.bool();
                    continue;
                }
                case 1024: {
                    if (tag !== 8192) {
                        break;
                    }
                    message.followStatus = reader.int64().toString();
                    continue;
                }
                case 1027: {
                    if (tag !== 8216) {
                        break;
                    }
                    message.ichatRestrictType = reader.int32();
                    continue;
                }
                case 1028: {
                    if (tag !== 8226) {
                        break;
                    }
                    message.idStr = reader.string();
                    continue;
                }
                case 1029: {
                    if (tag !== 8232) {
                        break;
                    }
                    message.isFollower = reader.bool();
                    continue;
                }
                case 1030: {
                    if (tag !== 8240) {
                        break;
                    }
                    message.isFollowing = reader.bool();
                    continue;
                }
                case 1031: {
                    if (tag !== 8248) {
                        break;
                    }
                    message.needProfileGuide = reader.bool();
                    continue;
                }
                case 1033: {
                    if (tag !== 8264) {
                        break;
                    }
                    message.pushCommentStatus = reader.bool();
                    continue;
                }
                case 1034: {
                    if (tag !== 8272) {
                        break;
                    }
                    message.pushDigg = reader.bool();
                    continue;
                }
                case 1035: {
                    if (tag !== 8280) {
                        break;
                    }
                    message.pushFollow = reader.bool();
                    continue;
                }
                case 1036: {
                    if (tag !== 8288) {
                        break;
                    }
                    message.pushFriendAction = reader.bool();
                    continue;
                }
                case 1037: {
                    if (tag !== 8296) {
                        break;
                    }
                    message.pushIchat = reader.bool();
                    continue;
                }
                case 1038: {
                    if (tag !== 8304) {
                        break;
                    }
                    message.pushStatus = reader.bool();
                    continue;
                }
                case 1039: {
                    if (tag !== 8312) {
                        break;
                    }
                    message.pushVideoPost = reader.bool();
                    continue;
                }
                case 1040: {
                    if (tag !== 8320) {
                        break;
                    }
                    message.pushVideoRecommend = reader.bool();
                    continue;
                }
                case 1043: {
                    if (tag !== 8346) {
                        break;
                    }
                    message.verifiedReason = reader.string();
                    continue;
                }
                case 1044: {
                    if (tag !== 8352) {
                        break;
                    }
                    message.enableCarManagementPermission = reader.bool();
                    continue;
                }
                case 1045: {
                    if (tag !== 8362) {
                        break;
                    }
                    message.upcomingEventList.push(exports.User_LiveEventInfoDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 1046: {
                    if (tag !== 8370) {
                        break;
                    }
                    message.scmLabel = reader.string();
                    continue;
                }
                case 1047: {
                    if (tag !== 8378) {
                        break;
                    }
                    message.ecommerceEntrance = exports.User_EcommerceEntranceDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 1048: {
                    if (tag !== 8384) {
                        break;
                    }
                    message.isBlock = reader.bool();
                    continue;
                }
                case 1090: {
                    if (tag !== 8720) {
                        break;
                    }
                    message.isSubscribe = reader.bool();
                    continue;
                }
                case 1091: {
                    if (tag !== 8728) {
                        break;
                    }
                    message.isAnchorMarked = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_LiveEventInfo() {
    return {
        eventId: "0",
        startTime: "0",
        duration: "0",
        title: "",
        description: "",
        hasSubscribed: false,
        isPaidEvent: false,
        ticketAmount: "0",
        payMethod: "0",
    };
}
exports.User_LiveEventInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventId !== "0") {
            writer.uint32(8).int64(message.eventId);
        }
        if (message.startTime !== "0") {
            writer.uint32(16).int64(message.startTime);
        }
        if (message.duration !== "0") {
            writer.uint32(24).int64(message.duration);
        }
        if (message.title !== "") {
            writer.uint32(34).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(42).string(message.description);
        }
        if (message.hasSubscribed !== false) {
            writer.uint32(48).bool(message.hasSubscribed);
        }
        if (message.isPaidEvent !== false) {
            writer.uint32(56).bool(message.isPaidEvent);
        }
        if (message.ticketAmount !== "0") {
            writer.uint32(64).int64(message.ticketAmount);
        }
        if (message.payMethod !== "0") {
            writer.uint32(72).int64(message.payMethod);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_LiveEventInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.eventId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.startTime = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.duration = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.hasSubscribed = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.isPaidEvent = reader.bool();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.ticketAmount = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.payMethod = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_LiveEventInfo_WalletPackage() {
    return { iapId: "", usdPriceShow: "" };
}
exports.User_LiveEventInfo_WalletPackageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.iapId !== "") {
            writer.uint32(10).string(message.iapId);
        }
        if (message.usdPriceShow !== "") {
            writer.uint32(18).string(message.usdPriceShow);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_LiveEventInfo_WalletPackage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.iapId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.usdPriceShow = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_ActivityInfo() {
    return { badge: undefined, storytag: undefined };
}
exports.User_ActivityInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.badge !== undefined) {
            exports.ImageDecoder.encode(message.badge, writer.uint32(10).fork()).join();
        }
        if (message.storytag !== undefined) {
            exports.ImageDecoder.encode(message.storytag, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_ActivityInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.badge = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.storytag = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_AnchorLevel() {
    return {
        level: "0",
        experience: "0",
        lowestExperienceThisLevel: "0",
        highestExperienceThisLevel: "0",
        taskStartExperience: "0",
        taskStartTime: "0",
        taskDecreaseExperience: "0",
        taskTargetExperience: "0",
        taskEndTime: "0",
        profileDialogBg: undefined,
        profileDialogBgBack: undefined,
        stageLevel: undefined,
        smallIcon: undefined,
    };
}
exports.User_AnchorLevelDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.level !== "0") {
            writer.uint32(8).int64(message.level);
        }
        if (message.experience !== "0") {
            writer.uint32(16).int64(message.experience);
        }
        if (message.lowestExperienceThisLevel !== "0") {
            writer.uint32(24).int64(message.lowestExperienceThisLevel);
        }
        if (message.highestExperienceThisLevel !== "0") {
            writer.uint32(32).int64(message.highestExperienceThisLevel);
        }
        if (message.taskStartExperience !== "0") {
            writer.uint32(40).int64(message.taskStartExperience);
        }
        if (message.taskStartTime !== "0") {
            writer.uint32(48).int64(message.taskStartTime);
        }
        if (message.taskDecreaseExperience !== "0") {
            writer.uint32(56).int64(message.taskDecreaseExperience);
        }
        if (message.taskTargetExperience !== "0") {
            writer.uint32(64).int64(message.taskTargetExperience);
        }
        if (message.taskEndTime !== "0") {
            writer.uint32(72).int64(message.taskEndTime);
        }
        if (message.profileDialogBg !== undefined) {
            exports.ImageDecoder.encode(message.profileDialogBg, writer.uint32(82).fork()).join();
        }
        if (message.profileDialogBgBack !== undefined) {
            exports.ImageDecoder.encode(message.profileDialogBgBack, writer.uint32(90).fork()).join();
        }
        if (message.stageLevel !== undefined) {
            exports.ImageDecoder.encode(message.stageLevel, writer.uint32(98).fork()).join();
        }
        if (message.smallIcon !== undefined) {
            exports.ImageDecoder.encode(message.smallIcon, writer.uint32(106).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_AnchorLevel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.level = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.experience = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.lowestExperienceThisLevel = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.highestExperienceThisLevel = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.taskStartExperience = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.taskStartTime = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.taskDecreaseExperience = reader.int64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.taskTargetExperience = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.taskEndTime = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.profileDialogBg = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.profileDialogBgBack = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.stageLevel = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.smallIcon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_AuthenticationInfo() {
    return { customVerify: "", enterpriseVerifyReason: "", authenticationBadge: undefined };
}
exports.User_AuthenticationInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customVerify !== "") {
            writer.uint32(10).string(message.customVerify);
        }
        if (message.enterpriseVerifyReason !== "") {
            writer.uint32(18).string(message.enterpriseVerifyReason);
        }
        if (message.authenticationBadge !== undefined) {
            exports.ImageDecoder.encode(message.authenticationBadge, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_AuthenticationInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customVerify = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.enterpriseVerifyReason = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.authenticationBadge = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_AuthorStats() {
    return {
        videoTotalCount: "0",
        videoTotalPlayCount: "0",
        videoTotalShareCount: "0",
        videoTotalSeriesCount: "0",
        varietyShowPlayCount: "0",
        videoTotalFavoriteCount: "0",
    };
}
exports.User_AuthorStatsDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.videoTotalCount !== "0") {
            writer.uint32(8).int64(message.videoTotalCount);
        }
        if (message.videoTotalPlayCount !== "0") {
            writer.uint32(16).int64(message.videoTotalPlayCount);
        }
        if (message.videoTotalShareCount !== "0") {
            writer.uint32(24).int64(message.videoTotalShareCount);
        }
        if (message.videoTotalSeriesCount !== "0") {
            writer.uint32(32).int64(message.videoTotalSeriesCount);
        }
        if (message.varietyShowPlayCount !== "0") {
            writer.uint32(40).int64(message.varietyShowPlayCount);
        }
        if (message.videoTotalFavoriteCount !== "0") {
            writer.uint32(48).int64(message.videoTotalFavoriteCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_AuthorStats();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.videoTotalCount = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.videoTotalPlayCount = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.videoTotalShareCount = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.videoTotalSeriesCount = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.varietyShowPlayCount = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.videoTotalFavoriteCount = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_Border() {
    return {
        icon: undefined,
        level: "0",
        source: "",
        profileDecorationRibbon: undefined,
        avatarBackgroundColor: "",
        avatarBackgroundBorderColor: "",
    };
}
exports.User_BorderDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.icon !== undefined) {
            exports.ImageDecoder.encode(message.icon, writer.uint32(10).fork()).join();
        }
        if (message.level !== "0") {
            writer.uint32(16).int64(message.level);
        }
        if (message.source !== "") {
            writer.uint32(26).string(message.source);
        }
        if (message.profileDecorationRibbon !== undefined) {
            exports.ImageDecoder.encode(message.profileDecorationRibbon, writer.uint32(34).fork()).join();
        }
        if (message.avatarBackgroundColor !== "") {
            writer.uint32(58).string(message.avatarBackgroundColor);
        }
        if (message.avatarBackgroundBorderColor !== "") {
            writer.uint32(66).string(message.avatarBackgroundBorderColor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_Border();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.icon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.level = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.source = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.profileDecorationRibbon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.avatarBackgroundColor = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.avatarBackgroundBorderColor = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_ComboBadgeInfo() {
    return { icon: undefined, comboCount: "0" };
}
exports.User_ComboBadgeInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.icon !== undefined) {
            exports.ImageDecoder.encode(message.icon, writer.uint32(10).fork()).join();
        }
        if (message.comboCount !== "0") {
            writer.uint32(16).int64(message.comboCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_ComboBadgeInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.icon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.comboCount = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_EcommerceEntrance() {
    return { entranceType: 0, creatorType: 0, schema: "", shopEntranceInfo: undefined, showcaseEntranceInfo: undefined };
}
exports.User_EcommerceEntranceDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.entranceType !== 0) {
            writer.uint32(8).int32(message.entranceType);
        }
        if (message.creatorType !== 0) {
            writer.uint32(16).int32(message.creatorType);
        }
        if (message.schema !== "") {
            writer.uint32(26).string(message.schema);
        }
        if (message.shopEntranceInfo !== undefined) {
            exports.User_EcommerceEntrance_ShopEntranceInfoDecoder.encode(message.shopEntranceInfo, writer.uint32(34).fork()).join();
        }
        if (message.showcaseEntranceInfo !== undefined) {
            exports.User_EcommerceEntrance_ShowcaseEntranceInfoDecoder.encode(message.showcaseEntranceInfo, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_EcommerceEntrance();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.entranceType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.creatorType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.schema = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.shopEntranceInfo = exports.User_EcommerceEntrance_ShopEntranceInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.showcaseEntranceInfo = exports.User_EcommerceEntrance_ShowcaseEntranceInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_EcommerceEntrance_ShopEntranceInfo() {
    return {
        shopId: "",
        shopName: "",
        shopRating: "",
        storeLabel: undefined,
        formatSoldCount: "",
        soldCount: "0",
        expRatePercentile: 0,
        expRateTopDisplay: "",
        rateDisplayStyle: 0,
        showRateNotApplicable: false,
    };
}
exports.User_EcommerceEntrance_ShopEntranceInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.shopId !== "") {
            writer.uint32(10).string(message.shopId);
        }
        if (message.shopName !== "") {
            writer.uint32(18).string(message.shopName);
        }
        if (message.shopRating !== "") {
            writer.uint32(26).string(message.shopRating);
        }
        if (message.storeLabel !== undefined) {
            exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabelDecoder.encode(message.storeLabel, writer.uint32(34).fork()).join();
        }
        if (message.formatSoldCount !== "") {
            writer.uint32(42).string(message.formatSoldCount);
        }
        if (message.soldCount !== "0") {
            writer.uint32(48).int64(message.soldCount);
        }
        if (message.expRatePercentile !== 0) {
            writer.uint32(56).int32(message.expRatePercentile);
        }
        if (message.expRateTopDisplay !== "") {
            writer.uint32(66).string(message.expRateTopDisplay);
        }
        if (message.rateDisplayStyle !== 0) {
            writer.uint32(72).int32(message.rateDisplayStyle);
        }
        if (message.showRateNotApplicable !== false) {
            writer.uint32(80).bool(message.showRateNotApplicable);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_EcommerceEntrance_ShopEntranceInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.shopId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.shopName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.shopRating = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.storeLabel = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.formatSoldCount = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.soldCount = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.expRatePercentile = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.expRateTopDisplay = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.rateDisplayStyle = reader.int32();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.showRateNotApplicable = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel() {
    return { officialLabel: undefined, isBytemall: false };
}
exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabelDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.officialLabel !== undefined) {
            exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabelDecoder.encode(message.officialLabel, writer.uint32(10).fork()).join();
        }
        if (message.isBytemall !== false) {
            writer.uint32(16).bool(message.isBytemall);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.officialLabel = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isBytemall = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel() {
    return { labelImageLight: undefined, labelImageDark: undefined, labelType: "0", labelTypeStr: "" };
}
exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabelDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.labelImageLight !== undefined) {
            exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImageDecoder.encode(message.labelImageLight, writer.uint32(10).fork()).join();
        }
        if (message.labelImageDark !== undefined) {
            exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImageDecoder.encode(message.labelImageDark, writer.uint32(18).fork()).join();
        }
        if (message.labelType !== "0") {
            writer.uint32(24).int64(message.labelType);
        }
        if (message.labelTypeStr !== "") {
            writer.uint32(34).string(message.labelTypeStr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.labelImageLight = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.labelImageDark = exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.labelType = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.labelTypeStr = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage() {
    return { height: 0, width: 0, minetype: "", thumbUri: "", thumbUriList: [], uri: "", urlList: [], color: "" };
}
exports.User_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.height !== 0) {
            writer.uint32(8).int32(message.height);
        }
        if (message.width !== 0) {
            writer.uint32(16).int32(message.width);
        }
        if (message.minetype !== "") {
            writer.uint32(26).string(message.minetype);
        }
        if (message.thumbUri !== "") {
            writer.uint32(34).string(message.thumbUri);
        }
        for (const v of message.thumbUriList) {
            writer.uint32(42).string(v);
        }
        if (message.uri !== "") {
            writer.uint32(50).string(message.uri);
        }
        for (const v of message.urlList) {
            writer.uint32(58).string(v);
        }
        if (message.color !== "") {
            writer.uint32(66).string(message.color);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_EcommerceEntrance_ShopEntranceInfo_StoreLabel_StoreOfficialLabel_ShopLabelImage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.width = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.minetype = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.thumbUri = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.thumbUriList.push(reader.string());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.uri = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.urlList.push(reader.string());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.color = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_EcommerceEntrance_ShowcaseEntranceInfo() {
    return { formatSoldCount: "", soldCount: "0" };
}
exports.User_EcommerceEntrance_ShowcaseEntranceInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.formatSoldCount !== "") {
            writer.uint32(10).string(message.formatSoldCount);
        }
        if (message.soldCount !== "0") {
            writer.uint32(16).int64(message.soldCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_EcommerceEntrance_ShowcaseEntranceInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.formatSoldCount = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.soldCount = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_FansClub() {
    return { data: undefined };
}
exports.User_FansClubDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.data !== undefined) {
            exports.User_FansClub_FansClubDataDecoder.encode(message.data, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_FansClub();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.data = exports.User_FansClub_FansClubDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_FansClub_FansClubData() {
    return { clubName: "", level: 0, userFansClubStatus: 0, availableGiftIdsList: [], anchorId: "0" };
}
exports.User_FansClub_FansClubDataDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.clubName !== "") {
            writer.uint32(10).string(message.clubName);
        }
        if (message.level !== 0) {
            writer.uint32(16).int32(message.level);
        }
        if (message.userFansClubStatus !== 0) {
            writer.uint32(24).int32(message.userFansClubStatus);
        }
        writer.uint32(42).fork();
        for (const v of message.availableGiftIdsList) {
            writer.int64(v);
        }
        writer.join();
        if (message.anchorId !== "0") {
            writer.uint32(48).int64(message.anchorId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_FansClub_FansClubData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.clubName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.level = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.userFansClubStatus = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag === 40) {
                        message.availableGiftIdsList.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 42) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.availableGiftIdsList.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.anchorId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_FansClubInfo() {
    return { isSleeping: false, fansLevel: "0", fansScore: "0", badge: undefined, fansCount: "0", fansClubName: "" };
}
exports.User_FansClubInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isSleeping !== false) {
            writer.uint32(8).bool(message.isSleeping);
        }
        if (message.fansLevel !== "0") {
            writer.uint32(16).int64(message.fansLevel);
        }
        if (message.fansScore !== "0") {
            writer.uint32(24).int64(message.fansScore);
        }
        if (message.badge !== undefined) {
            exports.ImageDecoder.encode(message.badge, writer.uint32(34).fork()).join();
        }
        if (message.fansCount !== "0") {
            writer.uint32(40).int64(message.fansCount);
        }
        if (message.fansClubName !== "") {
            writer.uint32(50).string(message.fansClubName);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_FansClubInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isSleeping = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.fansLevel = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.fansScore = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.badge = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.fansCount = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.fansClubName = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_FollowInfo() {
    return { followingCount: "0", followerCount: "0", followStatus: "0", pushStatus: "0" };
}
exports.User_FollowInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.followingCount !== "0") {
            writer.uint32(8).int64(message.followingCount);
        }
        if (message.followerCount !== "0") {
            writer.uint32(16).int64(message.followerCount);
        }
        if (message.followStatus !== "0") {
            writer.uint32(24).int64(message.followStatus);
        }
        if (message.pushStatus !== "0") {
            writer.uint32(32).int64(message.pushStatus);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_FollowInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.followingCount = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.followerCount = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.followStatus = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.pushStatus = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_OwnRoom() {
    return { roomIdsList: [], roomIdsStrList: [] };
}
exports.User_OwnRoomDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.roomIdsList) {
            writer.int64(v);
        }
        writer.join();
        for (const v of message.roomIdsStrList) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_OwnRoom();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.roomIdsList.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.roomIdsList.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.roomIdsStrList.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_PayGrade() {
    return {
        diamondIcon: undefined,
        name: "",
        icon: undefined,
        nextName: "",
        level: "0",
        nextIcon: undefined,
        gradeDescribe: "",
        gradeIconList: [],
        screenChatType: "0",
        imIcon: undefined,
        imIconWithLevel: undefined,
        liveIcon: undefined,
        newImIconWithLevel: undefined,
        newLiveIcon: undefined,
        upgradeNeedConsume: "0",
        nextPrivileges: "",
        background: undefined,
        backgroundBack: undefined,
        score: "0",
        gradeBanner: "",
        profileDialogBg: undefined,
        profileDialogBgBack: undefined,
    };
}
exports.User_PayGradeDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.diamondIcon !== undefined) {
            exports.ImageDecoder.encode(message.diamondIcon, writer.uint32(18).fork()).join();
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        if (message.icon !== undefined) {
            exports.ImageDecoder.encode(message.icon, writer.uint32(34).fork()).join();
        }
        if (message.nextName !== "") {
            writer.uint32(42).string(message.nextName);
        }
        if (message.level !== "0") {
            writer.uint32(48).int64(message.level);
        }
        if (message.nextIcon !== undefined) {
            exports.ImageDecoder.encode(message.nextIcon, writer.uint32(58).fork()).join();
        }
        if (message.gradeDescribe !== "") {
            writer.uint32(106).string(message.gradeDescribe);
        }
        for (const v of message.gradeIconList) {
            exports.GradeIconDecoder.encode(v, writer.uint32(114).fork()).join();
        }
        if (message.screenChatType !== "0") {
            writer.uint32(120).int64(message.screenChatType);
        }
        if (message.imIcon !== undefined) {
            exports.ImageDecoder.encode(message.imIcon, writer.uint32(130).fork()).join();
        }
        if (message.imIconWithLevel !== undefined) {
            exports.ImageDecoder.encode(message.imIconWithLevel, writer.uint32(138).fork()).join();
        }
        if (message.liveIcon !== undefined) {
            exports.ImageDecoder.encode(message.liveIcon, writer.uint32(146).fork()).join();
        }
        if (message.newImIconWithLevel !== undefined) {
            exports.ImageDecoder.encode(message.newImIconWithLevel, writer.uint32(154).fork()).join();
        }
        if (message.newLiveIcon !== undefined) {
            exports.ImageDecoder.encode(message.newLiveIcon, writer.uint32(162).fork()).join();
        }
        if (message.upgradeNeedConsume !== "0") {
            writer.uint32(168).int64(message.upgradeNeedConsume);
        }
        if (message.nextPrivileges !== "") {
            writer.uint32(178).string(message.nextPrivileges);
        }
        if (message.background !== undefined) {
            exports.ImageDecoder.encode(message.background, writer.uint32(186).fork()).join();
        }
        if (message.backgroundBack !== undefined) {
            exports.ImageDecoder.encode(message.backgroundBack, writer.uint32(194).fork()).join();
        }
        if (message.score !== "0") {
            writer.uint32(200).int64(message.score);
        }
        if (message.gradeBanner !== "") {
            writer.uint32(8010).string(message.gradeBanner);
        }
        if (message.profileDialogBg !== undefined) {
            exports.ImageDecoder.encode(message.profileDialogBg, writer.uint32(8018).fork()).join();
        }
        if (message.profileDialogBgBack !== undefined) {
            exports.ImageDecoder.encode(message.profileDialogBgBack, writer.uint32(8026).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_PayGrade();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.diamondIcon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.icon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.nextName = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.level = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.nextIcon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.gradeDescribe = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.gradeIconList.push(exports.GradeIconDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.screenChatType = reader.int64().toString();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.imIcon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.imIconWithLevel = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.liveIcon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.newImIconWithLevel = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.newLiveIcon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.upgradeNeedConsume = reader.int64().toString();
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.nextPrivileges = reader.string();
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.background = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.backgroundBack = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 25: {
                    if (tag !== 200) {
                        break;
                    }
                    message.score = reader.int64().toString();
                    continue;
                }
                case 1001: {
                    if (tag !== 8010) {
                        break;
                    }
                    message.gradeBanner = reader.string();
                    continue;
                }
                case 1002: {
                    if (tag !== 8018) {
                        break;
                    }
                    message.profileDialogBg = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 1003: {
                    if (tag !== 8026) {
                        break;
                    }
                    message.profileDialogBgBack = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_SubscribeBadge() {
    return { originImg: undefined, previewImg: undefined };
}
exports.User_SubscribeBadgeDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.originImg !== undefined) {
            exports.ImageDecoder.encode(message.originImg, writer.uint32(26).fork()).join();
        }
        if (message.previewImg !== undefined) {
            exports.ImageDecoder.encode(message.previewImg, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_SubscribeBadge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.originImg = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.previewImg = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_SubscribeInfo() {
    return {
        qualification: false,
        isSubscribe: false,
        badge: undefined,
        enableSubscription: false,
        subscriberCount: "0",
        isInGracePeriod: false,
        isSubscribedToAnchor: false,
        userGiftSubAuth: false,
        anchorGiftSubAuth: false,
    };
}
exports.User_SubscribeInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.qualification !== false) {
            writer.uint32(8).bool(message.qualification);
        }
        if (message.isSubscribe !== false) {
            writer.uint32(16).bool(message.isSubscribe);
        }
        if (message.badge !== undefined) {
            exports.User_SubscribeBadgeDecoder.encode(message.badge, writer.uint32(26).fork()).join();
        }
        if (message.enableSubscription !== false) {
            writer.uint32(32).bool(message.enableSubscription);
        }
        if (message.subscriberCount !== "0") {
            writer.uint32(40).int64(message.subscriberCount);
        }
        if (message.isInGracePeriod !== false) {
            writer.uint32(48).bool(message.isInGracePeriod);
        }
        if (message.isSubscribedToAnchor !== false) {
            writer.uint32(56).bool(message.isSubscribedToAnchor);
        }
        if (message.userGiftSubAuth !== false) {
            writer.uint32(72).bool(message.userGiftSubAuth);
        }
        if (message.anchorGiftSubAuth !== false) {
            writer.uint32(80).bool(message.anchorGiftSubAuth);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_SubscribeInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.qualification = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isSubscribe = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.badge = exports.User_SubscribeBadgeDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.enableSubscription = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.subscriberCount = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.isInGracePeriod = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.isSubscribedToAnchor = reader.bool();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.userGiftSubAuth = reader.bool();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.anchorGiftSubAuth = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_UserAttr() {
    return { isMuted: false, isAdmin: false, isSuperAdmin: false, muteDuration: "0" };
}
exports.User_UserAttrDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isMuted !== false) {
            writer.uint32(8).bool(message.isMuted);
        }
        if (message.isAdmin !== false) {
            writer.uint32(16).bool(message.isAdmin);
        }
        if (message.isSuperAdmin !== false) {
            writer.uint32(24).bool(message.isSuperAdmin);
        }
        if (message.muteDuration !== "0") {
            writer.uint32(32).int64(message.muteDuration);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_UserAttr();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isMuted = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isAdmin = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.isSuperAdmin = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.muteDuration = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUser_UserStats() {
    return {
        id: "0",
        idStr: "",
        followingCount: "0",
        followerCount: "0",
        recordCount: "0",
        totalDuration: "0",
        dailyFanTicketCount: "0",
        dailyIncome: "0",
        itemCount: "0",
        favoriteItemCount: "0",
        diamondConsumedCount: "0",
        tuwenItemCount: "0",
    };
}
exports.User_UserStatsDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
            writer.uint32(8).int64(message.id);
        }
        if (message.idStr !== "") {
            writer.uint32(18).string(message.idStr);
        }
        if (message.followingCount !== "0") {
            writer.uint32(24).int64(message.followingCount);
        }
        if (message.followerCount !== "0") {
            writer.uint32(32).int64(message.followerCount);
        }
        if (message.recordCount !== "0") {
            writer.uint32(40).int64(message.recordCount);
        }
        if (message.totalDuration !== "0") {
            writer.uint32(48).int64(message.totalDuration);
        }
        if (message.dailyFanTicketCount !== "0") {
            writer.uint32(56).int64(message.dailyFanTicketCount);
        }
        if (message.dailyIncome !== "0") {
            writer.uint32(64).int64(message.dailyIncome);
        }
        if (message.itemCount !== "0") {
            writer.uint32(72).int64(message.itemCount);
        }
        if (message.favoriteItemCount !== "0") {
            writer.uint32(80).int64(message.favoriteItemCount);
        }
        if (message.diamondConsumedCount !== "0") {
            writer.uint32(96).int64(message.diamondConsumedCount);
        }
        if (message.tuwenItemCount !== "0") {
            writer.uint32(104).int64(message.tuwenItemCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUser_UserStats();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.idStr = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.followingCount = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.followerCount = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.recordCount = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.totalDuration = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.dailyFanTicketCount = reader.int64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.dailyIncome = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.itemCount = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.favoriteItemCount = reader.int64().toString();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.diamondConsumedCount = reader.int64().toString();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.tuwenItemCount = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseEmote() {
    return {
        emoteId: "",
        image: undefined,
        auditStatus: 0,
        uuid: "",
        emoteType: 0,
        contentSource: 0,
        emotePrivateType: 0,
        packageId: "",
        auditInfo: undefined,
        rewardCondition: 0,
        emoteUploadInfo: undefined,
        createTime: "0",
        emoteScene: 0,
    };
}
exports.EmoteDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.emoteId !== "") {
            writer.uint32(10).string(message.emoteId);
        }
        if (message.image !== undefined) {
            exports.ImageDecoder.encode(message.image, writer.uint32(18).fork()).join();
        }
        if (message.auditStatus !== 0) {
            writer.uint32(24).int32(message.auditStatus);
        }
        if (message.uuid !== "") {
            writer.uint32(34).string(message.uuid);
        }
        if (message.emoteType !== 0) {
            writer.uint32(40).int32(message.emoteType);
        }
        if (message.contentSource !== 0) {
            writer.uint32(48).int32(message.contentSource);
        }
        if (message.emotePrivateType !== 0) {
            writer.uint32(56).int32(message.emotePrivateType);
        }
        if (message.packageId !== "") {
            writer.uint32(66).string(message.packageId);
        }
        if (message.auditInfo !== undefined) {
            exports.Emote_AuditInfoDecoder.encode(message.auditInfo, writer.uint32(74).fork()).join();
        }
        if (message.rewardCondition !== 0) {
            writer.uint32(80).int32(message.rewardCondition);
        }
        if (message.emoteUploadInfo !== undefined) {
            exports.Emote_EmoteUploadInfoDecoder.encode(message.emoteUploadInfo, writer.uint32(90).fork()).join();
        }
        if (message.createTime !== "0") {
            writer.uint32(96).int64(message.createTime);
        }
        if (message.emoteScene !== 0) {
            writer.uint32(104).int32(message.emoteScene);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.emoteId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.image = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.auditStatus = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.uuid = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.emoteType = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.contentSource = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.emotePrivateType = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.packageId = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.auditInfo = exports.Emote_AuditInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.rewardCondition = reader.int32();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.emoteUploadInfo = exports.Emote_EmoteUploadInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.createTime = reader.int64().toString();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.emoteScene = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseEmote_AuditInfo() {
    return { violationId: "0", taskType: 0 };
}
exports.Emote_AuditInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.violationId !== "0") {
            writer.uint32(8).int64(message.violationId);
        }
        if (message.taskType !== 0) {
            writer.uint32(16).int32(message.taskType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmote_AuditInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.violationId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.taskType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseEmote_EmoteUploadInfo() {
    return { userId: "0", emoteUploadSource: 0, userInfo: undefined, userIdStr: "" };
}
exports.Emote_EmoteUploadInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.emoteUploadSource !== 0) {
            writer.uint32(16).int32(message.emoteUploadSource);
        }
        if (message.userInfo !== undefined) {
            exports.UserDecoder.encode(message.userInfo, writer.uint32(26).fork()).join();
        }
        if (message.userIdStr !== "") {
            writer.uint32(34).string(message.userIdStr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmote_EmoteUploadInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.emoteUploadSource = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.userInfo = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.userIdStr = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePunishEventInfo() {
    return {
        punishType: "",
        punishReason: "",
        punishId: "",
        violationUid: "0",
        punishTypeId: 0,
        duration: "0",
        punishPerceptionCode: "",
        violationUidStr: "",
        showReason: "",
    };
}
exports.PunishEventInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.punishType !== "") {
            writer.uint32(10).string(message.punishType);
        }
        if (message.punishReason !== "") {
            writer.uint32(18).string(message.punishReason);
        }
        if (message.punishId !== "") {
            writer.uint32(26).string(message.punishId);
        }
        if (message.violationUid !== "0") {
            writer.uint32(32).int64(message.violationUid);
        }
        if (message.punishTypeId !== 0) {
            writer.uint32(40).int32(message.punishTypeId);
        }
        if (message.duration !== "0") {
            writer.uint32(48).int64(message.duration);
        }
        if (message.punishPerceptionCode !== "") {
            writer.uint32(58).string(message.punishPerceptionCode);
        }
        if (message.violationUidStr !== "") {
            writer.uint32(74).string(message.violationUidStr);
        }
        if (message.showReason !== "") {
            writer.uint32(82).string(message.showReason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePunishEventInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.punishType = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.punishReason = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.punishId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.violationUid = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.punishTypeId = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.duration = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.punishPerceptionCode = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.violationUidStr = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.showReason = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseMsgFilter() {
    return { isGifter: false, isSubscribedToAnchor: false };
}
exports.MsgFilterDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isGifter !== false) {
            writer.uint32(8).bool(message.isGifter);
        }
        if (message.isSubscribedToAnchor !== false) {
            writer.uint32(16).bool(message.isSubscribedToAnchor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgFilter();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isGifter = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isSubscribedToAnchor = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUserIdentity() {
    return {
        isGiftGiverOfAnchor: false,
        isSubscriberOfAnchor: false,
        isMutualFollowingWithAnchor: false,
        isFollowerOfAnchor: false,
        isModeratorOfAnchor: false,
        isAnchor: false,
    };
}
exports.UserIdentityDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isGiftGiverOfAnchor !== false) {
            writer.uint32(8).bool(message.isGiftGiverOfAnchor);
        }
        if (message.isSubscriberOfAnchor !== false) {
            writer.uint32(16).bool(message.isSubscriberOfAnchor);
        }
        if (message.isMutualFollowingWithAnchor !== false) {
            writer.uint32(24).bool(message.isMutualFollowingWithAnchor);
        }
        if (message.isFollowerOfAnchor !== false) {
            writer.uint32(32).bool(message.isFollowerOfAnchor);
        }
        if (message.isModeratorOfAnchor !== false) {
            writer.uint32(40).bool(message.isModeratorOfAnchor);
        }
        if (message.isAnchor !== false) {
            writer.uint32(48).bool(message.isAnchor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserIdentity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isGiftGiverOfAnchor = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isSubscriberOfAnchor = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.isMutualFollowingWithAnchor = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.isFollowerOfAnchor = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.isModeratorOfAnchor = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.isAnchor = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLiveStreamGoal() {
    return {
        id: "0",
        type: 0,
        status: 0,
        subGoals: [],
        description: "",
        auditStatus: 0,
        cycleType: 0,
        startTime: "0",
        expireTime: "0",
        realFinishTime: "0",
        contributors: [],
        contributorsLength: 0,
        idStr: "",
        auditDescription: "",
        stats: undefined,
        goalExtraInfo: "",
        mode: 0,
        auditInfo: undefined,
        challengeType: "",
        isUneditable: false,
    };
}
exports.LiveStreamGoalDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
            writer.uint32(8).int64(message.id);
        }
        if (message.type !== 0) {
            writer.uint32(16).int32(message.type);
        }
        if (message.status !== 0) {
            writer.uint32(24).int32(message.status);
        }
        for (const v of message.subGoals) {
            exports.LiveStreamGoal_LiveStreamSubGoalDecoder.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.description !== "") {
            writer.uint32(42).string(message.description);
        }
        if (message.auditStatus !== 0) {
            writer.uint32(48).int32(message.auditStatus);
        }
        if (message.cycleType !== 0) {
            writer.uint32(56).int32(message.cycleType);
        }
        if (message.startTime !== "0") {
            writer.uint32(64).int64(message.startTime);
        }
        if (message.expireTime !== "0") {
            writer.uint32(72).int64(message.expireTime);
        }
        if (message.realFinishTime !== "0") {
            writer.uint32(80).int64(message.realFinishTime);
        }
        for (const v of message.contributors) {
            exports.LiveStreamGoal_LiveStreamGoalContributorDecoder.encode(v, writer.uint32(90).fork()).join();
        }
        if (message.contributorsLength !== 0) {
            writer.uint32(96).int32(message.contributorsLength);
        }
        if (message.idStr !== "") {
            writer.uint32(106).string(message.idStr);
        }
        if (message.auditDescription !== "") {
            writer.uint32(114).string(message.auditDescription);
        }
        if (message.stats !== undefined) {
            exports.LiveStreamGoal_GoalStatsDecoder.encode(message.stats, writer.uint32(122).fork()).join();
        }
        if (message.goalExtraInfo !== "") {
            writer.uint32(130).string(message.goalExtraInfo);
        }
        if (message.mode !== 0) {
            writer.uint32(136).int32(message.mode);
        }
        if (message.auditInfo !== undefined) {
            exports.LiveStreamGoal_AuditInfoDecoder.encode(message.auditInfo, writer.uint32(146).fork()).join();
        }
        if (message.challengeType !== "") {
            writer.uint32(162).string(message.challengeType);
        }
        if (message.isUneditable !== false) {
            writer.uint32(168).bool(message.isUneditable);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.subGoals.push(exports.LiveStreamGoal_LiveStreamSubGoalDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.auditStatus = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.cycleType = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.startTime = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.expireTime = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.realFinishTime = reader.int64().toString();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.contributors.push(exports.LiveStreamGoal_LiveStreamGoalContributorDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.contributorsLength = reader.int32();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.idStr = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.auditDescription = reader.string();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.stats = exports.LiveStreamGoal_GoalStatsDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.goalExtraInfo = reader.string();
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.mode = reader.int32();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.auditInfo = exports.LiveStreamGoal_AuditInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.challengeType = reader.string();
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.isUneditable = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLiveStreamGoal_AuditInfo() {
    return { violationId: "0", taskType: 0 };
}
exports.LiveStreamGoal_AuditInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.violationId !== "0") {
            writer.uint32(8).int64(message.violationId);
        }
        if (message.taskType !== 0) {
            writer.uint32(16).int32(message.taskType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal_AuditInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.violationId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.taskType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLiveStreamGoal_LiveStreamSubGoal() {
    return {
        type: 0,
        id: "0",
        progress: "0",
        target: "0",
        gift: undefined,
        idStr: "",
        pinInfo: undefined,
        source: 0,
        recommendedText: "",
        recommendedHeader: "",
    };
}
exports.LiveStreamGoal_LiveStreamSubGoalDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.id !== "0") {
            writer.uint32(16).int64(message.id);
        }
        if (message.progress !== "0") {
            writer.uint32(24).int64(message.progress);
        }
        if (message.target !== "0") {
            writer.uint32(32).int64(message.target);
        }
        if (message.gift !== undefined) {
            exports.LiveStreamGoal_LiveStreamSubGoalGiftDecoder.encode(message.gift, writer.uint32(42).fork()).join();
        }
        if (message.idStr !== "") {
            writer.uint32(50).string(message.idStr);
        }
        if (message.pinInfo !== undefined) {
            exports.LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfoDecoder.encode(message.pinInfo, writer.uint32(58).fork()).join();
        }
        if (message.source !== 0) {
            writer.uint32(64).int32(message.source);
        }
        if (message.recommendedText !== "") {
            writer.uint32(74).string(message.recommendedText);
        }
        if (message.recommendedHeader !== "") {
            writer.uint32(82).string(message.recommendedHeader);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal_LiveStreamSubGoal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.id = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.progress = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.target = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.gift = exports.LiveStreamGoal_LiveStreamSubGoalGiftDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.idStr = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.pinInfo = exports.LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.source = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.recommendedText = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.recommendedHeader = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo() {
    return { pinStartTime: "0", pinEndTime: "0", pinReadyTime: "0" };
}
exports.LiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pinStartTime !== "0") {
            writer.uint32(8).int64(message.pinStartTime);
        }
        if (message.pinEndTime !== "0") {
            writer.uint32(16).int64(message.pinEndTime);
        }
        if (message.pinReadyTime !== "0") {
            writer.uint32(24).int64(message.pinReadyTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal_LiveStreamSubGoal_SubGoalPinInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pinStartTime = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.pinEndTime = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.pinReadyTime = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLiveStreamGoal_LiveStreamSubGoalGift() {
    return { name: "", icon: undefined, diamondCount: "0", type: 0 };
}
exports.LiveStreamGoal_LiveStreamSubGoalGiftDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.icon !== undefined) {
            exports.ImageDecoder.encode(message.icon, writer.uint32(18).fork()).join();
        }
        if (message.diamondCount !== "0") {
            writer.uint32(24).int64(message.diamondCount);
        }
        if (message.type !== 0) {
            writer.uint32(32).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal_LiveStreamSubGoalGift();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.icon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.diamondCount = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLiveStreamGoal_LiveStreamGoalContributor() {
    return {
        userId: "0",
        avatar: undefined,
        displayId: "",
        score: "0",
        userIdStr: "",
        inRoom: false,
        isFriend: false,
        followByOwner: false,
        isFistContribute: false,
        subGoalContributions: [],
    };
}
exports.LiveStreamGoal_LiveStreamGoalContributorDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.avatar !== undefined) {
            exports.ImageDecoder.encode(message.avatar, writer.uint32(18).fork()).join();
        }
        if (message.displayId !== "") {
            writer.uint32(26).string(message.displayId);
        }
        if (message.score !== "0") {
            writer.uint32(32).int64(message.score);
        }
        if (message.userIdStr !== "") {
            writer.uint32(42).string(message.userIdStr);
        }
        if (message.inRoom !== false) {
            writer.uint32(48).bool(message.inRoom);
        }
        if (message.isFriend !== false) {
            writer.uint32(56).bool(message.isFriend);
        }
        if (message.followByOwner !== false) {
            writer.uint32(72).bool(message.followByOwner);
        }
        if (message.isFistContribute !== false) {
            writer.uint32(80).bool(message.isFistContribute);
        }
        for (const v of message.subGoalContributions) {
            exports.LiveStreamGoal_LiveStreamGoalContributor_SubGoalContributionDecoder.encode(v, writer.uint32(90).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal_LiveStreamGoalContributor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.avatar = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.displayId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.score = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.userIdStr = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.inRoom = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.isFriend = reader.bool();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.followByOwner = reader.bool();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.isFistContribute = reader.bool();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.subGoalContributions.push(exports.LiveStreamGoal_LiveStreamGoalContributor_SubGoalContributionDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution() {
    return { id: "", contributionCount: "0" };
}
exports.LiveStreamGoal_LiveStreamGoalContributor_SubGoalContributionDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.contributionCount !== "0") {
            writer.uint32(16).int64(message.contributionCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal_LiveStreamGoalContributor_SubGoalContribution();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.contributionCount = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLiveStreamGoal_GoalStats() {
    return { totalCoins: "0", totalContributor: "0", comparison: undefined, totalNewFans: "0" };
}
exports.LiveStreamGoal_GoalStatsDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalCoins !== "0") {
            writer.uint32(8).int64(message.totalCoins);
        }
        if (message.totalContributor !== "0") {
            writer.uint32(16).int64(message.totalContributor);
        }
        if (message.comparison !== undefined) {
            exports.LiveStreamGoal_GoalStats_GoalComparisonDecoder.encode(message.comparison, writer.uint32(26).fork()).join();
        }
        if (message.totalNewFans !== "0") {
            writer.uint32(32).int64(message.totalNewFans);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal_GoalStats();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.totalCoins = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.totalContributor = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.comparison = exports.LiveStreamGoal_GoalStats_GoalComparisonDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.totalNewFans = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLiveStreamGoal_GoalStats_GoalComparison() {
    return { coinsIncr: "0", contributorIncr: "0" };
}
exports.LiveStreamGoal_GoalStats_GoalComparisonDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.coinsIncr !== "0") {
            writer.uint32(8).int64(message.coinsIncr);
        }
        if (message.contributorIncr !== "0") {
            writer.uint32(16).int64(message.contributorIncr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoal_GoalStats_GoalComparison();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.coinsIncr = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.contributorIncr = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLiveStreamGoalIndicator() {
    return { key: "", op: 0 };
}
exports.LiveStreamGoalIndicatorDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.op !== 0) {
            writer.uint32(16).int32(message.op);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLiveStreamGoalIndicator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.op = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseRanking() {
    return { type: "", label: "", color: undefined, details: [] };
}
exports.RankingDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.label !== "") {
            writer.uint32(18).string(message.label);
        }
        if (message.color !== undefined) {
            exports.TikTokColorDecoder.encode(message.color, writer.uint32(26).fork()).join();
        }
        for (const v of message.details) {
            exports.ValueLabelDecoder.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRanking();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.label = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.color = exports.TikTokColorDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.details.push(exports.ValueLabelDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseTikTokColor() {
    return { color: "", id: "0", data1: 0 };
}
exports.TikTokColorDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.color !== "") {
            writer.uint32(10).string(message.color);
        }
        if (message.id !== "0") {
            writer.uint32(32).uint64(message.id);
        }
        if (message.data1 !== 0) {
            writer.uint32(48).uint32(message.data1);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTikTokColor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.color = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.id = reader.uint64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.data1 = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseValueLabel() {
    return { data: 0, label: "", label2: "", label3: "" };
}
exports.ValueLabelDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.data !== 0) {
            writer.uint32(8).uint32(message.data);
        }
        if (message.label !== "") {
            writer.uint32(18).string(message.label);
        }
        if (message.label2 !== "") {
            writer.uint32(26).string(message.label2);
        }
        if (message.label3 !== "") {
            writer.uint32(90).string(message.label3);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseValueLabel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.data = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.label = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.label2 = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.label3 = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseTimeStampContainer() {
    return { timestamp1: "0", timestamp2: "0", timestamp3: "0" };
}
exports.TimeStampContainerDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.timestamp1 !== "0") {
            writer.uint32(8).uint64(message.timestamp1);
        }
        if (message.timestamp2 !== "0") {
            writer.uint32(16).uint64(message.timestamp2);
        }
        if (message.timestamp3 !== "0") {
            writer.uint32(24).uint64(message.timestamp3);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTimeStampContainer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.timestamp1 = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.timestamp2 = reader.uint64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.timestamp3 = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePollStartContent() {
    return { StartTime: "0", EndTime: "0", OptionList: [], Title: "", Operator: undefined };
}
exports.PollStartContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.StartTime !== "0") {
            writer.uint32(8).int64(message.StartTime);
        }
        if (message.EndTime !== "0") {
            writer.uint32(16).int64(message.EndTime);
        }
        for (const v of message.OptionList) {
            exports.PollOptionInfoDecoder.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.Title !== "") {
            writer.uint32(34).string(message.Title);
        }
        if (message.Operator !== undefined) {
            exports.UserDecoder.encode(message.Operator, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePollStartContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.StartTime = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.EndTime = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.OptionList.push(exports.PollOptionInfoDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.Title = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.Operator = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePollEndContent() {
    return { EndType: 0, OptionList: [], Operator: undefined };
}
exports.PollEndContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.EndType !== 0) {
            writer.uint32(8).int32(message.EndType);
        }
        for (const v of message.OptionList) {
            exports.PollOptionInfoDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.Operator !== undefined) {
            exports.UserDecoder.encode(message.Operator, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePollEndContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.EndType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.OptionList.push(exports.PollOptionInfoDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.Operator = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePollOptionInfo() {
    return { Votes: 0, DisplayContent: "", OptionIdx: 0, VoteUserList: [] };
}
exports.PollOptionInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.Votes !== 0) {
            writer.uint32(8).int32(message.Votes);
        }
        if (message.DisplayContent !== "") {
            writer.uint32(18).string(message.DisplayContent);
        }
        if (message.OptionIdx !== 0) {
            writer.uint32(24).int32(message.OptionIdx);
        }
        for (const v of message.VoteUserList) {
            exports.VoteUserDecoder.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePollOptionInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.Votes = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.DisplayContent = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.OptionIdx = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.VoteUserList.push(exports.VoteUserDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseVoteUser() {
    return { UserId: "0", NickName: "", AvatarThumb: undefined };
}
exports.VoteUserDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.UserId !== "0") {
            writer.uint32(8).int64(message.UserId);
        }
        if (message.NickName !== "") {
            writer.uint32(18).string(message.NickName);
        }
        if (message.AvatarThumb !== undefined) {
            exports.ImageDecoder.encode(message.AvatarThumb, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseVoteUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.UserId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.NickName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.AvatarThumb = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePollUpdateVotesContent() {
    return { OptionList: [] };
}
exports.PollUpdateVotesContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.OptionList) {
            exports.PollOptionInfoDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePollUpdateVotesContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.OptionList.push(exports.PollOptionInfoDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUserFanTicket() {
    return { UserId: "0", FanTicket: "0", MatchTotalScore: "0", MatchRank: 0 };
}
exports.UserFanTicketDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.UserId !== "0") {
            writer.uint32(8).int64(message.UserId);
        }
        if (message.FanTicket !== "0") {
            writer.uint32(16).int64(message.FanTicket);
        }
        if (message.MatchTotalScore !== "0") {
            writer.uint32(24).int64(message.MatchTotalScore);
        }
        if (message.MatchRank !== 0) {
            writer.uint32(32).int32(message.MatchRank);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserFanTicket();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.UserId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.FanTicket = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.MatchTotalScore = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.MatchRank = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseFanTicketRoomNoticeContent() {
    return {
        UserFanTicketList: [],
        TotalLinkMicFanTicket: "0",
        MatchId: "0",
        EventTime: "0",
        FanTicketIconUrl: "",
        playId: "0",
        playScene: 0,
    };
}
exports.FanTicketRoomNoticeContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.UserFanTicketList) {
            exports.UserFanTicketDecoder.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.TotalLinkMicFanTicket !== "0") {
            writer.uint32(16).int64(message.TotalLinkMicFanTicket);
        }
        if (message.MatchId !== "0") {
            writer.uint32(24).int64(message.MatchId);
        }
        if (message.EventTime !== "0") {
            writer.uint32(32).int64(message.EventTime);
        }
        if (message.FanTicketIconUrl !== "") {
            writer.uint32(42).string(message.FanTicketIconUrl);
        }
        if (message.playId !== "0") {
            writer.uint32(48).int64(message.playId);
        }
        if (message.playScene !== 0) {
            writer.uint32(56).int32(message.playScene);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFanTicketRoomNoticeContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.UserFanTicketList.push(exports.UserFanTicketDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.TotalLinkMicFanTicket = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.MatchId = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.EventTime = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.FanTicketIconUrl = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.playId = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.playScene = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerAcceptNoticeContent() {
    return { fromUserId: "0", fromRoomId: "0", toUserId: "0" };
}
exports.LinkerAcceptNoticeContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromUserId !== "0") {
            writer.uint32(8).int64(message.fromUserId);
        }
        if (message.fromRoomId !== "0") {
            writer.uint32(16).int64(message.fromRoomId);
        }
        if (message.toUserId !== "0") {
            writer.uint32(24).int64(message.toUserId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerAcceptNoticeContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.fromUserId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.fromRoomId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.toUserId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerCancelContent() {
    return { fromUserId: "0", toUserId: "0", cancelType: "0", actionId: "0" };
}
exports.LinkerCancelContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromUserId !== "0") {
            writer.uint32(8).int64(message.fromUserId);
        }
        if (message.toUserId !== "0") {
            writer.uint32(16).int64(message.toUserId);
        }
        if (message.cancelType !== "0") {
            writer.uint32(24).int64(message.cancelType);
        }
        if (message.actionId !== "0") {
            writer.uint32(32).int64(message.actionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerCancelContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.fromUserId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.toUserId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.cancelType = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.actionId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseListUser() {
    return {
        user: undefined,
        linkmicId: "0",
        linkmicIdStr: "",
        linkStatus: 0,
        linkType: 0,
        userPosition: 0,
        silenceStatus: 0,
        modifyTime: "0",
        linkerId: "0",
        roleType: 0,
    };
}
exports.ListUserDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(10).fork()).join();
        }
        if (message.linkmicId !== "0") {
            writer.uint32(16).int64(message.linkmicId);
        }
        if (message.linkmicIdStr !== "") {
            writer.uint32(26).string(message.linkmicIdStr);
        }
        if (message.linkStatus !== 0) {
            writer.uint32(32).int32(message.linkStatus);
        }
        if (message.linkType !== 0) {
            writer.uint32(40).int32(message.linkType);
        }
        if (message.userPosition !== 0) {
            writer.uint32(48).int32(message.userPosition);
        }
        if (message.silenceStatus !== 0) {
            writer.uint32(56).int32(message.silenceStatus);
        }
        if (message.modifyTime !== "0") {
            writer.uint32(64).int64(message.modifyTime);
        }
        if (message.linkerId !== "0") {
            writer.uint32(72).int64(message.linkerId);
        }
        if (message.roleType !== 0) {
            writer.uint32(80).int32(message.roleType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.linkmicId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.linkmicIdStr = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.linkStatus = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.linkType = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.userPosition = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.silenceStatus = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.modifyTime = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.linkerId = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.roleType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerCloseContent() {
    return {};
}
exports.LinkerCloseContentDecoder = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerCloseContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerCreateContent() {
    return { ownerId: "0", ownerRoomId: "0", linkType: "0" };
}
exports.LinkerCreateContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.ownerId !== "0") {
            writer.uint32(8).int64(message.ownerId);
        }
        if (message.ownerRoomId !== "0") {
            writer.uint32(16).int64(message.ownerRoomId);
        }
        if (message.linkType !== "0") {
            writer.uint32(24).int64(message.linkType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerCreateContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.ownerId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.ownerRoomId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.linkType = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerEnterContent() {
    return { linkedUsersList: [], anchorMultiLiveEnum: 0, anchorSettingInfo: undefined };
}
exports.LinkerEnterContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.linkedUsersList) {
            exports.ListUserDecoder.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.anchorMultiLiveEnum !== 0) {
            writer.uint32(16).int32(message.anchorMultiLiveEnum);
        }
        if (message.anchorSettingInfo !== undefined) {
            exports.MultiLiveAnchorPanelSettingsDecoder.encode(message.anchorSettingInfo, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerEnterContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.linkedUsersList.push(exports.ListUserDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.anchorMultiLiveEnum = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.anchorSettingInfo = exports.MultiLiveAnchorPanelSettingsDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerInviteContent() {
    return {
        fromUserId: "0",
        fromRoomId: "0",
        toRtcExtInfo: "",
        rtcJoinChannel: false,
        vendor: "0",
        secFromUserId: "",
        toLinkmicIdStr: "",
        fromUser: undefined,
        requiredMicIdx: "0",
        rtcExtInfoMap: {},
        multiLiveLayoutEnable: 0,
        multiLiveSetting: undefined,
        fromLinkmicIdStr: "",
        fromTopHostInfo: undefined,
        actionId: "0",
        linkedUsers: [],
        dialogInfo: undefined,
        punishEventInfo: undefined,
        fromRoomAgeRestricted: 0,
        abTestSetting: [],
        linkerInviteMsgExtra: undefined,
    };
}
exports.LinkerInviteContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromUserId !== "0") {
            writer.uint32(8).int64(message.fromUserId);
        }
        if (message.fromRoomId !== "0") {
            writer.uint32(16).int64(message.fromRoomId);
        }
        if (message.toRtcExtInfo !== "") {
            writer.uint32(26).string(message.toRtcExtInfo);
        }
        if (message.rtcJoinChannel !== false) {
            writer.uint32(32).bool(message.rtcJoinChannel);
        }
        if (message.vendor !== "0") {
            writer.uint32(40).int64(message.vendor);
        }
        if (message.secFromUserId !== "") {
            writer.uint32(50).string(message.secFromUserId);
        }
        if (message.toLinkmicIdStr !== "") {
            writer.uint32(58).string(message.toLinkmicIdStr);
        }
        if (message.fromUser !== undefined) {
            exports.UserDecoder.encode(message.fromUser, writer.uint32(66).fork()).join();
        }
        if (message.requiredMicIdx !== "0") {
            writer.uint32(72).int64(message.requiredMicIdx);
        }
        Object.entries(message.rtcExtInfoMap).forEach(([key, value]) => {
            exports.LinkerInviteContent_RtcExtInfoMapEntryDecoder.encode({ key: key, value }, writer.uint32(82).fork()).join();
        });
        if (message.multiLiveLayoutEnable !== 0) {
            writer.uint32(88).int32(message.multiLiveLayoutEnable);
        }
        if (message.multiLiveSetting !== undefined) {
            exports.MultiLiveAnchorPanelSettingsDecoder.encode(message.multiLiveSetting, writer.uint32(98).fork()).join();
        }
        if (message.fromLinkmicIdStr !== "") {
            writer.uint32(106).string(message.fromLinkmicIdStr);
        }
        if (message.fromTopHostInfo !== undefined) {
            exports.LinkerInviteContent_InviteTopHostInfoDecoder.encode(message.fromTopHostInfo, writer.uint32(130).fork()).join();
        }
        if (message.actionId !== "0") {
            writer.uint32(136).int64(message.actionId);
        }
        for (const v of message.linkedUsers) {
            exports.LinkerInviteContent_LinkmicUserInfoDecoder.encode(v, writer.uint32(146).fork()).join();
        }
        if (message.dialogInfo !== undefined) {
            exports.LinkerInviteContent_PerceptionDialogInfoDecoder.encode(message.dialogInfo, writer.uint32(154).fork()).join();
        }
        if (message.punishEventInfo !== undefined) {
            exports.PunishEventInfoDecoder.encode(message.punishEventInfo, writer.uint32(162).fork()).join();
        }
        if (message.fromRoomAgeRestricted !== 0) {
            writer.uint32(168).int32(message.fromRoomAgeRestricted);
        }
        for (const v of message.abTestSetting) {
            exports.LinkerInviteContent_CohostABTestSettingDecoder.encode(v, writer.uint32(186).fork()).join();
        }
        if (message.linkerInviteMsgExtra !== undefined) {
            exports.LinkerInviteContent_LinkerInviteMessageExtraDecoder.encode(message.linkerInviteMsgExtra, writer.uint32(810).fork())
                .join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.fromUserId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.fromRoomId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.toRtcExtInfo = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.rtcJoinChannel = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.vendor = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.secFromUserId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.toLinkmicIdStr = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.fromUser = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.requiredMicIdx = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    const entry10 = exports.LinkerInviteContent_RtcExtInfoMapEntryDecoder.decode(reader, reader.uint32());
                    if (entry10.value !== undefined) {
                        message.rtcExtInfoMap[entry10.key] = entry10.value;
                    }
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.multiLiveLayoutEnable = reader.int32();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.multiLiveSetting = exports.MultiLiveAnchorPanelSettingsDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.fromLinkmicIdStr = reader.string();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.fromTopHostInfo = exports.LinkerInviteContent_InviteTopHostInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.actionId = reader.int64().toString();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.linkedUsers.push(exports.LinkerInviteContent_LinkmicUserInfoDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.dialogInfo = exports.LinkerInviteContent_PerceptionDialogInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.punishEventInfo = exports.PunishEventInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.fromRoomAgeRestricted = reader.int32();
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.abTestSetting.push(exports.LinkerInviteContent_CohostABTestSettingDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 101: {
                    if (tag !== 810) {
                        break;
                    }
                    message.linkerInviteMsgExtra = exports.LinkerInviteContent_LinkerInviteMessageExtraDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerInviteContent_RtcExtInfoMapEntry() {
    return { key: "0", value: "" };
}
exports.LinkerInviteContent_RtcExtInfoMapEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
            writer.uint32(8).int64(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_RtcExtInfoMapEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerInviteContent_InviteTopHostInfo() {
    return { rankType: "", topIndex: "0" };
}
exports.LinkerInviteContent_InviteTopHostInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rankType !== "") {
            writer.uint32(10).string(message.rankType);
        }
        if (message.topIndex !== "0") {
            writer.uint32(16).int64(message.topIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_InviteTopHostInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rankType = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topIndex = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerInviteContent_LinkmicUserInfo() {
    return { userId: "0", linkmicIdStr: "", roomId: "0", linkedTime: "0" };
}
exports.LinkerInviteContent_LinkmicUserInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.linkmicIdStr !== "") {
            writer.uint32(18).string(message.linkmicIdStr);
        }
        if (message.roomId !== "0") {
            writer.uint32(24).int64(message.roomId);
        }
        if (message.linkedTime !== "0") {
            writer.uint32(32).int64(message.linkedTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_LinkmicUserInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.linkmicIdStr = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.roomId = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.linkedTime = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerInviteContent_PerceptionDialogInfo() {
    return {
        iconType: 0,
        title: undefined,
        subTitle: undefined,
        adviceActionText: undefined,
        defaultActionText: undefined,
        violationDetailUrl: "",
        scene: 0,
        targetUserId: "0",
        targetRoomId: "0",
        countDownTime: "0",
        showFeedback: false,
        feedbackOptions: [],
        policyTip: "0",
        appealPopup: 0,
    };
}
exports.LinkerInviteContent_PerceptionDialogInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.iconType !== 0) {
            writer.uint32(8).int32(message.iconType);
        }
        if (message.title !== undefined) {
            exports.TextDecoder.encode(message.title, writer.uint32(18).fork()).join();
        }
        if (message.subTitle !== undefined) {
            exports.TextDecoder.encode(message.subTitle, writer.uint32(26).fork()).join();
        }
        if (message.adviceActionText !== undefined) {
            exports.TextDecoder.encode(message.adviceActionText, writer.uint32(34).fork()).join();
        }
        if (message.defaultActionText !== undefined) {
            exports.TextDecoder.encode(message.defaultActionText, writer.uint32(42).fork()).join();
        }
        if (message.violationDetailUrl !== "") {
            writer.uint32(50).string(message.violationDetailUrl);
        }
        if (message.scene !== 0) {
            writer.uint32(56).int32(message.scene);
        }
        if (message.targetUserId !== "0") {
            writer.uint32(64).int64(message.targetUserId);
        }
        if (message.targetRoomId !== "0") {
            writer.uint32(72).int64(message.targetRoomId);
        }
        if (message.countDownTime !== "0") {
            writer.uint32(80).int64(message.countDownTime);
        }
        if (message.showFeedback !== false) {
            writer.uint32(88).bool(message.showFeedback);
        }
        for (const v of message.feedbackOptions) {
            exports.LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOptionDecoder.encode(v, writer.uint32(98).fork()).join();
        }
        if (message.policyTip !== "0") {
            writer.uint32(104).int64(message.policyTip);
        }
        if (message.appealPopup !== 0) {
            writer.uint32(112).int32(message.appealPopup);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_PerceptionDialogInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.iconType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.subTitle = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.adviceActionText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.defaultActionText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.violationDetailUrl = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.scene = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.targetUserId = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.targetRoomId = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.countDownTime = reader.int64().toString();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.showFeedback = reader.bool();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.feedbackOptions.push(exports.LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOptionDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.policyTip = reader.int64().toString();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.appealPopup = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption() {
    return { id: "0", contentKey: "" };
}
exports.LinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOptionDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
            writer.uint32(8).int64(message.id);
        }
        if (message.contentKey !== "") {
            writer.uint32(18).string(message.contentKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_PerceptionDialogInfo_PerceptionFeedbackOption();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.contentKey = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerInviteContent_CohostABTestSetting() {
    return { key: "0", value: undefined };
}
exports.LinkerInviteContent_CohostABTestSettingDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
            writer.uint32(8).int64(message.key);
        }
        if (message.value !== undefined) {
            exports.LinkerInviteContent_CohostABTestSetting_CohostABTestListDecoder.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_CohostABTestSetting();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.LinkerInviteContent_CohostABTestSetting_CohostABTestListDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerInviteContent_CohostABTestSetting_CohostABTestList() {
    return { abTestList: [] };
}
exports.LinkerInviteContent_CohostABTestSetting_CohostABTestListDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.abTestList) {
            exports.LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTestDecoder.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_CohostABTestSetting_CohostABTestList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.abTestList.push(exports.LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTestDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest() {
    return { abTestType: 0, group: "0" };
}
exports.LinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTestDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.abTestType !== 0) {
            writer.uint32(8).int32(message.abTestType);
        }
        if (message.group !== "0") {
            writer.uint32(16).int64(message.group);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_CohostABTestSetting_CohostABTestList_CohostABTest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.abTestType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.group = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerInviteContent_LinkerInviteMessageExtra() {
    return {
        matchType: 0,
        inviteType: 0,
        subType: 0,
        theme: "",
        duration: 0,
        layout: 0,
        tips: "",
        inviterRivalExtra: undefined,
        otherRivalExtra: [],
        topicInfo: undefined,
        algoRequestId: "",
    };
}
exports.LinkerInviteContent_LinkerInviteMessageExtraDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.matchType !== 0) {
            writer.uint32(8).int32(message.matchType);
        }
        if (message.inviteType !== 0) {
            writer.uint32(16).int32(message.inviteType);
        }
        if (message.subType !== 0) {
            writer.uint32(24).int32(message.subType);
        }
        if (message.theme !== "") {
            writer.uint32(34).string(message.theme);
        }
        if (message.duration !== 0) {
            writer.uint32(40).int32(message.duration);
        }
        if (message.layout !== 0) {
            writer.uint32(48).int32(message.layout);
        }
        if (message.tips !== "") {
            writer.uint32(58).string(message.tips);
        }
        if (message.inviterRivalExtra !== undefined) {
            exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtraDecoder.encode(message.inviterRivalExtra, writer.uint32(66).fork()).join();
        }
        for (const v of message.otherRivalExtra) {
            exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtraDecoder.encode(v, writer.uint32(74).fork()).join();
        }
        if (message.topicInfo !== undefined) {
            exports.CohostTopicDecoder.encode(message.topicInfo, writer.uint32(82).fork()).join();
        }
        if (message.algoRequestId !== "") {
            writer.uint32(90).string(message.algoRequestId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.matchType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.inviteType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.subType = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.theme = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.duration = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.layout = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.tips = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.inviterRivalExtra = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtraDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.otherRivalExtra.push(exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtraDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.topicInfo = exports.CohostTopicDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.algoRequestId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra() {
    return {
        textType: 0,
        text: "",
        label: "",
        userCount: 0,
        avatarThumb: undefined,
        displayId: "",
        authenticationInfo: undefined,
        nickname: "",
        followStatus: "0",
        mHashtag: undefined,
        userId: "0",
        isBestTeammate: false,
        optPairInfo: undefined,
        followerCount: "0",
    };
}
exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtraDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.textType !== 0) {
            writer.uint32(8).int32(message.textType);
        }
        if (message.text !== "") {
            writer.uint32(18).string(message.text);
        }
        if (message.label !== "") {
            writer.uint32(26).string(message.label);
        }
        if (message.userCount !== 0) {
            writer.uint32(32).int32(message.userCount);
        }
        if (message.avatarThumb !== undefined) {
            exports.ImageDecoder.encode(message.avatarThumb, writer.uint32(42).fork()).join();
        }
        if (message.displayId !== "") {
            writer.uint32(50).string(message.displayId);
        }
        if (message.authenticationInfo !== undefined) {
            exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfoDecoder.encode(message.authenticationInfo, writer.uint32(58).fork()).join();
        }
        if (message.nickname !== "") {
            writer.uint32(66).string(message.nickname);
        }
        if (message.followStatus !== "0") {
            writer.uint32(72).int64(message.followStatus);
        }
        if (message.mHashtag !== undefined) {
            exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_HashtagDecoder.encode(message.mHashtag, writer.uint32(82).fork()).join();
        }
        if (message.userId !== "0") {
            writer.uint32(96).int64(message.userId);
        }
        if (message.isBestTeammate !== false) {
            writer.uint32(104).bool(message.isBestTeammate);
        }
        if (message.optPairInfo !== undefined) {
            exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfoDecoder.encode(message.optPairInfo, writer.uint32(114).fork()).join();
        }
        if (message.followerCount !== "0") {
            writer.uint32(120).int64(message.followerCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.textType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.label = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.userCount = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.avatarThumb = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.displayId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.authenticationInfo = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.nickname = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.followStatus = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.mHashtag = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_HashtagDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.isBestTeammate = reader.bool();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.optPairInfo = exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.followerCount = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo() {
    return { customVerify: "", enterpriseVerifyReason: "", authenticationBadge: undefined };
}
exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customVerify !== "") {
            writer.uint32(10).string(message.customVerify);
        }
        if (message.enterpriseVerifyReason !== "") {
            writer.uint32(18).string(message.enterpriseVerifyReason);
        }
        if (message.authenticationBadge !== undefined) {
            exports.ImageDecoder.encode(message.authenticationBadge, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_AuthenticationInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customVerify = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.enterpriseVerifyReason = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.authenticationBadge = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag() {
    return { id: "0", title: "", image: undefined, namespace: 0 };
}
exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_HashtagDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
            writer.uint32(8).int64(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.image !== undefined) {
            exports.ImageDecoder.encode(message.image, writer.uint32(26).fork()).join();
        }
        if (message.namespace !== 0) {
            writer.uint32(32).int32(message.namespace);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_Hashtag();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.image = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.namespace = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo() {
    return { mappingId: "0", displayUserList: [], buttonNoticeType: 0, expectedTimeSec: "0", optPairType: "0" };
}
exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.mappingId !== "0") {
            writer.uint32(8).int64(message.mappingId);
        }
        for (const v of message.displayUserList) {
            exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUserDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.buttonNoticeType !== 0) {
            writer.uint32(24).int32(message.buttonNoticeType);
        }
        if (message.expectedTimeSec !== "0") {
            writer.uint32(32).int64(message.expectedTimeSec);
        }
        if (message.optPairType !== "0") {
            writer.uint32(40).int64(message.optPairType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.mappingId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.displayUserList.push(exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUserDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.buttonNoticeType = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.expectedTimeSec = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.optPairType = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser() {
    return { user: undefined, roomId: "0" };
}
exports.LinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUserDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(10).fork()).join();
        }
        if (message.roomId !== "0") {
            writer.uint32(16).int64(message.roomId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerInviteContent_LinkerInviteMessageExtra_InviterRivalExtra_OptPairInfo_OptPairUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.roomId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCohostTopic() {
    return { id: "0", titleKey: "", titleText: "", liked: false, totalHeat: "0", totalRivals: "0", rivalsAvatar: [] };
}
exports.CohostTopicDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
            writer.uint32(8).int64(message.id);
        }
        if (message.titleKey !== "") {
            writer.uint32(18).string(message.titleKey);
        }
        if (message.titleText !== "") {
            writer.uint32(26).string(message.titleText);
        }
        if (message.liked !== false) {
            writer.uint32(168).bool(message.liked);
        }
        if (message.totalHeat !== "0") {
            writer.uint32(176).int64(message.totalHeat);
        }
        if (message.totalRivals !== "0") {
            writer.uint32(184).int64(message.totalRivals);
        }
        for (const v of message.rivalsAvatar) {
            exports.ImageDecoder.encode(v, writer.uint32(194).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCohostTopic();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.titleKey = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.titleText = reader.string();
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.liked = reader.bool();
                    continue;
                }
                case 22: {
                    if (tag !== 176) {
                        break;
                    }
                    message.totalHeat = reader.int64().toString();
                    continue;
                }
                case 23: {
                    if (tag !== 184) {
                        break;
                    }
                    message.totalRivals = reader.int64().toString();
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.rivalsAvatar.push(exports.ImageDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerKickOutContent() {
    return { fromUserId: "0", kickoutReason: 0 };
}
exports.LinkerKickOutContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromUserId !== "0") {
            writer.uint32(8).int64(message.fromUserId);
        }
        if (message.kickoutReason !== 0) {
            writer.uint32(16).int32(message.kickoutReason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerKickOutContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.fromUserId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.kickoutReason = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerLeaveContent() {
    return { userId: "0", linkmicIdStr: "", sendLeaveUid: "0", leaveReason: "0" };
}
exports.LinkerLeaveContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.linkmicIdStr !== "") {
            writer.uint32(18).string(message.linkmicIdStr);
        }
        if (message.sendLeaveUid !== "0") {
            writer.uint32(24).int64(message.sendLeaveUid);
        }
        if (message.leaveReason !== "0") {
            writer.uint32(32).int64(message.leaveReason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerLeaveContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.linkmicIdStr = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.sendLeaveUid = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.leaveReason = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerLinkedListChangeContent() {
    return {};
}
exports.LinkerLinkedListChangeContentDecoder = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerLinkedListChangeContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCohostListChangeContent() {
    return {};
}
exports.CohostListChangeContentDecoder = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCohostListChangeContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerListChangeContent() {
    return { linkedUsers: [], appliedUsers: [], connectingUsers: [] };
}
exports.LinkerListChangeContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.linkedUsers) {
            exports.ListUserDecoder.encode(v, writer.uint32(10).fork()).join();
        }
        for (const v of message.appliedUsers) {
            exports.ListUserDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.connectingUsers) {
            exports.ListUserDecoder.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerListChangeContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.linkedUsers.push(exports.ListUserDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.appliedUsers.push(exports.ListUserDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.connectingUsers.push(exports.ListUserDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerMediaChangeContent() {
    return { op: 0, toUserId: "0", anchorId: "0", roomId: "0", changeScene: 0, operatorInfo: undefined };
}
exports.LinkerMediaChangeContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.op !== 0) {
            writer.uint32(8).int32(message.op);
        }
        if (message.toUserId !== "0") {
            writer.uint32(16).int64(message.toUserId);
        }
        if (message.anchorId !== "0") {
            writer.uint32(24).int64(message.anchorId);
        }
        if (message.roomId !== "0") {
            writer.uint32(32).int64(message.roomId);
        }
        if (message.changeScene !== 0) {
            writer.uint32(40).int32(message.changeScene);
        }
        if (message.operatorInfo !== undefined) {
            exports.LinkerMediaChangeContent_LinkerMediaChangeOperatorDecoder.encode(message.operatorInfo, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerMediaChangeContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.op = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.toUserId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.anchorId = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.roomId = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.changeScene = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.operatorInfo = exports.LinkerMediaChangeContent_LinkerMediaChangeOperatorDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerMediaChangeContent_LinkerMediaChangeOperator() {
    return { userId: "0", operatorType: 0, nickName: "", displayId: "" };
}
exports.LinkerMediaChangeContent_LinkerMediaChangeOperatorDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.operatorType !== 0) {
            writer.uint32(16).int32(message.operatorType);
        }
        if (message.nickName !== "") {
            writer.uint32(26).string(message.nickName);
        }
        if (message.displayId !== "") {
            writer.uint32(34).string(message.displayId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerMediaChangeContent_LinkerMediaChangeOperator();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.operatorType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.nickName = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.displayId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerMicIdxUpdateContent() {
    return {};
}
exports.LinkerMicIdxUpdateContentDecoder = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerMicIdxUpdateContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerMuteContent() {
    return { userId: "0", status: 0 };
}
exports.LinkerMuteContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.status !== 0) {
            writer.uint32(16).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerMuteContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerRandomMatchContent() {
    return { user: undefined, roomId: "0", inviteType: "0", matchId: "", innerChannelId: "0" };
}
exports.LinkerRandomMatchContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(10).fork()).join();
        }
        if (message.roomId !== "0") {
            writer.uint32(16).int64(message.roomId);
        }
        if (message.inviteType !== "0") {
            writer.uint32(24).int64(message.inviteType);
        }
        if (message.matchId !== "") {
            writer.uint32(34).string(message.matchId);
        }
        if (message.innerChannelId !== "0") {
            writer.uint32(40).int64(message.innerChannelId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerRandomMatchContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.roomId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.inviteType = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.matchId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.innerChannelId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerReplyContent() {
    return {
        fromUserId: "0",
        fromRoomId: "0",
        fromUserLinkmicInfo: undefined,
        toUserId: "0",
        toUserLinkmicInfo: undefined,
        linkType: "0",
        replyStatus: "0",
        linkerSetting: undefined,
        fromUser: undefined,
        toUser: undefined,
    };
}
exports.LinkerReplyContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromUserId !== "0") {
            writer.uint32(8).int64(message.fromUserId);
        }
        if (message.fromRoomId !== "0") {
            writer.uint32(16).int64(message.fromRoomId);
        }
        if (message.fromUserLinkmicInfo !== undefined) {
            exports.LinkerReplyContent_LinkmicInfoDecoder.encode(message.fromUserLinkmicInfo, writer.uint32(26).fork()).join();
        }
        if (message.toUserId !== "0") {
            writer.uint32(32).int64(message.toUserId);
        }
        if (message.toUserLinkmicInfo !== undefined) {
            exports.LinkerReplyContent_LinkmicInfoDecoder.encode(message.toUserLinkmicInfo, writer.uint32(42).fork()).join();
        }
        if (message.linkType !== "0") {
            writer.uint32(48).int64(message.linkType);
        }
        if (message.replyStatus !== "0") {
            writer.uint32(56).int64(message.replyStatus);
        }
        if (message.linkerSetting !== undefined) {
            exports.LinkerSettingDecoder.encode(message.linkerSetting, writer.uint32(66).fork()).join();
        }
        if (message.fromUser !== undefined) {
            exports.UserDecoder.encode(message.fromUser, writer.uint32(74).fork()).join();
        }
        if (message.toUser !== undefined) {
            exports.UserDecoder.encode(message.toUser, writer.uint32(82).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerReplyContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.fromUserId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.fromRoomId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.fromUserLinkmicInfo = exports.LinkerReplyContent_LinkmicInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.toUserId = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.toUserLinkmicInfo = exports.LinkerReplyContent_LinkmicInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.linkType = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.replyStatus = reader.int64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.linkerSetting = exports.LinkerSettingDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.fromUser = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.toUser = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerReplyContent_LinkmicInfo() {
    return {
        accessKey: "",
        linkMicId: "0",
        joinable: false,
        confluenceType: 0,
        rtcExtInfo: "",
        rtcAppId: "",
        rtcAppSign: "",
        linkmicIdStr: "",
        vendor: "0",
    };
}
exports.LinkerReplyContent_LinkmicInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.accessKey !== "") {
            writer.uint32(10).string(message.accessKey);
        }
        if (message.linkMicId !== "0") {
            writer.uint32(16).int64(message.linkMicId);
        }
        if (message.joinable !== false) {
            writer.uint32(24).bool(message.joinable);
        }
        if (message.confluenceType !== 0) {
            writer.uint32(32).int32(message.confluenceType);
        }
        if (message.rtcExtInfo !== "") {
            writer.uint32(42).string(message.rtcExtInfo);
        }
        if (message.rtcAppId !== "") {
            writer.uint32(50).string(message.rtcAppId);
        }
        if (message.rtcAppSign !== "") {
            writer.uint32(58).string(message.rtcAppSign);
        }
        if (message.linkmicIdStr !== "") {
            writer.uint32(66).string(message.linkmicIdStr);
        }
        if (message.vendor !== "0") {
            writer.uint32(72).int64(message.vendor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerReplyContent_LinkmicInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.accessKey = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.linkMicId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.joinable = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.confluenceType = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.rtcExtInfo = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.rtcAppId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.rtcAppSign = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.linkmicIdStr = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.vendor = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerSetting() {
    return { MaxMemberLimit: "0", LinkType: "0", Scene: 0, OwnerUserId: "0", OwnerRoomId: "0", Vendor: "0" };
}
exports.LinkerSettingDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.MaxMemberLimit !== "0") {
            writer.uint32(8).int64(message.MaxMemberLimit);
        }
        if (message.LinkType !== "0") {
            writer.uint32(16).int64(message.LinkType);
        }
        if (message.Scene !== 0) {
            writer.uint32(24).int32(message.Scene);
        }
        if (message.OwnerUserId !== "0") {
            writer.uint32(32).int64(message.OwnerUserId);
        }
        if (message.OwnerRoomId !== "0") {
            writer.uint32(40).int64(message.OwnerRoomId);
        }
        if (message.Vendor !== "0") {
            writer.uint32(48).int64(message.Vendor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerSetting();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.MaxMemberLimit = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.LinkType = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.Scene = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.OwnerUserId = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.OwnerRoomId = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.Vendor = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerSysKickOutContent() {
    return { userId: "0", linkmicIdStr: "" };
}
exports.LinkerSysKickOutContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.linkmicIdStr !== "") {
            writer.uint32(18).string(message.linkmicIdStr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerSysKickOutContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.linkmicIdStr = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkmicUserToastContent() {
    return { userId: "0", roomId: "0", displayText: undefined, leavedUserId: "0" };
}
exports.LinkmicUserToastContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.roomId !== "0") {
            writer.uint32(16).int64(message.roomId);
        }
        if (message.displayText !== undefined) {
            exports.TextDecoder.encode(message.displayText, writer.uint32(26).fork()).join();
        }
        if (message.leavedUserId !== "0") {
            writer.uint32(32).int64(message.leavedUserId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkmicUserToastContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.roomId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.displayText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.leavedUserId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerUpdateUserContent() {
    return { fromUserId: "0", toUserId: "0", updateInfo: {} };
}
exports.LinkerUpdateUserContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromUserId !== "0") {
            writer.uint32(8).int64(message.fromUserId);
        }
        if (message.toUserId !== "0") {
            writer.uint32(16).int64(message.toUserId);
        }
        Object.entries(message.updateInfo).forEach(([key, value]) => {
            exports.LinkerUpdateUserContent_UpdateInfoEntryDecoder.encode({ key: key, value }, writer.uint32(26).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerUpdateUserContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.fromUserId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.toUserId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.LinkerUpdateUserContent_UpdateInfoEntryDecoder.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.updateInfo[entry3.key] = entry3.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerUpdateUserContent_UpdateInfoEntry() {
    return { key: "", value: "" };
}
exports.LinkerUpdateUserContent_UpdateInfoEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerUpdateUserContent_UpdateInfoEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerUpdateUserSettingContent() {
    return { multiLiveAnchorPanelSettings: undefined };
}
exports.LinkerUpdateUserSettingContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.multiLiveAnchorPanelSettings !== undefined) {
            exports.MultiLiveAnchorPanelSettingsDecoder.encode(message.multiLiveAnchorPanelSettings, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerUpdateUserSettingContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.multiLiveAnchorPanelSettings = exports.MultiLiveAnchorPanelSettingsDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkerWaitingListChangeContent() {
    return {};
}
exports.LinkerWaitingListChangeContentDecoder = {
    encode(_, writer = new wire_1.BinaryWriter()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkerWaitingListChangeContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseMultiLiveAnchorPanelSettings() {
    return {
        userId: "0",
        layout: "0",
        fixMicNum: "0",
        allowRequestFromUser: "0",
        allowRequestFromFollowerOnly: "0",
        applierSortSetting: 0,
        applierSortGiftScoreThreshold: "0",
        allowRequestFromFriends: 0,
        allowRequestFromFollowers: 0,
        allowRequestFromOthers: 0,
        enableShowMultiGuestLayout: 0,
    };
}
exports.MultiLiveAnchorPanelSettingsDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.layout !== "0") {
            writer.uint32(16).int64(message.layout);
        }
        if (message.fixMicNum !== "0") {
            writer.uint32(24).int64(message.fixMicNum);
        }
        if (message.allowRequestFromUser !== "0") {
            writer.uint32(32).int64(message.allowRequestFromUser);
        }
        if (message.allowRequestFromFollowerOnly !== "0") {
            writer.uint32(40).int64(message.allowRequestFromFollowerOnly);
        }
        if (message.applierSortSetting !== 0) {
            writer.uint32(56).int32(message.applierSortSetting);
        }
        if (message.applierSortGiftScoreThreshold !== "0") {
            writer.uint32(64).int64(message.applierSortGiftScoreThreshold);
        }
        if (message.allowRequestFromFriends !== 0) {
            writer.uint32(72).int32(message.allowRequestFromFriends);
        }
        if (message.allowRequestFromFollowers !== 0) {
            writer.uint32(80).int32(message.allowRequestFromFollowers);
        }
        if (message.allowRequestFromOthers !== 0) {
            writer.uint32(88).int32(message.allowRequestFromOthers);
        }
        if (message.enableShowMultiGuestLayout !== 0) {
            writer.uint32(96).int32(message.enableShowMultiGuestLayout);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultiLiveAnchorPanelSettings();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.layout = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.fixMicNum = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.allowRequestFromUser = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.allowRequestFromFollowerOnly = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.applierSortSetting = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.applierSortGiftScoreThreshold = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.allowRequestFromFriends = reader.int32();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.allowRequestFromFollowers = reader.int32();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.allowRequestFromOthers = reader.int32();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.enableShowMultiGuestLayout = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePlayer() {
    return { roomId: "0", userId: "0" };
}
exports.PlayerDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.roomId !== "0") {
            writer.uint32(8).int64(message.roomId);
        }
        if (message.userId !== "0") {
            writer.uint32(16).int64(message.userId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePlayer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.roomId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseAllListUser() {
    return { linkedList: [], appliedList: [], invitedList: [], readyList: [] };
}
exports.AllListUserDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.linkedList) {
            exports.LinkLayerListUserDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        for (const v of message.appliedList) {
            exports.LinkLayerListUserDecoder.encode(v, writer.uint32(26).fork()).join();
        }
        for (const v of message.invitedList) {
            exports.LinkLayerListUserDecoder.encode(v, writer.uint32(34).fork()).join();
        }
        for (const v of message.readyList) {
            exports.LinkLayerListUserDecoder.encode(v, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAllListUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.linkedList.push(exports.LinkLayerListUserDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.appliedList.push(exports.LinkLayerListUserDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.invitedList.push(exports.LinkLayerListUserDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.readyList.push(exports.LinkLayerListUserDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkLayerListUser() {
    return { user: undefined, linkmicId: "0", pos: undefined, linkedTimeNano: "0", appVersion: "", magicNumber1: "0" };
}
exports.LinkLayerListUserDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(10).fork()).join();
        }
        if (message.linkmicId !== "0") {
            writer.uint32(16).int64(message.linkmicId);
        }
        if (message.pos !== undefined) {
            exports.PositionDecoder.encode(message.pos, writer.uint32(26).fork()).join();
        }
        if (message.linkedTimeNano !== "0") {
            writer.uint32(32).int64(message.linkedTimeNano);
        }
        if (message.appVersion !== "") {
            writer.uint32(42).string(message.appVersion);
        }
        if (message.magicNumber1 !== "0") {
            writer.uint32(56).int64(message.magicNumber1);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkLayerListUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.linkmicId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.pos = exports.PositionDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.linkedTimeNano = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.appVersion = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.magicNumber1 = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePosition() {
    return { type: 0, link: undefined };
}
exports.PositionDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.link !== undefined) {
            exports.LinkPositionDecoder.encode(message.link, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePosition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.link = exports.LinkPositionDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLinkPosition() {
    return { position: 0, opt: 0 };
}
exports.LinkPositionDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.position !== 0) {
            writer.uint32(8).int32(message.position);
        }
        if (message.opt !== 0) {
            writer.uint32(16).int32(message.opt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLinkPosition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.position = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.opt = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGroupPlayer() {
    return { channelId: "0", user: undefined };
}
exports.GroupPlayerDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.channelId !== "0") {
            writer.uint32(8).int64(message.channelId);
        }
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupPlayer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.channelId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseDSLConfig() {
    return { sceneVersion: 0, layoutId: "" };
}
exports.DSLConfigDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sceneVersion !== 0) {
            writer.uint32(8).int32(message.sceneVersion);
        }
        if (message.layoutId !== "") {
            writer.uint32(18).string(message.layoutId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseDSLConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.sceneVersion = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.layoutId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGroupChannelAllUser() {
    return { groupChannelId: "0", userList: [], contentVersion: "0" };
}
exports.GroupChannelAllUserDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.groupChannelId !== "0") {
            writer.uint32(8).int64(message.groupChannelId);
        }
        for (const v of message.userList) {
            exports.GroupChannelUserDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.contentVersion !== "0") {
            writer.uint32(24).int64(message.contentVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupChannelAllUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.groupChannelId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userList.push(exports.GroupChannelUserDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.contentVersion = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGroupChannelUser() {
    return {
        channelId: "0",
        status: 0,
        type: 0,
        allUser: undefined,
        joinTime: "0",
        linkedTime: "0",
        ownerUser: undefined,
        groupLinkmicId: "",
    };
}
exports.GroupChannelUserDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.channelId !== "0") {
            writer.uint32(8).int64(message.channelId);
        }
        if (message.status !== 0) {
            writer.uint32(16).int32(message.status);
        }
        if (message.type !== 0) {
            writer.uint32(24).int32(message.type);
        }
        if (message.allUser !== undefined) {
            exports.AllListUserDecoder.encode(message.allUser, writer.uint32(34).fork()).join();
        }
        if (message.joinTime !== "0") {
            writer.uint32(40).int64(message.joinTime);
        }
        if (message.linkedTime !== "0") {
            writer.uint32(48).int64(message.linkedTime);
        }
        if (message.ownerUser !== undefined) {
            exports.GroupPlayerDecoder.encode(message.ownerUser, writer.uint32(58).fork()).join();
        }
        if (message.groupLinkmicId !== "") {
            writer.uint32(66).string(message.groupLinkmicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupChannelUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.channelId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.allUser = exports.AllListUserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.joinTime = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.linkedTime = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.ownerUser = exports.GroupPlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.groupLinkmicId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseRTCExtraInfo() {
    return {
        liveRtcEngineConfig: undefined,
        liveRtcVideoParamList: [],
        rtcBitrateMap: undefined,
        rtcFps: 0,
        rtcMixBase: undefined,
        byteRtcExtInfo: undefined,
        rtcInfoExtra: undefined,
        rtcBusinessId: "",
        rtcOther: undefined,
        interactClientType: 0,
    };
}
exports.RTCExtraInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.liveRtcEngineConfig !== undefined) {
            exports.RTCExtraInfo_RTCEngineConfigDecoder.encode(message.liveRtcEngineConfig, writer.uint32(10).fork()).join();
        }
        for (const v of message.liveRtcVideoParamList) {
            exports.RTCExtraInfo_RTCLiveVideoParamDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.rtcBitrateMap !== undefined) {
            exports.RTCExtraInfo_RTCBitrateMapDecoder.encode(message.rtcBitrateMap, writer.uint32(26).fork()).join();
        }
        if (message.rtcFps !== 0) {
            writer.uint32(32).int32(message.rtcFps);
        }
        if (message.rtcMixBase !== undefined) {
            exports.RTCExtraInfo_RTCMixBaseDecoder.encode(message.rtcMixBase, writer.uint32(42).fork()).join();
        }
        if (message.byteRtcExtInfo !== undefined) {
            exports.RTCExtraInfo_ByteRTCExtInfoDecoder.encode(message.byteRtcExtInfo, writer.uint32(50).fork()).join();
        }
        if (message.rtcInfoExtra !== undefined) {
            exports.RTCExtraInfo_RTCInfoExtraDecoder.encode(message.rtcInfoExtra, writer.uint32(58).fork()).join();
        }
        if (message.rtcBusinessId !== "") {
            writer.uint32(66).string(message.rtcBusinessId);
        }
        if (message.rtcOther !== undefined) {
            exports.RTCExtraInfo_RTCOtherDecoder.encode(message.rtcOther, writer.uint32(74).fork()).join();
        }
        if (message.interactClientType !== 0) {
            writer.uint32(80).int32(message.interactClientType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.liveRtcEngineConfig = exports.RTCExtraInfo_RTCEngineConfigDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.liveRtcVideoParamList.push(exports.RTCExtraInfo_RTCLiveVideoParamDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.rtcBitrateMap = exports.RTCExtraInfo_RTCBitrateMapDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.rtcFps = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.rtcMixBase = exports.RTCExtraInfo_RTCMixBaseDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.byteRtcExtInfo = exports.RTCExtraInfo_ByteRTCExtInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.rtcInfoExtra = exports.RTCExtraInfo_RTCInfoExtraDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.rtcBusinessId = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.rtcOther = exports.RTCExtraInfo_RTCOtherDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.interactClientType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseRTCExtraInfo_RTCMixBase() {
    return { bitrate: 0 };
}
exports.RTCExtraInfo_RTCMixBaseDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.bitrate !== 0) {
            writer.uint32(8).int32(message.bitrate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo_RTCMixBase();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.bitrate = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseRTCExtraInfo_ByteRTCExtInfo() {
    return { defaultSignaling: 0 };
}
exports.RTCExtraInfo_ByteRTCExtInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.defaultSignaling !== 0) {
            writer.uint32(8).int32(message.defaultSignaling);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo_ByteRTCExtInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.defaultSignaling = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseRTCExtraInfo_RTCInfoExtra() {
    return { version: "" };
}
exports.RTCExtraInfo_RTCInfoExtraDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo_RTCInfoExtra();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseRTCExtraInfo_RTCOther() {
    return { transCodingSecond: 0 };
}
exports.RTCExtraInfo_RTCOtherDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.transCodingSecond !== 0) {
            writer.uint32(8).int32(message.transCodingSecond);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo_RTCOther();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.transCodingSecond = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseRTCExtraInfo_RTCEngineConfig() {
    return { rtcAppId: "", rtcUserId: "", rtcToken: "", rtcChannelId: "0" };
}
exports.RTCExtraInfo_RTCEngineConfigDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rtcAppId !== "") {
            writer.uint32(10).string(message.rtcAppId);
        }
        if (message.rtcUserId !== "") {
            writer.uint32(18).string(message.rtcUserId);
        }
        if (message.rtcToken !== "") {
            writer.uint32(26).string(message.rtcToken);
        }
        if (message.rtcChannelId !== "0") {
            writer.uint32(32).int64(message.rtcChannelId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo_RTCEngineConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rtcAppId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.rtcUserId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.rtcToken = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.rtcChannelId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseRTCExtraInfo_RTCLiveVideoParam() {
    return { strategyId: 0, params: undefined };
}
exports.RTCExtraInfo_RTCLiveVideoParamDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.strategyId !== 0) {
            writer.uint32(8).int32(message.strategyId);
        }
        if (message.params !== undefined) {
            exports.RTCExtraInfo_RTCVideoParamDecoder.encode(message.params, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo_RTCLiveVideoParam();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.strategyId = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.params = exports.RTCExtraInfo_RTCVideoParamDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseRTCExtraInfo_RTCVideoParam() {
    return { width: 0, height: 0, fps: 0, bitrateKbps: 0 };
}
exports.RTCExtraInfo_RTCVideoParamDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.width !== 0) {
            writer.uint32(8).int32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(16).int32(message.height);
        }
        if (message.fps !== 0) {
            writer.uint32(24).int32(message.fps);
        }
        if (message.bitrateKbps !== 0) {
            writer.uint32(32).int32(message.bitrateKbps);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo_RTCVideoParam();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.width = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.fps = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.bitrateKbps = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseRTCExtraInfo_RTCBitrateMap() {
    return { xx1: 0, xx2: 0, xx3: 0, xx4: 0 };
}
exports.RTCExtraInfo_RTCBitrateMapDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.xx1 !== 0) {
            writer.uint32(8).int32(message.xx1);
        }
        if (message.xx2 !== 0) {
            writer.uint32(16).int32(message.xx2);
        }
        if (message.xx3 !== 0) {
            writer.uint32(24).int32(message.xx3);
        }
        if (message.xx4 !== 0) {
            writer.uint32(32).int32(message.xx4);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRTCExtraInfo_RTCBitrateMap();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.xx1 = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.xx2 = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.xx3 = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.xx4 = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCreateChannelContent() {
    return { owner: undefined, ownerLinkMicId: "" };
}
exports.CreateChannelContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.owner !== undefined) {
            exports.PlayerDecoder.encode(message.owner, writer.uint32(10).fork()).join();
        }
        if (message.ownerLinkMicId !== "") {
            writer.uint32(18).string(message.ownerLinkMicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCreateChannelContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.owner = exports.PlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ownerLinkMicId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseListChangeContent() {
    return { listChangeType: 0, userList: undefined, linkedUserUiPositions: [], contentPos: [] };
}
exports.ListChangeContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.listChangeType !== 0) {
            writer.uint32(8).int32(message.listChangeType);
        }
        if (message.userList !== undefined) {
            exports.AllListUserDecoder.encode(message.userList, writer.uint32(18).fork()).join();
        }
        for (const v of message.linkedUserUiPositions) {
            writer.uint32(26).string(v);
        }
        for (const v of message.contentPos) {
            exports.ContentPositionDecoder.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseListChangeContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.listChangeType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.userList = exports.AllListUserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.linkedUserUiPositions.push(reader.string());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.contentPos.push(exports.ContentPositionDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseContentPosition() {
    return { contentID: "", contentType: 0, pos: undefined, contentLinkmicID: "", startTimeNano: "0" };
}
exports.ContentPositionDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.contentID !== "") {
            writer.uint32(10).string(message.contentID);
        }
        if (message.contentType !== 0) {
            writer.uint32(16).int32(message.contentType);
        }
        if (message.pos !== undefined) {
            exports.MicPositionDataDecoder.encode(message.pos, writer.uint32(26).fork()).join();
        }
        if (message.contentLinkmicID !== "") {
            writer.uint32(34).string(message.contentLinkmicID);
        }
        if (message.startTimeNano !== "0") {
            writer.uint32(40).int64(message.startTimeNano);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseContentPosition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.contentID = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.contentType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.pos = exports.MicPositionDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.contentLinkmicID = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.startTimeNano = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseMicPositionData() {
    return { type: 0, linkPosition: undefined };
}
exports.MicPositionDataDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.linkPosition !== undefined) {
            exports.LinkPositionDecoder.encode(message.linkPosition, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMicPositionData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.linkPosition = exports.LinkPositionDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseMultiLiveContent() {
    return {
        applyBizContent: undefined,
        inviteBizContent: undefined,
        replyBizContent: undefined,
        permitBizContent: undefined,
        joinDirectBizContent: undefined,
        kickOutBizContent: undefined,
    };
}
exports.MultiLiveContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.applyBizContent !== undefined) {
            exports.MultiLiveContent_ApplyBizContentDecoder.encode(message.applyBizContent, writer.uint32(10).fork()).join();
        }
        if (message.inviteBizContent !== undefined) {
            exports.MultiLiveContent_InviteBizContentDecoder.encode(message.inviteBizContent, writer.uint32(18).fork()).join();
        }
        if (message.replyBizContent !== undefined) {
            exports.MultiLiveContent_ReplyBizContentDecoder.encode(message.replyBizContent, writer.uint32(26).fork()).join();
        }
        if (message.permitBizContent !== undefined) {
            exports.MultiLiveContent_PermitBizContentDecoder.encode(message.permitBizContent, writer.uint32(34).fork()).join();
        }
        if (message.joinDirectBizContent !== undefined) {
            exports.MultiLiveContent_JoinDirectBizContentDecoder.encode(message.joinDirectBizContent, writer.uint32(42).fork()).join();
        }
        if (message.kickOutBizContent !== undefined) {
            exports.MultiLiveContent_KickOutBizContentDecoder.encode(message.kickOutBizContent, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultiLiveContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.applyBizContent = exports.MultiLiveContent_ApplyBizContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.inviteBizContent = exports.MultiLiveContent_InviteBizContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.replyBizContent = exports.MultiLiveContent_ReplyBizContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.permitBizContent = exports.MultiLiveContent_PermitBizContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.joinDirectBizContent = exports.MultiLiveContent_JoinDirectBizContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.kickOutBizContent = exports.MultiLiveContent_KickOutBizContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseMultiLiveContent_ApplyBizContent() {
    return { user: undefined };
}
exports.MultiLiveContent_ApplyBizContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultiLiveContent_ApplyBizContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseMultiLiveContent_JoinDirectBizContent() {
    return { replyImMsgId: "0", outsideRoomInviteSource: 0 };
}
exports.MultiLiveContent_JoinDirectBizContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.replyImMsgId !== "0") {
            writer.uint32(8).int64(message.replyImMsgId);
        }
        if (message.outsideRoomInviteSource !== 0) {
            writer.uint32(16).int32(message.outsideRoomInviteSource);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultiLiveContent_JoinDirectBizContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.replyImMsgId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.outsideRoomInviteSource = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseMultiLiveContent_InviteBizContent() {
    return {
        anchorSettingInfo: undefined,
        inviteSource: 0,
        operatorUserInfo: undefined,
        operatorLinkAdminType: 0,
        inviteeUserInfo: undefined,
        shareRevenueSetting: 0,
    };
}
exports.MultiLiveContent_InviteBizContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.anchorSettingInfo !== undefined) {
            exports.MultiLiveAnchorPanelSettingsDecoder.encode(message.anchorSettingInfo, writer.uint32(10).fork()).join();
        }
        if (message.inviteSource !== 0) {
            writer.uint32(16).int32(message.inviteSource);
        }
        if (message.operatorUserInfo !== undefined) {
            exports.UserDecoder.encode(message.operatorUserInfo, writer.uint32(26).fork()).join();
        }
        if (message.operatorLinkAdminType !== 0) {
            writer.uint32(32).int32(message.operatorLinkAdminType);
        }
        if (message.inviteeUserInfo !== undefined) {
            exports.UserDecoder.encode(message.inviteeUserInfo, writer.uint32(42).fork()).join();
        }
        if (message.shareRevenueSetting !== 0) {
            writer.uint32(48).int32(message.shareRevenueSetting);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultiLiveContent_InviteBizContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.anchorSettingInfo = exports.MultiLiveAnchorPanelSettingsDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.inviteSource = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.operatorUserInfo = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.operatorLinkAdminType = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.inviteeUserInfo = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.shareRevenueSetting = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseMultiLiveContent_ReplyBizContent() {
    return { linkType: 0, isTurnOffInvitation: 0, replyUserInfo: undefined };
}
exports.MultiLiveContent_ReplyBizContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.linkType !== 0) {
            writer.uint32(8).int32(message.linkType);
        }
        if (message.isTurnOffInvitation !== 0) {
            writer.uint32(16).int32(message.isTurnOffInvitation);
        }
        if (message.replyUserInfo !== undefined) {
            exports.UserDecoder.encode(message.replyUserInfo, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultiLiveContent_ReplyBizContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.linkType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isTurnOffInvitation = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.replyUserInfo = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseMultiLiveContent_PermitBizContent() {
    return {
        anchorSettingInfo: undefined,
        expireTimestamp: "0",
        operatorUserInfo: undefined,
        operatorLinkAdminType: 0,
        linkUserType: 0,
    };
}
exports.MultiLiveContent_PermitBizContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.anchorSettingInfo !== undefined) {
            exports.MultiLiveAnchorPanelSettingsDecoder.encode(message.anchorSettingInfo, writer.uint32(10).fork()).join();
        }
        if (message.expireTimestamp !== "0") {
            writer.uint32(16).int64(message.expireTimestamp);
        }
        if (message.operatorUserInfo !== undefined) {
            exports.UserDecoder.encode(message.operatorUserInfo, writer.uint32(26).fork()).join();
        }
        if (message.operatorLinkAdminType !== 0) {
            writer.uint32(32).int32(message.operatorLinkAdminType);
        }
        if (message.linkUserType !== 0) {
            writer.uint32(40).int32(message.linkUserType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultiLiveContent_PermitBizContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.anchorSettingInfo = exports.MultiLiveAnchorPanelSettingsDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.expireTimestamp = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.operatorUserInfo = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.operatorLinkAdminType = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.linkUserType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseMultiLiveContent_KickOutBizContent() {
    return { operatorUserInfo: undefined, operatorLinkAdminType: 0, kickPlayerUserInfo: undefined };
}
exports.MultiLiveContent_KickOutBizContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.operatorUserInfo !== undefined) {
            exports.UserDecoder.encode(message.operatorUserInfo, writer.uint32(10).fork()).join();
        }
        if (message.operatorLinkAdminType !== 0) {
            writer.uint32(16).int32(message.operatorLinkAdminType);
        }
        if (message.kickPlayerUserInfo !== undefined) {
            exports.UserDecoder.encode(message.kickPlayerUserInfo, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMultiLiveContent_KickOutBizContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.operatorUserInfo = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.operatorLinkAdminType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.kickPlayerUserInfo = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseInviteContent() {
    return {
        invitor: undefined,
        inviteeRtcExtInfo: undefined,
        invitorLinkMicId: "",
        inviteeLinkMicId: "",
        isOwner: false,
        pos: undefined,
        dsl: undefined,
        invitee: undefined,
        operator: undefined,
    };
}
exports.InviteContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.invitor !== undefined) {
            exports.PlayerDecoder.encode(message.invitor, writer.uint32(10).fork()).join();
        }
        if (message.inviteeRtcExtInfo !== undefined) {
            exports.RTCExtraInfoDecoder.encode(message.inviteeRtcExtInfo, writer.uint32(18).fork()).join();
        }
        if (message.invitorLinkMicId !== "") {
            writer.uint32(26).string(message.invitorLinkMicId);
        }
        if (message.inviteeLinkMicId !== "") {
            writer.uint32(34).string(message.inviteeLinkMicId);
        }
        if (message.isOwner !== false) {
            writer.uint32(40).bool(message.isOwner);
        }
        if (message.pos !== undefined) {
            exports.PositionDecoder.encode(message.pos, writer.uint32(50).fork()).join();
        }
        if (message.dsl !== undefined) {
            exports.DSLConfigDecoder.encode(message.dsl, writer.uint32(58).fork()).join();
        }
        if (message.invitee !== undefined) {
            exports.UserDecoder.encode(message.invitee, writer.uint32(66).fork()).join();
        }
        if (message.operator !== undefined) {
            exports.UserDecoder.encode(message.operator, writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseInviteContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.invitor = exports.PlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.inviteeRtcExtInfo = exports.RTCExtraInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.invitorLinkMicId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.inviteeLinkMicId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.isOwner = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.pos = exports.PositionDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.dsl = exports.DSLConfigDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.invitee = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.operator = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseApplyContent() {
    return { applier: undefined, applierLinkMicId: "" };
}
exports.ApplyContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.applier !== undefined) {
            exports.PlayerDecoder.encode(message.applier, writer.uint32(10).fork()).join();
        }
        if (message.applierLinkMicId !== "") {
            writer.uint32(18).string(message.applierLinkMicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseApplyContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.applier = exports.PlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.applierLinkMicId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePermitApplyContent() {
    return {
        permiter: undefined,
        permiterLinkMicId: "",
        applierPos: undefined,
        replyStatus: 0,
        dsl: undefined,
        applier: undefined,
        operator: undefined,
        applierLinkMicId: "",
    };
}
exports.PermitApplyContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.permiter !== undefined) {
            exports.PlayerDecoder.encode(message.permiter, writer.uint32(10).fork()).join();
        }
        if (message.permiterLinkMicId !== "") {
            writer.uint32(18).string(message.permiterLinkMicId);
        }
        if (message.applierPos !== undefined) {
            exports.PositionDecoder.encode(message.applierPos, writer.uint32(26).fork()).join();
        }
        if (message.replyStatus !== 0) {
            writer.uint32(32).int32(message.replyStatus);
        }
        if (message.dsl !== undefined) {
            exports.DSLConfigDecoder.encode(message.dsl, writer.uint32(42).fork()).join();
        }
        if (message.applier !== undefined) {
            exports.UserDecoder.encode(message.applier, writer.uint32(50).fork()).join();
        }
        if (message.operator !== undefined) {
            exports.UserDecoder.encode(message.operator, writer.uint32(58).fork()).join();
        }
        if (message.applierLinkMicId !== "") {
            writer.uint32(66).string(message.applierLinkMicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePermitApplyContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.permiter = exports.PlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.permiterLinkMicId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.applierPos = exports.PositionDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.replyStatus = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.dsl = exports.DSLConfigDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.applier = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.operator = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.applierLinkMicId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseReplyInviteContent() {
    return {
        invitee: undefined,
        replyStatus: 0,
        inviteeLinkMicId: "",
        inviteePos: undefined,
        inviteOperatorUser: undefined,
        linkedUserUiPositions: [],
        uiPos: [],
    };
}
exports.ReplyInviteContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.invitee !== undefined) {
            exports.PlayerDecoder.encode(message.invitee, writer.uint32(10).fork()).join();
        }
        if (message.replyStatus !== 0) {
            writer.uint32(16).int32(message.replyStatus);
        }
        if (message.inviteeLinkMicId !== "") {
            writer.uint32(26).string(message.inviteeLinkMicId);
        }
        if (message.inviteePos !== undefined) {
            exports.PositionDecoder.encode(message.inviteePos, writer.uint32(34).fork()).join();
        }
        if (message.inviteOperatorUser !== undefined) {
            exports.PlayerDecoder.encode(message.inviteOperatorUser, writer.uint32(42).fork()).join();
        }
        for (const v of message.linkedUserUiPositions) {
            writer.uint32(50).string(v);
        }
        for (const v of message.uiPos) {
            exports.PosIdentityDecoder.encode(v, writer.uint32(58).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReplyInviteContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.invitee = exports.PlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.replyStatus = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.inviteeLinkMicId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.inviteePos = exports.PositionDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.inviteOperatorUser = exports.PlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.linkedUserUiPositions.push(reader.string());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.uiPos.push(exports.PosIdentityDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseKickOutContent() {
    return { offliner: undefined, kickoutReason: 0, linkedUserUiPositions: [], uiPos: [] };
}
exports.KickOutContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.offliner !== undefined) {
            exports.PlayerDecoder.encode(message.offliner, writer.uint32(10).fork()).join();
        }
        if (message.kickoutReason !== 0) {
            writer.uint32(16).int32(message.kickoutReason);
        }
        for (const v of message.linkedUserUiPositions) {
            writer.uint32(26).string(v);
        }
        for (const v of message.uiPos) {
            exports.PosIdentityDecoder.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseKickOutContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.offliner = exports.PlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.kickoutReason = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.linkedUserUiPositions.push(reader.string());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.uiPos.push(exports.PosIdentityDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePosIdentity() {
    return { type: 0, value: "" };
}
exports.PosIdentityDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePosIdentity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCancelApplyContent() {
    return { applier: undefined, applierLinkMicId: "" };
}
exports.CancelApplyContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.applier !== undefined) {
            exports.PlayerDecoder.encode(message.applier, writer.uint32(10).fork()).join();
        }
        if (message.applierLinkMicId !== "") {
            writer.uint32(18).string(message.applierLinkMicId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCancelApplyContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.applier = exports.PlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.applierLinkMicId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCancelInviteContent() {
    return { invitor: undefined, invitorLinkMicId: "", inviteeLinkMicId: "", inviteSeqId: "0", invitee: undefined };
}
exports.CancelInviteContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.invitor !== undefined) {
            exports.PlayerDecoder.encode(message.invitor, writer.uint32(10).fork()).join();
        }
        if (message.invitorLinkMicId !== "") {
            writer.uint32(18).string(message.invitorLinkMicId);
        }
        if (message.inviteeLinkMicId !== "") {
            writer.uint32(26).string(message.inviteeLinkMicId);
        }
        if (message.inviteSeqId !== "0") {
            writer.uint32(32).int64(message.inviteSeqId);
        }
        if (message.invitee !== undefined) {
            exports.PlayerDecoder.encode(message.invitee, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCancelInviteContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.invitor = exports.PlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.invitorLinkMicId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.inviteeLinkMicId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.inviteSeqId = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.invitee = exports.PlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLeaveContent() {
    return { leaver: undefined, leaveReason: "0", linkedUserUiPositions: [], uiPos: [] };
}
exports.LeaveContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.leaver !== undefined) {
            exports.PlayerDecoder.encode(message.leaver, writer.uint32(10).fork()).join();
        }
        if (message.leaveReason !== "0") {
            writer.uint32(16).int64(message.leaveReason);
        }
        for (const v of message.linkedUserUiPositions) {
            writer.uint32(26).string(v);
        }
        for (const v of message.uiPos) {
            exports.PosIdentityDecoder.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLeaveContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.leaver = exports.PlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.leaveReason = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.linkedUserUiPositions.push(reader.string());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.uiPos.push(exports.PosIdentityDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseFinishChannelContent() {
    return { owner: undefined, finishReason: "0" };
}
exports.FinishChannelContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.owner !== undefined) {
            exports.PlayerDecoder.encode(message.owner, writer.uint32(10).fork()).join();
        }
        if (message.finishReason !== "0") {
            writer.uint32(16).int64(message.finishReason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFinishChannelContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.owner = exports.PlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.finishReason = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseJoinDirectContent() {
    return { joiner: undefined, allUsers: undefined };
}
exports.JoinDirectContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.joiner !== undefined) {
            exports.LinkLayerListUserDecoder.encode(message.joiner, writer.uint32(10).fork()).join();
        }
        if (message.allUsers !== undefined) {
            exports.AllListUserDecoder.encode(message.allUsers, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseJoinDirectContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.joiner = exports.LinkLayerListUserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.allUsers = exports.AllListUserDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLeaveJoinGroupContent() {
    return { operator: undefined, groupChannelId: "0", leaveSource: "", linkedUserUiPositions: [] };
}
exports.LeaveJoinGroupContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.operator !== undefined) {
            exports.GroupPlayerDecoder.encode(message.operator, writer.uint32(10).fork()).join();
        }
        if (message.groupChannelId !== "0") {
            writer.uint32(16).int64(message.groupChannelId);
        }
        if (message.leaveSource !== "") {
            writer.uint32(26).string(message.leaveSource);
        }
        for (const v of message.linkedUserUiPositions) {
            writer.uint32(34).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLeaveJoinGroupContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.operator = exports.GroupPlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.groupChannelId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.leaveSource = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.linkedUserUiPositions.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePermitJoinGroupContent() {
    return {
        approver: undefined,
        agreeStatus: 0,
        type: 0,
        groupExtInfoList: [],
        groupUser: undefined,
        migrationDetails: undefined,
        linkedUserUiPositions: [],
    };
}
exports.PermitJoinGroupContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.approver !== undefined) {
            exports.GroupPlayerDecoder.encode(message.approver, writer.uint32(10).fork()).join();
        }
        if (message.agreeStatus !== 0) {
            writer.uint32(16).int32(message.agreeStatus);
        }
        if (message.type !== 0) {
            writer.uint32(24).int32(message.type);
        }
        for (const v of message.groupExtInfoList) {
            exports.RTCExtraInfoDecoder.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.groupUser !== undefined) {
            exports.GroupChannelAllUserDecoder.encode(message.groupUser, writer.uint32(42).fork()).join();
        }
        if (message.migrationDetails !== undefined) {
            exports.MigrationDetailsDecoder.encode(message.migrationDetails, writer.uint32(50).fork()).join();
        }
        for (const v of message.linkedUserUiPositions) {
            writer.uint32(58).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePermitJoinGroupContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.approver = exports.GroupPlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.agreeStatus = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.groupExtInfoList.push(exports.RTCExtraInfoDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.groupUser = exports.GroupChannelAllUserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.migrationDetails = exports.MigrationDetailsDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.linkedUserUiPositions.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseMigrationDetails() {
    return { isMigrate: false, sourceGroupChannelId: "0", targetGroupChannelId: "0" };
}
exports.MigrationDetailsDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isMigrate !== false) {
            writer.uint32(8).bool(message.isMigrate);
        }
        if (message.sourceGroupChannelId !== "0") {
            writer.uint32(16).int64(message.sourceGroupChannelId);
        }
        if (message.targetGroupChannelId !== "0") {
            writer.uint32(24).int64(message.targetGroupChannelId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMigrationDetails();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isMigrate = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sourceGroupChannelId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.targetGroupChannelId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseCancelJoinGroupContent() {
    return { leaverList: [], operator: undefined, type: 0, groupUser: undefined };
}
exports.CancelJoinGroupContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.leaverList) {
            exports.GroupPlayerDecoder.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.operator !== undefined) {
            exports.GroupPlayerDecoder.encode(message.operator, writer.uint32(18).fork()).join();
        }
        if (message.type !== 0) {
            writer.uint32(24).int32(message.type);
        }
        if (message.groupUser !== undefined) {
            exports.GroupChannelAllUserDecoder.encode(message.groupUser, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCancelJoinGroupContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.leaverList.push(exports.GroupPlayerDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.operator = exports.GroupPlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.groupUser = exports.GroupChannelAllUserDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseP2PGroupChangeContent() {
    return { groupExtInfoList: [], groupUser: undefined, migrationDetails: undefined, contentPos: [] };
}
exports.P2PGroupChangeContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.groupExtInfoList) {
            exports.RTCExtraInfoDecoder.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.groupUser !== undefined) {
            exports.GroupChannelAllUserDecoder.encode(message.groupUser, writer.uint32(18).fork()).join();
        }
        if (message.migrationDetails !== undefined) {
            exports.MigrationDetailsDecoder.encode(message.migrationDetails, writer.uint32(26).fork()).join();
        }
        for (const v of message.contentPos) {
            exports.ContentPositionDecoder.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseP2PGroupChangeContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.groupExtInfoList.push(exports.RTCExtraInfoDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.groupUser = exports.GroupChannelAllUserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.migrationDetails = exports.MigrationDetailsDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.contentPos.push(exports.ContentPositionDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGroupChangeContent() {
    return { groupUser: undefined, linkedUserUiPositions: [] };
}
exports.GroupChangeContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.groupUser !== undefined) {
            exports.GroupChannelAllUserDecoder.encode(message.groupUser, writer.uint32(10).fork()).join();
        }
        for (const v of message.linkedUserUiPositions) {
            writer.uint32(18).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGroupChangeContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.groupUser = exports.GroupChannelAllUserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.linkedUserUiPositions.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent() {
    return { overLength: "0", multiLiveContent: undefined, cohostContent: undefined };
}
exports.BusinessContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.overLength !== "0") {
            writer.uint32(8).int64(message.overLength);
        }
        if (message.multiLiveContent !== undefined) {
            exports.MultiLiveContentDecoder.encode(message.multiLiveContent, writer.uint32(802).fork()).join();
        }
        if (message.cohostContent !== undefined) {
            exports.BusinessContent_CohostContentDecoder.encode(message.cohostContent, writer.uint32(1602).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.overLength = reader.int64().toString();
                    continue;
                }
                case 100: {
                    if (tag !== 802) {
                        break;
                    }
                    message.multiLiveContent = exports.MultiLiveContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 200: {
                    if (tag !== 1602) {
                        break;
                    }
                    message.cohostContent = exports.BusinessContent_CohostContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_CohostContent() {
    return { joinGroupBizContent: undefined, permitJoinGroupBizContent: undefined, listChangeBizContent: undefined };
}
exports.BusinessContent_CohostContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.joinGroupBizContent !== undefined) {
            exports.BusinessContent_JoinGroupBizContentDecoder.encode(message.joinGroupBizContent, writer.uint32(10).fork()).join();
        }
        if (message.permitJoinGroupBizContent !== undefined) {
            exports.BusinessContent_PermitJoinGroupBizContentDecoder.encode(message.permitJoinGroupBizContent, writer.uint32(18).fork())
                .join();
        }
        if (message.listChangeBizContent !== undefined) {
            exports.BusinessContent_ListChangeBizContentDecoder.encode(message.listChangeBizContent, writer.uint32(90).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_CohostContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.joinGroupBizContent = exports.BusinessContent_JoinGroupBizContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.permitJoinGroupBizContent = exports.BusinessContent_PermitJoinGroupBizContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.listChangeBizContent = exports.BusinessContent_ListChangeBizContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_PermitJoinGroupBizContent() {
    return { replyStatus: 0, sourceType: 0 };
}
exports.BusinessContent_PermitJoinGroupBizContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.replyStatus !== 0) {
            writer.uint32(8).int32(message.replyStatus);
        }
        if (message.sourceType !== 0) {
            writer.uint32(16).int32(message.sourceType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_PermitJoinGroupBizContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.replyStatus = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sourceType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_ListChangeBizContent() {
    return { userInfos: {}, waitingUsers: [] };
}
exports.BusinessContent_ListChangeBizContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        Object.entries(message.userInfos).forEach(([key, value]) => {
            exports.BusinessContent_ListChangeBizContent_UserInfosEntryDecoder.encode({ key: key, value }, writer.uint32(10).fork())
                .join();
        });
        for (const v of message.waitingUsers) {
            exports.BusinessContent_ListChangeBizContent_VirtualWaitingUserDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_ListChangeBizContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.BusinessContent_ListChangeBizContent_UserInfosEntryDecoder.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.userInfos[entry1.key] = entry1.value;
                    }
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.waitingUsers.push(exports.BusinessContent_ListChangeBizContent_VirtualWaitingUserDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_ListChangeBizContent_UserInfosEntry() {
    return { key: "0", value: undefined };
}
exports.BusinessContent_ListChangeBizContent_UserInfosEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
            writer.uint32(8).int64(message.key);
        }
        if (message.value !== undefined) {
            exports.BusinessContent_CohostUserInfoDecoder.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_ListChangeBizContent_UserInfosEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.BusinessContent_CohostUserInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_ListChangeBizContent_VirtualWaitingUser() {
    return { userId: "0", timestamp: "0", avatars: [] };
}
exports.BusinessContent_ListChangeBizContent_VirtualWaitingUserDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.timestamp !== "0") {
            writer.uint32(16).int64(message.timestamp);
        }
        for (const v of message.avatars) {
            exports.ImageDecoder.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_ListChangeBizContent_VirtualWaitingUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.timestamp = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.avatars.push(exports.ImageDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_CohostUserInfo() {
    return {
        permissionType: "0",
        sourceType: 0,
        isLowVersion: false,
        bestTeammateUid: "0",
        hasTopicPerm: false,
        streamConfig: undefined,
        inDifferentInviteTypeControlGroup: false,
        nickname: "",
        displayId: "",
        avatarThumb: undefined,
        followStatus: "0",
        userIdStr: "",
    };
}
exports.BusinessContent_CohostUserInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.permissionType !== "0") {
            writer.uint32(8).int64(message.permissionType);
        }
        if (message.sourceType !== 0) {
            writer.uint32(16).int32(message.sourceType);
        }
        if (message.isLowVersion !== false) {
            writer.uint32(24).bool(message.isLowVersion);
        }
        if (message.bestTeammateUid !== "0") {
            writer.uint32(32).int64(message.bestTeammateUid);
        }
        if (message.hasTopicPerm !== false) {
            writer.uint32(40).bool(message.hasTopicPerm);
        }
        if (message.streamConfig !== undefined) {
            exports.BusinessContent_CohostUserInfo_CohostStreamConfigDecoder.encode(message.streamConfig, writer.uint32(50).fork()).join();
        }
        if (message.inDifferentInviteTypeControlGroup !== false) {
            writer.uint32(56).bool(message.inDifferentInviteTypeControlGroup);
        }
        if (message.nickname !== "") {
            writer.uint32(90).string(message.nickname);
        }
        if (message.displayId !== "") {
            writer.uint32(98).string(message.displayId);
        }
        if (message.avatarThumb !== undefined) {
            exports.ImageDecoder.encode(message.avatarThumb, writer.uint32(106).fork()).join();
        }
        if (message.followStatus !== "0") {
            writer.uint32(112).int64(message.followStatus);
        }
        if (message.userIdStr !== "") {
            writer.uint32(122).string(message.userIdStr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_CohostUserInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.permissionType = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sourceType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.isLowVersion = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.bestTeammateUid = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.hasTopicPerm = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.streamConfig = exports.BusinessContent_CohostUserInfo_CohostStreamConfigDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.inDifferentInviteTypeControlGroup = reader.bool();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.nickname = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.displayId = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.avatarThumb = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.followStatus = reader.int64().toString();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.userIdStr = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_CohostUserInfo_CohostStreamConfig() {
    return { screenShareStreamId: "" };
}
exports.BusinessContent_CohostUserInfo_CohostStreamConfigDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.screenShareStreamId !== "") {
            writer.uint32(10).string(message.screenShareStreamId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_CohostUserInfo_CohostStreamConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.screenShareStreamId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_JoinGroupBizContent() {
    return {
        fromRoomAgeRestricted: 0,
        fromTag: undefined,
        dialog: undefined,
        punishInfo: undefined,
        topicInfo: undefined,
        algoRequestId: "",
        cohostLayoutMode: 0,
        tag: undefined,
        gameTag: undefined,
        newUserEducation: "",
        joinGroupMsgExtra: undefined,
    };
}
exports.BusinessContent_JoinGroupBizContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromRoomAgeRestricted !== 0) {
            writer.uint32(8).int32(message.fromRoomAgeRestricted);
        }
        if (message.fromTag !== undefined) {
            exports.BusinessContent_TagDecoder.encode(message.fromTag, writer.uint32(18).fork()).join();
        }
        if (message.dialog !== undefined) {
            exports.BusinessContent_PerceptionDialogInfoDecoder.encode(message.dialog, writer.uint32(26).fork()).join();
        }
        if (message.punishInfo !== undefined) {
            exports.PunishEventInfoDecoder.encode(message.punishInfo, writer.uint32(34).fork()).join();
        }
        if (message.topicInfo !== undefined) {
            exports.CohostTopicDecoder.encode(message.topicInfo, writer.uint32(42).fork()).join();
        }
        if (message.algoRequestId !== "") {
            writer.uint32(50).string(message.algoRequestId);
        }
        if (message.cohostLayoutMode !== 0) {
            writer.uint32(56).int32(message.cohostLayoutMode);
        }
        if (message.tag !== undefined) {
            exports.BusinessContent_JoinGroupBizContent_TagV2Decoder.encode(message.tag, writer.uint32(66).fork()).join();
        }
        if (message.gameTag !== undefined) {
            exports.BusinessContent_JoinGroupBizContent_RivalsGameTagDecoder.encode(message.gameTag, writer.uint32(74).fork()).join();
        }
        if (message.newUserEducation !== "") {
            writer.uint32(90).string(message.newUserEducation);
        }
        if (message.joinGroupMsgExtra !== undefined) {
            exports.BusinessContent_JoinGroupMessageExtraDecoder.encode(message.joinGroupMsgExtra, writer.uint32(810).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupBizContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.fromRoomAgeRestricted = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.fromTag = exports.BusinessContent_TagDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.dialog = exports.BusinessContent_PerceptionDialogInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.punishInfo = exports.PunishEventInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.topicInfo = exports.CohostTopicDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.algoRequestId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.cohostLayoutMode = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.tag = exports.BusinessContent_JoinGroupBizContent_TagV2Decoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.gameTag = exports.BusinessContent_JoinGroupBizContent_RivalsGameTagDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.newUserEducation = reader.string();
                    continue;
                }
                case 101: {
                    if (tag !== 810) {
                        break;
                    }
                    message.joinGroupMsgExtra = exports.BusinessContent_JoinGroupMessageExtraDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_JoinGroupBizContent_RivalsGameTag() {
    return { tagId: "0", tagDisplayText: "" };
}
exports.BusinessContent_JoinGroupBizContent_RivalsGameTagDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tagId !== "0") {
            writer.uint32(8).int64(message.tagId);
        }
        if (message.tagDisplayText !== "") {
            writer.uint32(18).string(message.tagDisplayText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupBizContent_RivalsGameTag();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.tagId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tagDisplayText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_JoinGroupBizContent_TagV2() {
    return {
        tagClassification: 0,
        tagType: 0,
        tagValue: "",
        starlingKey: "",
        secondDegreeRelationContent: undefined,
        cohostHistoryDay: "0",
        similarInterestContent: undefined,
    };
}
exports.BusinessContent_JoinGroupBizContent_TagV2Decoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tagClassification !== 0) {
            writer.uint32(8).int32(message.tagClassification);
        }
        if (message.tagType !== 0) {
            writer.uint32(16).int32(message.tagType);
        }
        if (message.tagValue !== "") {
            writer.uint32(26).string(message.tagValue);
        }
        if (message.starlingKey !== "") {
            writer.uint32(34).string(message.starlingKey);
        }
        if (message.secondDegreeRelationContent !== undefined) {
            exports.BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContentDecoder.encode(message.secondDegreeRelationContent, writer.uint32(82).fork()).join();
        }
        if (message.cohostHistoryDay !== "0") {
            writer.uint32(88).int64(message.cohostHistoryDay);
        }
        if (message.similarInterestContent !== undefined) {
            exports.BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContentDecoder.encode(message.similarInterestContent, writer.uint32(98).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupBizContent_TagV2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.tagClassification = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.tagType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.tagValue = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.starlingKey = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.secondDegreeRelationContent = exports.BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.cohostHistoryDay = reader.int64().toString();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.similarInterestContent = exports.BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_JoinGroupBizContent_TagV2_UserInfo() {
    return { userId: "0", nickName: "", avatarThumb: undefined };
}
exports.BusinessContent_JoinGroupBizContent_TagV2_UserInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.nickName !== "") {
            writer.uint32(18).string(message.nickName);
        }
        if (message.avatarThumb !== undefined) {
            exports.ImageDecoder.encode(message.avatarThumb, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupBizContent_TagV2_UserInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.nickName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.avatarThumb = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent() {
    return { relatedUsers: [], totalRelatedUserCnt: "0" };
}
exports.BusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.relatedUsers) {
            exports.BusinessContent_JoinGroupBizContent_TagV2_UserInfoDecoder.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.totalRelatedUserCnt !== "0") {
            writer.uint32(16).int64(message.totalRelatedUserCnt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupBizContent_TagV2_SecondDegreeRelationContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.relatedUsers.push(exports.BusinessContent_JoinGroupBizContent_TagV2_UserInfoDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.totalRelatedUserCnt = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent() {
    return { contentId: "0", displayText: "" };
}
exports.BusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.contentId !== "0") {
            writer.uint32(8).int64(message.contentId);
        }
        if (message.displayText !== "") {
            writer.uint32(18).string(message.displayText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupBizContent_TagV2_SimilarInterestContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.contentId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.displayText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_Tag() {
    return { tagType: 0, tagValue: "", tagText: "" };
}
exports.BusinessContent_TagDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tagType !== 0) {
            writer.uint32(8).int32(message.tagType);
        }
        if (message.tagValue !== "") {
            writer.uint32(18).string(message.tagValue);
        }
        if (message.tagText !== "") {
            writer.uint32(26).string(message.tagText);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_Tag();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.tagType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tagValue = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.tagText = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_PerceptionDialogInfo() {
    return {
        iconType: "0",
        title: undefined,
        subTitle: undefined,
        adviceActionText: undefined,
        defaultActionText: undefined,
        violationDetailUrl: "",
        scene: 0,
        targetUserId: "0",
        targetRoomId: "0",
        countDownTime: "0",
        showFeedback: false,
        feedbackOptionsList: [],
        policyTip: "0",
    };
}
exports.BusinessContent_PerceptionDialogInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.iconType !== "0") {
            writer.uint32(8).int64(message.iconType);
        }
        if (message.title !== undefined) {
            exports.TextDecoder.encode(message.title, writer.uint32(18).fork()).join();
        }
        if (message.subTitle !== undefined) {
            exports.TextDecoder.encode(message.subTitle, writer.uint32(26).fork()).join();
        }
        if (message.adviceActionText !== undefined) {
            exports.TextDecoder.encode(message.adviceActionText, writer.uint32(34).fork()).join();
        }
        if (message.defaultActionText !== undefined) {
            exports.TextDecoder.encode(message.defaultActionText, writer.uint32(42).fork()).join();
        }
        if (message.violationDetailUrl !== "") {
            writer.uint32(50).string(message.violationDetailUrl);
        }
        if (message.scene !== 0) {
            writer.uint32(56).int32(message.scene);
        }
        if (message.targetUserId !== "0") {
            writer.uint32(64).int64(message.targetUserId);
        }
        if (message.targetRoomId !== "0") {
            writer.uint32(72).int64(message.targetRoomId);
        }
        if (message.countDownTime !== "0") {
            writer.uint32(80).int64(message.countDownTime);
        }
        if (message.showFeedback !== false) {
            writer.uint32(88).bool(message.showFeedback);
        }
        for (const v of message.feedbackOptionsList) {
            exports.BusinessContent_PerceptionFeedbackOptionDecoder.encode(v, writer.uint32(98).fork()).join();
        }
        if (message.policyTip !== "0") {
            writer.uint32(104).int64(message.policyTip);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_PerceptionDialogInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.iconType = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.subTitle = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.adviceActionText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.defaultActionText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.violationDetailUrl = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.scene = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.targetUserId = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.targetRoomId = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.countDownTime = reader.int64().toString();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.showFeedback = reader.bool();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.feedbackOptionsList.push(exports.BusinessContent_PerceptionFeedbackOptionDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.policyTip = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_PerceptionFeedbackOption() {
    return { id: "0", contentKey: "" };
}
exports.BusinessContent_PerceptionFeedbackOptionDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
            writer.uint32(8).int64(message.id);
        }
        if (message.contentKey !== "") {
            writer.uint32(18).string(message.contentKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_PerceptionFeedbackOption();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.contentKey = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_JoinGroupMessageExtra() {
    return { sourceType: "0", extra: undefined, otherUsersList: [] };
}
exports.BusinessContent_JoinGroupMessageExtraDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.sourceType !== "0") {
            writer.uint32(8).int64(message.sourceType);
        }
        if (message.extra !== undefined) {
            exports.BusinessContent_JoinGroupMessageExtra_RivalExtraDecoder.encode(message.extra, writer.uint32(18).fork()).join();
        }
        for (const v of message.otherUsersList) {
            exports.BusinessContent_JoinGroupMessageExtra_RivalExtraDecoder.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupMessageExtra();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.sourceType = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.extra = exports.BusinessContent_JoinGroupMessageExtra_RivalExtraDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.otherUsersList.push(exports.BusinessContent_JoinGroupMessageExtra_RivalExtraDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_JoinGroupMessageExtra_RivalExtra() {
    return {
        userCount: "0",
        avatarThumb: undefined,
        displayId: "",
        authenticationInfo: undefined,
        nickname: "",
        followStatus: "0",
        hashtag: undefined,
        topHostInfo: undefined,
        userId: "0",
        isBestTeammate: false,
    };
}
exports.BusinessContent_JoinGroupMessageExtra_RivalExtraDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userCount !== "0") {
            writer.uint32(32).int64(message.userCount);
        }
        if (message.avatarThumb !== undefined) {
            exports.ImageDecoder.encode(message.avatarThumb, writer.uint32(42).fork()).join();
        }
        if (message.displayId !== "") {
            writer.uint32(50).string(message.displayId);
        }
        if (message.authenticationInfo !== undefined) {
            exports.BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfoDecoder.encode(message.authenticationInfo, writer.uint32(58).fork()).join();
        }
        if (message.nickname !== "") {
            writer.uint32(66).string(message.nickname);
        }
        if (message.followStatus !== "0") {
            writer.uint32(72).int64(message.followStatus);
        }
        if (message.hashtag !== undefined) {
            exports.BusinessContent_HashtagDecoder.encode(message.hashtag, writer.uint32(82).fork()).join();
        }
        if (message.topHostInfo !== undefined) {
            exports.BusinessContent_TopHostInfoDecoder.encode(message.topHostInfo, writer.uint32(90).fork()).join();
        }
        if (message.userId !== "0") {
            writer.uint32(96).int64(message.userId);
        }
        if (message.isBestTeammate !== false) {
            writer.uint32(104).bool(message.isBestTeammate);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupMessageExtra_RivalExtra();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.userCount = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.avatarThumb = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.displayId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.authenticationInfo = exports.BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.nickname = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.followStatus = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.hashtag = exports.BusinessContent_HashtagDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.topHostInfo = exports.BusinessContent_TopHostInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.isBestTeammate = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo() {
    return { customVerify: "", enterpriseVerifyReason: "", authenticationBadge: undefined };
}
exports.BusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.customVerify !== "") {
            writer.uint32(10).string(message.customVerify);
        }
        if (message.enterpriseVerifyReason !== "") {
            writer.uint32(18).string(message.enterpriseVerifyReason);
        }
        if (message.authenticationBadge !== undefined) {
            exports.ImageDecoder.encode(message.authenticationBadge, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_JoinGroupMessageExtra_RivalExtra_AuthenticationInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.customVerify = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.enterpriseVerifyReason = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.authenticationBadge = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_Hashtag() {
    return { id: "0", title: "", image: undefined, namespace: 0 };
}
exports.BusinessContent_HashtagDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
            writer.uint32(8).int64(message.id);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.image !== undefined) {
            exports.ImageDecoder.encode(message.image, writer.uint32(26).fork()).join();
        }
        if (message.namespace !== 0) {
            writer.uint32(32).int32(message.namespace);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_Hashtag();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.image = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.namespace = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBusinessContent_TopHostInfo() {
    return { rankType: "", topIndex: "0" };
}
exports.BusinessContent_TopHostInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rankType !== "") {
            writer.uint32(10).string(message.rankType);
        }
        if (message.topIndex !== "0") {
            writer.uint32(16).int64(message.topIndex);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBusinessContent_TopHostInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rankType = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.topIndex = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseJoinGroupContent() {
    return { groupUser: undefined, joinUser: undefined, type: 0, groupExtInfo: [] };
}
exports.JoinGroupContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.groupUser !== undefined) {
            exports.GroupChannelAllUserDecoder.encode(message.groupUser, writer.uint32(10).fork()).join();
        }
        if (message.joinUser !== undefined) {
            exports.GroupPlayerDecoder.encode(message.joinUser, writer.uint32(18).fork()).join();
        }
        if (message.type !== 0) {
            writer.uint32(24).int32(message.type);
        }
        for (const v of message.groupExtInfo) {
            exports.RTCExtraInfoDecoder.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseJoinGroupContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.groupUser = exports.GroupChannelAllUserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.joinUser = exports.GroupPlayerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.groupExtInfo.push(exports.RTCExtraInfoDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePrivilegeLogExtra() {
    return { dataVersion: "", privilegeId: "", privilegeVersion: "", privilegeOrderId: "", level: "" };
}
exports.PrivilegeLogExtraDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.dataVersion !== "") {
            writer.uint32(10).string(message.dataVersion);
        }
        if (message.privilegeId !== "") {
            writer.uint32(18).string(message.privilegeId);
        }
        if (message.privilegeVersion !== "") {
            writer.uint32(26).string(message.privilegeVersion);
        }
        if (message.privilegeOrderId !== "") {
            writer.uint32(34).string(message.privilegeOrderId);
        }
        if (message.level !== "") {
            writer.uint32(42).string(message.level);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePrivilegeLogExtra();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.dataVersion = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.privilegeId = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.privilegeVersion = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.privilegeOrderId = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.level = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseFontStyle() {
    return { fontSize: 0, fontWidth: 0, fontColor: "", borderColor: "" };
}
exports.FontStyleDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fontSize !== 0) {
            writer.uint32(8).int32(message.fontSize);
        }
        if (message.fontWidth !== 0) {
            writer.uint32(16).int32(message.fontWidth);
        }
        if (message.fontColor !== "") {
            writer.uint32(26).string(message.fontColor);
        }
        if (message.borderColor !== "") {
            writer.uint32(34).string(message.borderColor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFontStyle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.fontSize = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.fontWidth = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.fontColor = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.borderColor = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUserHonor() {
    return {
        totalDiamond: "0",
        diamondIcon: undefined,
        currentHonorName: "",
        currentHonorIcon: undefined,
        nextHonorName: "",
        level: 0,
        nextHonorIcon: undefined,
        currentDiamond: "0",
        thisGradeMinDiamond: "0",
        thisGradeMaxDiamond: "0",
        gradeDescribe: "",
        gradeIconList: [],
        screenChatType: "0",
        imIcon: undefined,
        imIconWithLevel: undefined,
        liveIcon: undefined,
        newImIconWithLevel: undefined,
        newLiveIcon: undefined,
        upgradeNeedConsume: "0",
        nextPrivileges: "",
        profileDialogBg: undefined,
        profileDialogBackBg: undefined,
        score: "0",
        gradeBanner: "",
    };
}
exports.UserHonorDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.totalDiamond !== "0") {
            writer.uint32(8).int64(message.totalDiamond);
        }
        if (message.diamondIcon !== undefined) {
            exports.ImageDecoder.encode(message.diamondIcon, writer.uint32(18).fork()).join();
        }
        if (message.currentHonorName !== "") {
            writer.uint32(26).string(message.currentHonorName);
        }
        if (message.currentHonorIcon !== undefined) {
            exports.ImageDecoder.encode(message.currentHonorIcon, writer.uint32(34).fork()).join();
        }
        if (message.nextHonorName !== "") {
            writer.uint32(42).string(message.nextHonorName);
        }
        if (message.level !== 0) {
            writer.uint32(48).int32(message.level);
        }
        if (message.nextHonorIcon !== undefined) {
            exports.ImageDecoder.encode(message.nextHonorIcon, writer.uint32(58).fork()).join();
        }
        if (message.currentDiamond !== "0") {
            writer.uint32(72).int64(message.currentDiamond);
        }
        if (message.thisGradeMinDiamond !== "0") {
            writer.uint32(80).int64(message.thisGradeMinDiamond);
        }
        if (message.thisGradeMaxDiamond !== "0") {
            writer.uint32(88).int64(message.thisGradeMaxDiamond);
        }
        if (message.gradeDescribe !== "") {
            writer.uint32(106).string(message.gradeDescribe);
        }
        for (const v of message.gradeIconList) {
            exports.GradeIconDecoder.encode(v, writer.uint32(114).fork()).join();
        }
        if (message.screenChatType !== "0") {
            writer.uint32(120).int64(message.screenChatType);
        }
        if (message.imIcon !== undefined) {
            exports.ImageDecoder.encode(message.imIcon, writer.uint32(130).fork()).join();
        }
        if (message.imIconWithLevel !== undefined) {
            exports.ImageDecoder.encode(message.imIconWithLevel, writer.uint32(138).fork()).join();
        }
        if (message.liveIcon !== undefined) {
            exports.ImageDecoder.encode(message.liveIcon, writer.uint32(146).fork()).join();
        }
        if (message.newImIconWithLevel !== undefined) {
            exports.ImageDecoder.encode(message.newImIconWithLevel, writer.uint32(154).fork()).join();
        }
        if (message.newLiveIcon !== undefined) {
            exports.ImageDecoder.encode(message.newLiveIcon, writer.uint32(162).fork()).join();
        }
        if (message.upgradeNeedConsume !== "0") {
            writer.uint32(168).int64(message.upgradeNeedConsume);
        }
        if (message.nextPrivileges !== "") {
            writer.uint32(178).string(message.nextPrivileges);
        }
        if (message.profileDialogBg !== undefined) {
            exports.ImageDecoder.encode(message.profileDialogBg, writer.uint32(186).fork()).join();
        }
        if (message.profileDialogBackBg !== undefined) {
            exports.ImageDecoder.encode(message.profileDialogBackBg, writer.uint32(194).fork()).join();
        }
        if (message.score !== "0") {
            writer.uint32(200).int64(message.score);
        }
        if (message.gradeBanner !== "") {
            writer.uint32(8010).string(message.gradeBanner);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserHonor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.totalDiamond = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.diamondIcon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.currentHonorName = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.currentHonorIcon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.nextHonorName = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.level = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.nextHonorIcon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.currentDiamond = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.thisGradeMinDiamond = reader.int64().toString();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.thisGradeMaxDiamond = reader.int64().toString();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.gradeDescribe = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.gradeIconList.push(exports.GradeIconDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.screenChatType = reader.int64().toString();
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.imIcon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.imIconWithLevel = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.liveIcon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.newImIconWithLevel = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.newLiveIcon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.upgradeNeedConsume = reader.int64().toString();
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.nextPrivileges = reader.string();
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.profileDialogBg = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.profileDialogBackBg = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 25: {
                    if (tag !== 200) {
                        break;
                    }
                    message.score = reader.int64().toString();
                    continue;
                }
                case 1001: {
                    if (tag !== 8010) {
                        break;
                    }
                    message.gradeBanner = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGradeIcon() {
    return { icon: undefined, iconDiamond: "0", level: "0", levelStr: "" };
}
exports.GradeIconDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.icon !== undefined) {
            exports.ImageDecoder.encode(message.icon, writer.uint32(10).fork()).join();
        }
        if (message.iconDiamond !== "0") {
            writer.uint32(16).int64(message.iconDiamond);
        }
        if (message.level !== "0") {
            writer.uint32(24).int64(message.level);
        }
        if (message.levelStr !== "") {
            writer.uint32(34).string(message.levelStr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGradeIcon();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.icon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.iconDiamond = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.level = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.levelStr = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBorderInfo() {
    return {
        icon: undefined,
        level: "0",
        source: "",
        profileDecorationRibbon: undefined,
        borderLogExtra: undefined,
        ribbonLogExtra: undefined,
        avatarBackgroundColor: "",
        avatarBackgroundBorderColor: "",
    };
}
exports.BorderInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.icon !== undefined) {
            exports.ImageDecoder.encode(message.icon, writer.uint32(10).fork()).join();
        }
        if (message.level !== "0") {
            writer.uint32(16).int64(message.level);
        }
        if (message.source !== "") {
            writer.uint32(26).string(message.source);
        }
        if (message.profileDecorationRibbon !== undefined) {
            exports.ImageDecoder.encode(message.profileDecorationRibbon, writer.uint32(34).fork()).join();
        }
        if (message.borderLogExtra !== undefined) {
            exports.PrivilegeLogExtraDecoder.encode(message.borderLogExtra, writer.uint32(42).fork()).join();
        }
        if (message.ribbonLogExtra !== undefined) {
            exports.PrivilegeLogExtraDecoder.encode(message.ribbonLogExtra, writer.uint32(50).fork()).join();
        }
        if (message.avatarBackgroundColor !== "") {
            writer.uint32(58).string(message.avatarBackgroundColor);
        }
        if (message.avatarBackgroundBorderColor !== "") {
            writer.uint32(66).string(message.avatarBackgroundBorderColor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBorderInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.icon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.level = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.source = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.profileDecorationRibbon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.borderLogExtra = exports.PrivilegeLogExtraDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.ribbonLogExtra = exports.PrivilegeLogExtraDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.avatarBackgroundColor = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.avatarBackgroundBorderColor = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseFansClubMember() {
    return { data: undefined, preferData: {} };
}
exports.FansClubMemberDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.data !== undefined) {
            exports.FansClubDataDecoder.encode(message.data, writer.uint32(10).fork()).join();
        }
        Object.entries(message.preferData).forEach(([key, value]) => {
            exports.FansClubMember_PreferDataEntryDecoder.encode({ key: key, value }, writer.uint32(18).fork()).join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFansClubMember();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.data = exports.FansClubDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.FansClubMember_PreferDataEntryDecoder.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.preferData[entry2.key] = entry2.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseFansClubMember_PreferDataEntry() {
    return { key: 0, value: undefined };
}
exports.FansClubMember_PreferDataEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== 0) {
            writer.uint32(8).int32(message.key);
        }
        if (message.value !== undefined) {
            exports.FansClubDataDecoder.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFansClubMember_PreferDataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.FansClubDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseFansClubData() {
    return { clubName: "", level: 0, userFansClubStatus: 0, badge: undefined, availableGiftIds: [], anchorId: "0" };
}
exports.FansClubDataDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.clubName !== "") {
            writer.uint32(10).string(message.clubName);
        }
        if (message.level !== 0) {
            writer.uint32(16).int32(message.level);
        }
        if (message.userFansClubStatus !== 0) {
            writer.uint32(24).int32(message.userFansClubStatus);
        }
        if (message.badge !== undefined) {
            exports.FansClubData_UserBadgeDecoder.encode(message.badge, writer.uint32(34).fork()).join();
        }
        writer.uint32(42).fork();
        for (const v of message.availableGiftIds) {
            writer.int64(v);
        }
        writer.join();
        if (message.anchorId !== "0") {
            writer.uint32(48).int64(message.anchorId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFansClubData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.clubName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.level = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.userFansClubStatus = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.badge = exports.FansClubData_UserBadgeDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag === 40) {
                        message.availableGiftIds.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 42) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.availableGiftIds.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.anchorId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseFansClubData_UserBadge() {
    return { icons: {}, title: "" };
}
exports.FansClubData_UserBadgeDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        Object.entries(message.icons).forEach(([key, value]) => {
            exports.FansClubData_UserBadge_IconsEntryDecoder.encode({ key: key, value }, writer.uint32(10).fork()).join();
        });
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFansClubData_UserBadge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    const entry1 = exports.FansClubData_UserBadge_IconsEntryDecoder.decode(reader, reader.uint32());
                    if (entry1.value !== undefined) {
                        message.icons[entry1.key] = entry1.value;
                    }
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseFansClubData_UserBadge_IconsEntry() {
    return { key: 0, value: undefined };
}
exports.FansClubData_UserBadge_IconsEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== 0) {
            writer.uint32(8).int32(message.key);
        }
        if (message.value !== undefined) {
            exports.ImageDecoder.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFansClubData_UserBadge_IconsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseAuthor() {
    return { videoTotalCount: "0", videoTotalPlayCount: "0", videoTotalFavoriteCount: "0" };
}
exports.AuthorDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.videoTotalCount !== "0") {
            writer.uint32(8).int64(message.videoTotalCount);
        }
        if (message.videoTotalPlayCount !== "0") {
            writer.uint32(16).int64(message.videoTotalPlayCount);
        }
        if (message.videoTotalFavoriteCount !== "0") {
            writer.uint32(48).int64(message.videoTotalFavoriteCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseAuthor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.videoTotalCount = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.videoTotalPlayCount = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.videoTotalFavoriteCount = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePublicAreaCommon() {
    return { userLabel: undefined, userConsumeInRoom: "0" };
}
exports.PublicAreaCommonDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userLabel !== undefined) {
            exports.ImageDecoder.encode(message.userLabel, writer.uint32(10).fork()).join();
        }
        if (message.userConsumeInRoom !== "0") {
            writer.uint32(16).int64(message.userConsumeInRoom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublicAreaCommon();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userLabel = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.userConsumeInRoom = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePublicAreaMessageCommon() {
    return {
        scrollGapCount: "0",
        anchorScrollGapCount: "0",
        releaseToScrollArea: false,
        anchorReleaseToScrollArea: false,
        isAnchorMarked: false,
        creatorSuccessInfo: undefined,
        portraitInfo: undefined,
        userInteractionInfo: undefined,
        adminFoldType: "0",
    };
}
exports.PublicAreaMessageCommonDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.scrollGapCount !== "0") {
            writer.uint32(8).int64(message.scrollGapCount);
        }
        if (message.anchorScrollGapCount !== "0") {
            writer.uint32(16).int64(message.anchorScrollGapCount);
        }
        if (message.releaseToScrollArea !== false) {
            writer.uint32(24).bool(message.releaseToScrollArea);
        }
        if (message.anchorReleaseToScrollArea !== false) {
            writer.uint32(32).bool(message.anchorReleaseToScrollArea);
        }
        if (message.isAnchorMarked !== false) {
            writer.uint32(40).bool(message.isAnchorMarked);
        }
        if (message.creatorSuccessInfo !== undefined) {
            exports.PublicAreaMessageCommon_CreatorSuccessInfoDecoder.encode(message.creatorSuccessInfo, writer.uint32(50).fork()).join();
        }
        if (message.portraitInfo !== undefined) {
            exports.PublicAreaMessageCommon_PortraitInfoDecoder.encode(message.portraitInfo, writer.uint32(58).fork()).join();
        }
        if (message.userInteractionInfo !== undefined) {
            exports.PublicAreaMessageCommon_UserInteractionInfoDecoder.encode(message.userInteractionInfo, writer.uint32(66).fork()).join();
        }
        if (message.adminFoldType !== "0") {
            writer.uint32(72).int64(message.adminFoldType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublicAreaMessageCommon();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.scrollGapCount = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.anchorScrollGapCount = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.releaseToScrollArea = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.anchorReleaseToScrollArea = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.isAnchorMarked = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.creatorSuccessInfo = exports.PublicAreaMessageCommon_CreatorSuccessInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.portraitInfo = exports.PublicAreaMessageCommon_PortraitInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.userInteractionInfo = exports.PublicAreaMessageCommon_UserInteractionInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.adminFoldType = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePublicAreaMessageCommon_TagItem() {
    return { tagType: 0, tagText: undefined };
}
exports.PublicAreaMessageCommon_TagItemDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tagType !== 0) {
            writer.uint32(8).int32(message.tagType);
        }
        if (message.tagText !== undefined) {
            exports.TextDecoder.encode(message.tagText, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublicAreaMessageCommon_TagItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.tagType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tagText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePublicAreaMessageCommon_Topic() {
    return { topicActionType: 0, topicText: undefined, topicTips: undefined };
}
exports.PublicAreaMessageCommon_TopicDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.topicActionType !== 0) {
            writer.uint32(8).int32(message.topicActionType);
        }
        if (message.topicText !== undefined) {
            exports.TextDecoder.encode(message.topicText, writer.uint32(18).fork()).join();
        }
        if (message.topicTips !== undefined) {
            exports.TextDecoder.encode(message.topicTips, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublicAreaMessageCommon_Topic();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.topicActionType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.topicText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.topicTips = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePublicAreaMessageCommon_CreatorSuccessInfo() {
    return { tags: [], topic: undefined };
}
exports.PublicAreaMessageCommon_CreatorSuccessInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.tags) {
            exports.PublicAreaMessageCommon_TagItemDecoder.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.topic !== undefined) {
            exports.PublicAreaMessageCommon_TopicDecoder.encode(message.topic, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublicAreaMessageCommon_CreatorSuccessInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tags.push(exports.PublicAreaMessageCommon_TagItemDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.topic = exports.PublicAreaMessageCommon_TopicDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePublicAreaMessageCommon_UserMetrics() {
    return { type: 0, metricsValue: "" };
}
exports.PublicAreaMessageCommon_UserMetricsDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.metricsValue !== "") {
            writer.uint32(18).string(message.metricsValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublicAreaMessageCommon_UserMetrics();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.metricsValue = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePublicAreaMessageCommon_PortraitTag() {
    return { tagId: "", priority: "0", showValue: "", showArgs: "" };
}
exports.PublicAreaMessageCommon_PortraitTagDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.tagId !== "") {
            writer.uint32(10).string(message.tagId);
        }
        if (message.priority !== "0") {
            writer.uint32(16).int64(message.priority);
        }
        if (message.showValue !== "") {
            writer.uint32(26).string(message.showValue);
        }
        if (message.showArgs !== "") {
            writer.uint32(34).string(message.showArgs);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublicAreaMessageCommon_PortraitTag();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tagId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.priority = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.showValue = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.showArgs = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePublicAreaMessageCommon_PortraitInfo() {
    return { userMetrics: [], portraitTag: [] };
}
exports.PublicAreaMessageCommon_PortraitInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.userMetrics) {
            exports.PublicAreaMessageCommon_UserMetricsDecoder.encode(v, writer.uint32(10).fork()).join();
        }
        for (const v of message.portraitTag) {
            exports.PublicAreaMessageCommon_PortraitTagDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublicAreaMessageCommon_PortraitInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userMetrics.push(exports.PublicAreaMessageCommon_UserMetricsDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.portraitTag.push(exports.PublicAreaMessageCommon_PortraitTagDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBasePublicAreaMessageCommon_UserInteractionInfo() {
    return { likeCnt: "0", commentCnt: "0", shareCnt: "0" };
}
exports.PublicAreaMessageCommon_UserInteractionInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.likeCnt !== "0") {
            writer.uint32(8).int64(message.likeCnt);
        }
        if (message.commentCnt !== "0") {
            writer.uint32(16).int64(message.commentCnt);
        }
        if (message.shareCnt !== "0") {
            writer.uint32(24).int64(message.shareCnt);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePublicAreaMessageCommon_UserInteractionInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.likeCnt = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.commentCnt = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.shareCnt = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseGiftModeMeta() {
    return { giftId: "0", giftNameKey: "", giftIconImage: undefined, giftModeDesc: undefined };
}
exports.GiftModeMetaDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftId !== "0") {
            writer.uint32(8).int64(message.giftId);
        }
        if (message.giftNameKey !== "") {
            writer.uint32(18).string(message.giftNameKey);
        }
        if (message.giftIconImage !== undefined) {
            exports.ImageDecoder.encode(message.giftIconImage, writer.uint32(26).fork()).join();
        }
        if (message.giftModeDesc !== undefined) {
            exports.TextDecoder.encode(message.giftModeDesc, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGiftModeMeta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.giftId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.giftNameKey = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.giftIconImage = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.giftModeDesc = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBattleTeamUser() {
    return { userId: "0", score: "0", userIdStr: "" };
}
exports.BattleTeamUserDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.score !== "0") {
            writer.uint32(16).int64(message.score);
        }
        if (message.userIdStr !== "") {
            writer.uint32(26).string(message.userIdStr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBattleTeamUser();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.score = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.userIdStr = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBattleSetting() {
    return {
        battleId: "0",
        startTimeMs: "0",
        duration: 0,
        channelId: "0",
        status: 0,
        inviteType: 0,
        giftModeMeta: undefined,
        battleType: 0,
        extraDurationSecond: "0",
        endTimeMs: "0",
    };
}
exports.BattleSettingDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.battleId !== "0") {
            writer.uint32(8).int64(message.battleId);
        }
        if (message.startTimeMs !== "0") {
            writer.uint32(16).int64(message.startTimeMs);
        }
        if (message.duration !== 0) {
            writer.uint32(24).int32(message.duration);
        }
        if (message.channelId !== "0") {
            writer.uint32(32).int64(message.channelId);
        }
        if (message.status !== 0) {
            writer.uint32(40).int32(message.status);
        }
        if (message.inviteType !== 0) {
            writer.uint32(48).int32(message.inviteType);
        }
        if (message.giftModeMeta !== undefined) {
            exports.GiftModeMetaDecoder.encode(message.giftModeMeta, writer.uint32(58).fork()).join();
        }
        if (message.battleType !== 0) {
            writer.uint32(64).int32(message.battleType);
        }
        if (message.extraDurationSecond !== "0") {
            writer.uint32(72).int64(message.extraDurationSecond);
        }
        if (message.endTimeMs !== "0") {
            writer.uint32(80).int64(message.endTimeMs);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBattleSetting();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.battleId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.startTimeMs = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.duration = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.channelId = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.inviteType = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.giftModeMeta = exports.GiftModeMetaDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.battleType = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.extraDurationSecond = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.endTimeMs = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBattleTeamUserArmies() {
    return { teamId: "0", teamUsers: [], teamTotalScore: "0", userArmies: undefined, hostRank: "0" };
}
exports.BattleTeamUserArmiesDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.teamId !== "0") {
            writer.uint32(8).int64(message.teamId);
        }
        for (const v of message.teamUsers) {
            exports.BattleTeamUserDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.teamTotalScore !== "0") {
            writer.uint32(24).int64(message.teamTotalScore);
        }
        if (message.userArmies !== undefined) {
            exports.BattleUserArmiesDecoder.encode(message.userArmies, writer.uint32(34).fork()).join();
        }
        if (message.hostRank !== "0") {
            writer.uint32(40).int64(message.hostRank);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBattleTeamUserArmies();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.teamId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.teamUsers.push(exports.BattleTeamUserDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.teamTotalScore = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.userArmies = exports.BattleUserArmiesDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.hostRank = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBattleUserArmies() {
    return { userArmy: [], hostScore: "0", anchorIdStr: "" };
}
exports.BattleUserArmiesDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.userArmy) {
            exports.BattleUserArmyDecoder.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.hostScore !== "0") {
            writer.uint32(16).int64(message.hostScore);
        }
        if (message.anchorIdStr !== "") {
            writer.uint32(26).string(message.anchorIdStr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBattleUserArmies();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.userArmy.push(exports.BattleUserArmyDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.hostScore = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.anchorIdStr = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBattleUserArmy() {
    return { userId: "0", score: "0", nickname: "", avatarThumb: undefined, diamondScore: "0", userIdStr: "" };
}
exports.BattleUserArmyDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.score !== "0") {
            writer.uint32(16).int64(message.score);
        }
        if (message.nickname !== "") {
            writer.uint32(26).string(message.nickname);
        }
        if (message.avatarThumb !== undefined) {
            exports.ImageDecoder.encode(message.avatarThumb, writer.uint32(34).fork()).join();
        }
        if (message.diamondScore !== "0") {
            writer.uint32(40).int64(message.diamondScore);
        }
        if (message.userIdStr !== "") {
            writer.uint32(50).string(message.userIdStr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBattleUserArmy();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.score = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.nickname = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.avatarThumb = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.diamondScore = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.userIdStr = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseHighScoreControlCfg() {
    return { normalControlApplied: false, threshold: "0", originDisplayToUserList: [] };
}
exports.HighScoreControlCfgDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.normalControlApplied !== false) {
            writer.uint32(8).bool(message.normalControlApplied);
        }
        if (message.threshold !== "0") {
            writer.uint32(16).int64(message.threshold);
        }
        writer.uint32(26).fork();
        for (const v of message.originDisplayToUserList) {
            writer.int64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHighScoreControlCfg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.normalControlApplied = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.threshold = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag === 24) {
                        message.originDisplayToUserList.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.originDisplayToUserList.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseMessage() {
    return { type: "", binary: new Uint8Array(0) };
}
exports.MessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.binary.length !== 0) {
            writer.uint32(18).bytes(message.binary);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.binary = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebsocketParam() {
    return { name: "", value: "" };
}
exports.WebsocketParamDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebsocketParam();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastRoomUserSeqMessage() {
    return {
        common: undefined,
        viewerCount: 0,
        ranksList: [],
        popStr: "",
        seatsList: [],
        popularity: "0",
        totalUser: 0,
        anonymous: "0",
    };
}
exports.WebcastRoomUserSeqMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.viewerCount !== 0) {
            writer.uint32(24).int32(message.viewerCount);
        }
        for (const v of message.ranksList) {
            exports.WebcastRoomUserSeqMessage_ContributorDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.popStr !== "") {
            writer.uint32(34).string(message.popStr);
        }
        for (const v of message.seatsList) {
            exports.WebcastRoomUserSeqMessage_ContributorDecoder.encode(v, writer.uint32(42).fork()).join();
        }
        if (message.popularity !== "0") {
            writer.uint32(48).int64(message.popularity);
        }
        if (message.totalUser !== 0) {
            writer.uint32(56).int32(message.totalUser);
        }
        if (message.anonymous !== "0") {
            writer.uint32(64).int64(message.anonymous);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastRoomUserSeqMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.viewerCount = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.ranksList.push(exports.WebcastRoomUserSeqMessage_ContributorDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.popStr = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.seatsList.push(exports.WebcastRoomUserSeqMessage_ContributorDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.popularity = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.totalUser = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.anonymous = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastRoomUserSeqMessage_Contributor() {
    return { coinCount: 0, user: undefined, rank: 0, delta: "0" };
}
exports.WebcastRoomUserSeqMessage_ContributorDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.coinCount !== 0) {
            writer.uint32(8).int32(message.coinCount);
        }
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(18).fork()).join();
        }
        if (message.rank !== 0) {
            writer.uint32(24).int32(message.rank);
        }
        if (message.delta !== "0") {
            writer.uint32(32).int64(message.delta);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastRoomUserSeqMessage_Contributor();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.coinCount = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.rank = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.delta = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseImageModel() {
    return {
        mUrls: [],
        mUri: "",
        height: 0,
        width: 0,
        avgColor: "",
        imageType: 0,
        schema: "",
        content: undefined,
        isAnimated: false,
    };
}
exports.ImageModelDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.mUrls) {
            writer.uint32(10).string(v);
        }
        if (message.mUri !== "") {
            writer.uint32(18).string(message.mUri);
        }
        if (message.height !== 0) {
            writer.uint32(24).int32(message.height);
        }
        if (message.width !== 0) {
            writer.uint32(32).int32(message.width);
        }
        if (message.avgColor !== "") {
            writer.uint32(42).string(message.avgColor);
        }
        if (message.imageType !== 0) {
            writer.uint32(48).int32(message.imageType);
        }
        if (message.schema !== "") {
            writer.uint32(58).string(message.schema);
        }
        if (message.content !== undefined) {
            exports.ImageModel_ContentDecoder.encode(message.content, writer.uint32(66).fork()).join();
        }
        if (message.isAnimated !== false) {
            writer.uint32(72).bool(message.isAnimated);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImageModel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.mUrls.push(reader.string());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.mUri = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.width = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.avgColor = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.imageType = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.schema = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.content = exports.ImageModel_ContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.isAnimated = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseImageModel_Content() {
    return { name: "", fontColor: "", level: "0" };
}
exports.ImageModel_ContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.fontColor !== "") {
            writer.uint32(18).string(message.fontColor);
        }
        if (message.level !== "0") {
            writer.uint32(24).int64(message.level);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImageModel_Content();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.fontColor = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.level = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastChatMessage() {
    return {
        common: undefined,
        user: undefined,
        comment: "",
        visibleToSender: false,
        background: undefined,
        fullScreenTextColor: "",
        backgroundImageV2: undefined,
        publicAreaCommon: undefined,
        giftImage: undefined,
        inputType: 0,
        atUser: undefined,
        emotes: [],
        contentLanguage: "",
        msgFilter: undefined,
        quickChatScene: 0,
        communityflaggedStatus: 0,
        commentQualityScores: [],
        userIdentity: undefined,
        commentTag: [],
        publicAreaMessageCommon: undefined,
        screenTime: "0",
        signature: "",
        signatureVersion: "",
        ecStreamerKey: "",
    };
}
exports.WebcastChatMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(18).fork()).join();
        }
        if (message.comment !== "") {
            writer.uint32(26).string(message.comment);
        }
        if (message.visibleToSender !== false) {
            writer.uint32(32).bool(message.visibleToSender);
        }
        if (message.background !== undefined) {
            exports.ImageModelDecoder.encode(message.background, writer.uint32(42).fork()).join();
        }
        if (message.fullScreenTextColor !== "") {
            writer.uint32(50).string(message.fullScreenTextColor);
        }
        if (message.backgroundImageV2 !== undefined) {
            exports.ImageModelDecoder.encode(message.backgroundImageV2, writer.uint32(58).fork()).join();
        }
        if (message.publicAreaCommon !== undefined) {
            exports.PublicAreaCommonDecoder.encode(message.publicAreaCommon, writer.uint32(74).fork()).join();
        }
        if (message.giftImage !== undefined) {
            exports.ImageModelDecoder.encode(message.giftImage, writer.uint32(82).fork()).join();
        }
        if (message.inputType !== 0) {
            writer.uint32(88).int32(message.inputType);
        }
        if (message.atUser !== undefined) {
            exports.UserDecoder.encode(message.atUser, writer.uint32(98).fork()).join();
        }
        for (const v of message.emotes) {
            exports.WebcastSubEmoteDecoder.encode(v, writer.uint32(106).fork()).join();
        }
        if (message.contentLanguage !== "") {
            writer.uint32(114).string(message.contentLanguage);
        }
        if (message.msgFilter !== undefined) {
            exports.MsgFilterDecoder.encode(message.msgFilter, writer.uint32(122).fork()).join();
        }
        if (message.quickChatScene !== 0) {
            writer.uint32(128).int32(message.quickChatScene);
        }
        if (message.communityflaggedStatus !== 0) {
            writer.uint32(136).int32(message.communityflaggedStatus);
        }
        for (const v of message.commentQualityScores) {
            exports.WebcastChatMessage_CommentQualityScoreDecoder.encode(v, writer.uint32(154).fork()).join();
        }
        if (message.userIdentity !== undefined) {
            exports.WebcastChatMessage_UserIdentityDecoder.encode(message.userIdentity, writer.uint32(146).fork()).join();
        }
        writer.uint32(162).fork();
        for (const v of message.commentTag) {
            writer.int32(v);
        }
        writer.join();
        if (message.publicAreaMessageCommon !== undefined) {
            exports.PublicAreaMessageCommonDecoder.encode(message.publicAreaMessageCommon, writer.uint32(170).fork()).join();
        }
        if (message.screenTime !== "0") {
            writer.uint32(176).int64(message.screenTime);
        }
        if (message.signature !== "") {
            writer.uint32(186).string(message.signature);
        }
        if (message.signatureVersion !== "") {
            writer.uint32(194).string(message.signatureVersion);
        }
        if (message.ecStreamerKey !== "") {
            writer.uint32(202).string(message.ecStreamerKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastChatMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.comment = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.visibleToSender = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.background = exports.ImageModelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.fullScreenTextColor = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.backgroundImageV2 = exports.ImageModelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.publicAreaCommon = exports.PublicAreaCommonDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.giftImage = exports.ImageModelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.inputType = reader.int32();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.atUser = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.emotes.push(exports.WebcastSubEmoteDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.contentLanguage = reader.string();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.msgFilter = exports.MsgFilterDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.quickChatScene = reader.int32();
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.communityflaggedStatus = reader.int32();
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.commentQualityScores.push(exports.WebcastChatMessage_CommentQualityScoreDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.userIdentity = exports.WebcastChatMessage_UserIdentityDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag === 160) {
                        message.commentTag.push(reader.int32());
                        continue;
                    }
                    if (tag === 162) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.commentTag.push(reader.int32());
                        }
                        continue;
                    }
                    break;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.publicAreaMessageCommon = exports.PublicAreaMessageCommonDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 22: {
                    if (tag !== 176) {
                        break;
                    }
                    message.screenTime = reader.int64().toString();
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.signature = reader.string();
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.signatureVersion = reader.string();
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.ecStreamerKey = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastChatMessage_UserIdentity() {
    return {
        isGiftGiverOfAnchor: false,
        isSubscriberOfAnchor: false,
        isMutualFollowingWithAnchor: false,
        isFollowerOfAnchor: false,
        isModeratorOfAnchor: false,
        isAnchor: false,
    };
}
exports.WebcastChatMessage_UserIdentityDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.isGiftGiverOfAnchor !== false) {
            writer.uint32(8).bool(message.isGiftGiverOfAnchor);
        }
        if (message.isSubscriberOfAnchor !== false) {
            writer.uint32(16).bool(message.isSubscriberOfAnchor);
        }
        if (message.isMutualFollowingWithAnchor !== false) {
            writer.uint32(24).bool(message.isMutualFollowingWithAnchor);
        }
        if (message.isFollowerOfAnchor !== false) {
            writer.uint32(32).bool(message.isFollowerOfAnchor);
        }
        if (message.isModeratorOfAnchor !== false) {
            writer.uint32(40).bool(message.isModeratorOfAnchor);
        }
        if (message.isAnchor !== false) {
            writer.uint32(48).bool(message.isAnchor);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastChatMessage_UserIdentity();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.isGiftGiverOfAnchor = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isSubscriberOfAnchor = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.isMutualFollowingWithAnchor = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.isFollowerOfAnchor = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.isModeratorOfAnchor = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.isAnchor = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastChatMessage_CommentQualityScore() {
    return { version: "", score: "0" };
}
exports.WebcastChatMessage_CommentQualityScoreDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        if (message.score !== "0") {
            writer.uint32(16).int64(message.score);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastChatMessage_CommentQualityScore();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.score = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseEmoteUploadInfo() {
    return { userId: "0", emoteUploadSource: undefined, userInfo: undefined, userIdStr: "" };
}
exports.EmoteUploadInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.emoteUploadSource !== undefined) {
            writer.uint32(16).int32(message.emoteUploadSource);
        }
        if (message.userInfo !== undefined) {
            exports.UserDecoder.encode(message.userInfo, writer.uint32(26).fork()).join();
        }
        if (message.userIdStr !== "") {
            writer.uint32(34).string(message.userIdStr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmoteUploadInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.emoteUploadSource = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.userInfo = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.userIdStr = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastEmoteChatMessage() {
    return { common: undefined, user: undefined, emoteList: [], msgFilter: undefined, userIdentity: undefined };
}
exports.WebcastEmoteChatMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(18).fork()).join();
        }
        for (const v of message.emoteList) {
            exports.EmoteDecoder.encode(v, writer.uint32(26).fork()).join();
        }
        if (message.msgFilter !== undefined) {
            exports.MsgFilterDecoder.encode(message.msgFilter, writer.uint32(34).fork()).join();
        }
        if (message.userIdentity !== undefined) {
            exports.UserIdentityDecoder.encode(message.userIdentity, writer.uint32(42).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastEmoteChatMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.emoteList.push(exports.EmoteDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.msgFilter = exports.MsgFilterDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.userIdentity = exports.UserIdentityDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastSubEmote() {
    return { placeInComment: 0, emote: undefined };
}
exports.WebcastSubEmoteDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.placeInComment !== 0) {
            writer.uint32(8).int32(message.placeInComment);
        }
        if (message.emote !== undefined) {
            exports.EmoteDetailsDecoder.encode(message.emote, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastSubEmote();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.placeInComment = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.emote = exports.EmoteDetailsDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastMemberMessage() {
    return {
        common: undefined,
        user: undefined,
        action: 0,
        memberCount: 0,
        operator: undefined,
        isSetToAdmin: false,
        isTopUser: false,
        rankScore: "0",
        topUserNo: "0",
        enterType: "0",
        actionDescription: "",
        userId: "0",
        effectConfig: undefined,
        popStr: "",
        enterEffectConfig: undefined,
        backgroundImage: undefined,
        backgroundImageV2: undefined,
        anchorDisplayText: undefined,
        clientEnterSource: "",
        clientEnterType: "",
        clientLiveReason: "",
        actionDuration: "0",
        userShareType: "",
        displayStyle: 0,
        adminPermissions: {},
        kickSource: 0,
        allowPreviewTime: "0",
        lastSubscriptionAction: "0",
        publicAreaMessageCommon: undefined,
        liveSubOnlyTier: "0",
        liveSubOnlyMonth: "0",
        ecStreamerKey: "",
        showWave: "0",
        waveAlgorithmData: undefined,
        hitAbStatus: 0,
    };
}
exports.WebcastMemberMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(18).fork()).join();
        }
        if (message.action !== 0) {
            writer.uint32(80).int32(message.action);
        }
        if (message.memberCount !== 0) {
            writer.uint32(24).int32(message.memberCount);
        }
        if (message.operator !== undefined) {
            exports.UserDecoder.encode(message.operator, writer.uint32(34).fork()).join();
        }
        if (message.isSetToAdmin !== false) {
            writer.uint32(40).bool(message.isSetToAdmin);
        }
        if (message.isTopUser !== false) {
            writer.uint32(48).bool(message.isTopUser);
        }
        if (message.rankScore !== "0") {
            writer.uint32(56).int64(message.rankScore);
        }
        if (message.topUserNo !== "0") {
            writer.uint32(64).int64(message.topUserNo);
        }
        if (message.enterType !== "0") {
            writer.uint32(72).int64(message.enterType);
        }
        if (message.actionDescription !== "") {
            writer.uint32(90).string(message.actionDescription);
        }
        if (message.userId !== "0") {
            writer.uint32(96).int64(message.userId);
        }
        if (message.effectConfig !== undefined) {
            exports.WebcastMemberMessage_EffectConfigDecoder.encode(message.effectConfig, writer.uint32(106).fork()).join();
        }
        if (message.popStr !== "") {
            writer.uint32(114).string(message.popStr);
        }
        if (message.enterEffectConfig !== undefined) {
            exports.WebcastMemberMessage_EffectConfigDecoder.encode(message.enterEffectConfig, writer.uint32(122).fork()).join();
        }
        if (message.backgroundImage !== undefined) {
            exports.ImageDecoder.encode(message.backgroundImage, writer.uint32(130).fork()).join();
        }
        if (message.backgroundImageV2 !== undefined) {
            exports.ImageDecoder.encode(message.backgroundImageV2, writer.uint32(138).fork()).join();
        }
        if (message.anchorDisplayText !== undefined) {
            exports.TextDecoder.encode(message.anchorDisplayText, writer.uint32(146).fork()).join();
        }
        if (message.clientEnterSource !== "") {
            writer.uint32(154).string(message.clientEnterSource);
        }
        if (message.clientEnterType !== "") {
            writer.uint32(162).string(message.clientEnterType);
        }
        if (message.clientLiveReason !== "") {
            writer.uint32(170).string(message.clientLiveReason);
        }
        if (message.actionDuration !== "0") {
            writer.uint32(176).int64(message.actionDuration);
        }
        if (message.userShareType !== "") {
            writer.uint32(186).string(message.userShareType);
        }
        if (message.displayStyle !== 0) {
            writer.uint32(192).int32(message.displayStyle);
        }
        Object.entries(message.adminPermissions).forEach(([key, value]) => {
            exports.WebcastMemberMessage_AdminPermissionsEntryDecoder.encode({ key: key, value }, writer.uint32(202).fork()).join();
        });
        if (message.kickSource !== 0) {
            writer.uint32(208).int32(message.kickSource);
        }
        if (message.allowPreviewTime !== "0") {
            writer.uint32(216).int64(message.allowPreviewTime);
        }
        if (message.lastSubscriptionAction !== "0") {
            writer.uint32(224).int64(message.lastSubscriptionAction);
        }
        if (message.publicAreaMessageCommon !== undefined) {
            exports.PublicAreaMessageCommonDecoder.encode(message.publicAreaMessageCommon, writer.uint32(234).fork()).join();
        }
        if (message.liveSubOnlyTier !== "0") {
            writer.uint32(240).int64(message.liveSubOnlyTier);
        }
        if (message.liveSubOnlyMonth !== "0") {
            writer.uint32(248).int64(message.liveSubOnlyMonth);
        }
        if (message.ecStreamerKey !== "") {
            writer.uint32(258).string(message.ecStreamerKey);
        }
        if (message.showWave !== "0") {
            writer.uint32(264).int64(message.showWave);
        }
        if (message.waveAlgorithmData !== undefined) {
            exports.WebcastMemberMessage_WaveAlgorithmDataDecoder.encode(message.waveAlgorithmData, writer.uint32(274).fork()).join();
        }
        if (message.hitAbStatus !== 0) {
            writer.uint32(280).int32(message.hitAbStatus);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastMemberMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.memberCount = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.operator = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.isSetToAdmin = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.isTopUser = reader.bool();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.rankScore = reader.int64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.topUserNo = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.enterType = reader.int64().toString();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.actionDescription = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.effectConfig = exports.WebcastMemberMessage_EffectConfigDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.popStr = reader.string();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.enterEffectConfig = exports.WebcastMemberMessage_EffectConfigDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.backgroundImage = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.backgroundImageV2 = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.anchorDisplayText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.clientEnterSource = reader.string();
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.clientEnterType = reader.string();
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.clientLiveReason = reader.string();
                    continue;
                }
                case 22: {
                    if (tag !== 176) {
                        break;
                    }
                    message.actionDuration = reader.int64().toString();
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.userShareType = reader.string();
                    continue;
                }
                case 24: {
                    if (tag !== 192) {
                        break;
                    }
                    message.displayStyle = reader.int32();
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    const entry25 = exports.WebcastMemberMessage_AdminPermissionsEntryDecoder.decode(reader, reader.uint32());
                    if (entry25.value !== undefined) {
                        message.adminPermissions[entry25.key] = entry25.value;
                    }
                    continue;
                }
                case 26: {
                    if (tag !== 208) {
                        break;
                    }
                    message.kickSource = reader.int32();
                    continue;
                }
                case 27: {
                    if (tag !== 216) {
                        break;
                    }
                    message.allowPreviewTime = reader.int64().toString();
                    continue;
                }
                case 28: {
                    if (tag !== 224) {
                        break;
                    }
                    message.lastSubscriptionAction = reader.int64().toString();
                    continue;
                }
                case 29: {
                    if (tag !== 234) {
                        break;
                    }
                    message.publicAreaMessageCommon = exports.PublicAreaMessageCommonDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 30: {
                    if (tag !== 240) {
                        break;
                    }
                    message.liveSubOnlyTier = reader.int64().toString();
                    continue;
                }
                case 31: {
                    if (tag !== 248) {
                        break;
                    }
                    message.liveSubOnlyMonth = reader.int64().toString();
                    continue;
                }
                case 32: {
                    if (tag !== 258) {
                        break;
                    }
                    message.ecStreamerKey = reader.string();
                    continue;
                }
                case 33: {
                    if (tag !== 264) {
                        break;
                    }
                    message.showWave = reader.int64().toString();
                    continue;
                }
                case 34: {
                    if (tag !== 274) {
                        break;
                    }
                    message.waveAlgorithmData = exports.WebcastMemberMessage_WaveAlgorithmDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 35: {
                    if (tag !== 280) {
                        break;
                    }
                    message.hitAbStatus = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastMemberMessage_AdminPermissionsEntry() {
    return { key: 0, value: 0 };
}
exports.WebcastMemberMessage_AdminPermissionsEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== 0) {
            writer.uint32(8).int32(message.key);
        }
        if (message.value !== 0) {
            writer.uint32(16).int32(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastMemberMessage_AdminPermissionsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.value = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastMemberMessage_EffectConfig() {
    return {
        type: "0",
        icon: undefined,
        avatarPos: "0",
        text: undefined,
        textIcon: undefined,
        stayTime: 0,
        animAssetId: "0",
        badge: undefined,
        flexSettingArrayList: [],
    };
}
exports.WebcastMemberMessage_EffectConfigDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== "0") {
            writer.uint32(8).int64(message.type);
        }
        if (message.icon !== undefined) {
            exports.ImageDecoder.encode(message.icon, writer.uint32(18).fork()).join();
        }
        if (message.avatarPos !== "0") {
            writer.uint32(24).int64(message.avatarPos);
        }
        if (message.text !== undefined) {
            exports.TextDecoder.encode(message.text, writer.uint32(34).fork()).join();
        }
        if (message.textIcon !== undefined) {
            exports.ImageDecoder.encode(message.textIcon, writer.uint32(42).fork()).join();
        }
        if (message.stayTime !== 0) {
            writer.uint32(48).int32(message.stayTime);
        }
        if (message.animAssetId !== "0") {
            writer.uint32(56).int64(message.animAssetId);
        }
        if (message.badge !== undefined) {
            exports.ImageDecoder.encode(message.badge, writer.uint32(66).fork()).join();
        }
        writer.uint32(74).fork();
        for (const v of message.flexSettingArrayList) {
            writer.int64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastMemberMessage_EffectConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.icon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.avatarPos = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.text = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.textIcon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.stayTime = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.animAssetId = reader.int64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.badge = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag === 72) {
                        message.flexSettingArrayList.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 74) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.flexSettingArrayList.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastMemberMessage_WaveAlgorithmData() {
    return { algorithmVersion: "", isAlgHit: false, predictScore: "", isRewatch: false, isFollow: false };
}
exports.WebcastMemberMessage_WaveAlgorithmDataDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.algorithmVersion !== "") {
            writer.uint32(10).string(message.algorithmVersion);
        }
        if (message.isAlgHit !== false) {
            writer.uint32(16).bool(message.isAlgHit);
        }
        if (message.predictScore !== "") {
            writer.uint32(26).string(message.predictScore);
        }
        if (message.isRewatch !== false) {
            writer.uint32(32).bool(message.isRewatch);
        }
        if (message.isFollow !== false) {
            writer.uint32(40).bool(message.isFollow);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastMemberMessage_WaveAlgorithmData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.algorithmVersion = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.isAlgHit = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.predictScore = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.isRewatch = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.isFollow = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastMemberMessage_EffectConfigBean() {
    return { type: 0, icon: undefined, textKey: undefined, badge: undefined };
}
exports.WebcastMemberMessage_EffectConfigBeanDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.icon !== undefined) {
            exports.ImageModelDecoder.encode(message.icon, writer.uint32(18).fork()).join();
        }
        if (message.textKey !== undefined) {
            exports.TextDecoder.encode(message.textKey, writer.uint32(34).fork()).join();
        }
        if (message.badge !== undefined) {
            exports.ImageModelDecoder.encode(message.badge, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastMemberMessage_EffectConfigBean();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.icon = exports.ImageModelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.textKey = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.badge = exports.ImageModelDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage() {
    return {
        common: undefined,
        giftId: 0,
        user: undefined,
        repeatEnd: 0,
        groupId: "0",
        giftDetails: undefined,
        monitorExtra: "",
        fanTicketCount: "0",
        groupCount: 0,
        repeatCount: 0,
        comboCount: 0,
        toUser: undefined,
        textEffect: undefined,
        incomeTaskgifts: "0",
        roomFanTicketCount: "0",
        priority: undefined,
        logId: "",
        sendType: "0",
        publicAreaCommon: undefined,
        trayDisplayText: undefined,
        bannedDisplayEffects: "0",
        mTrayInfo: undefined,
        giftExtra: undefined,
        colorId: "0",
        isFirstSent: false,
        displayTextForAnchor: undefined,
        displayTextForAudience: undefined,
        orderId: "",
        giftsInBox: undefined,
        msgFilter: undefined,
        lynxExtra: [],
        userIdentity: undefined,
        matchInfo: undefined,
        linkmicGiftExpressionStrategy: 0,
        flyingMicResources: undefined,
        disableGiftTracking: false,
        asset: undefined,
        version: 0,
        sponsorshipInfo: [],
        flyingMicResourcesV2: undefined,
        publicAreaMessageCommon: undefined,
        signature: "",
        signatureVersion: "",
        multiGenerateMessage: false,
        toMemberId: "",
        toMemberIdInt: "0",
        toMemberNickname: "",
        interactiveGiftInfo: undefined,
    };
}
exports.WebcastGiftMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.giftId !== 0) {
            writer.uint32(16).int32(message.giftId);
        }
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(58).fork()).join();
        }
        if (message.repeatEnd !== 0) {
            writer.uint32(72).int32(message.repeatEnd);
        }
        if (message.groupId !== "0") {
            writer.uint32(88).uint64(message.groupId);
        }
        if (message.giftDetails !== undefined) {
            exports.GiftDecoder.encode(message.giftDetails, writer.uint32(122).fork()).join();
        }
        if (message.monitorExtra !== "") {
            writer.uint32(178).string(message.monitorExtra);
        }
        if (message.fanTicketCount !== "0") {
            writer.uint32(24).int64(message.fanTicketCount);
        }
        if (message.groupCount !== 0) {
            writer.uint32(32).int32(message.groupCount);
        }
        if (message.repeatCount !== 0) {
            writer.uint32(40).int32(message.repeatCount);
        }
        if (message.comboCount !== 0) {
            writer.uint32(48).int32(message.comboCount);
        }
        if (message.toUser !== undefined) {
            exports.UserDecoder.encode(message.toUser, writer.uint32(66).fork()).join();
        }
        if (message.textEffect !== undefined) {
            exports.WebcastGiftMessage_TextEffectDecoder.encode(message.textEffect, writer.uint32(82).fork()).join();
        }
        if (message.incomeTaskgifts !== "0") {
            writer.uint32(96).int64(message.incomeTaskgifts);
        }
        if (message.roomFanTicketCount !== "0") {
            writer.uint32(104).int64(message.roomFanTicketCount);
        }
        if (message.priority !== undefined) {
            exports.WebcastGiftMessage_GiftIMPriorityDecoder.encode(message.priority, writer.uint32(114).fork()).join();
        }
        if (message.logId !== "") {
            writer.uint32(130).string(message.logId);
        }
        if (message.sendType !== "0") {
            writer.uint32(136).int64(message.sendType);
        }
        if (message.publicAreaCommon !== undefined) {
            exports.PublicAreaCommonDecoder.encode(message.publicAreaCommon, writer.uint32(146).fork()).join();
        }
        if (message.trayDisplayText !== undefined) {
            exports.TextDecoder.encode(message.trayDisplayText, writer.uint32(154).fork()).join();
        }
        if (message.bannedDisplayEffects !== "0") {
            writer.uint32(160).int64(message.bannedDisplayEffects);
        }
        if (message.mTrayInfo !== undefined) {
            exports.WebcastGiftMessage_GiftTrayInfoDecoder.encode(message.mTrayInfo, writer.uint32(170).fork()).join();
        }
        if (message.giftExtra !== undefined) {
            exports.WebcastGiftMessage_GiftMonitorInfoDecoder.encode(message.giftExtra, writer.uint32(186).fork()).join();
        }
        if (message.colorId !== "0") {
            writer.uint32(192).int64(message.colorId);
        }
        if (message.isFirstSent !== false) {
            writer.uint32(200).bool(message.isFirstSent);
        }
        if (message.displayTextForAnchor !== undefined) {
            exports.TextDecoder.encode(message.displayTextForAnchor, writer.uint32(210).fork()).join();
        }
        if (message.displayTextForAudience !== undefined) {
            exports.TextDecoder.encode(message.displayTextForAudience, writer.uint32(218).fork()).join();
        }
        if (message.orderId !== "") {
            writer.uint32(226).string(message.orderId);
        }
        if (message.giftsInBox !== undefined) {
            exports.WebcastGiftMessage_GiftsBoxInfoDecoder.encode(message.giftsInBox, writer.uint32(234).fork()).join();
        }
        if (message.msgFilter !== undefined) {
            exports.MsgFilterDecoder.encode(message.msgFilter, writer.uint32(242).fork()).join();
        }
        for (const v of message.lynxExtra) {
            exports.WebcastGiftMessage_LynxGiftExtraDecoder.encode(v, writer.uint32(250).fork()).join();
        }
        if (message.userIdentity !== undefined) {
            exports.UserIdentityDecoder.encode(message.userIdentity, writer.uint32(258).fork()).join();
        }
        if (message.matchInfo !== undefined) {
            exports.WebcastGiftMessage_MatchInfoDecoder.encode(message.matchInfo, writer.uint32(266).fork()).join();
        }
        if (message.linkmicGiftExpressionStrategy !== 0) {
            writer.uint32(272).int32(message.linkmicGiftExpressionStrategy);
        }
        if (message.flyingMicResources !== undefined) {
            exports.WebcastGiftMessage_FlyingMicResourcesDecoder.encode(message.flyingMicResources, writer.uint32(282).fork()).join();
        }
        if (message.disableGiftTracking !== false) {
            writer.uint32(288).bool(message.disableGiftTracking);
        }
        if (message.asset !== undefined) {
            exports.WebcastGiftMessage_AssetsModelDecoder.encode(message.asset, writer.uint32(298).fork()).join();
        }
        if (message.version !== 0) {
            writer.uint32(304).int32(message.version);
        }
        for (const v of message.sponsorshipInfo) {
            exports.WebcastGiftMessage_SponsorshipInfoDecoder.encode(v, writer.uint32(314).fork()).join();
        }
        if (message.flyingMicResourcesV2 !== undefined) {
            exports.WebcastGiftMessage_FlyingMicResourcesDecoder.encode(message.flyingMicResourcesV2, writer.uint32(322).fork()).join();
        }
        if (message.publicAreaMessageCommon !== undefined) {
            exports.PublicAreaMessageCommonDecoder.encode(message.publicAreaMessageCommon, writer.uint32(330).fork()).join();
        }
        if (message.signature !== "") {
            writer.uint32(338).string(message.signature);
        }
        if (message.signatureVersion !== "") {
            writer.uint32(346).string(message.signatureVersion);
        }
        if (message.multiGenerateMessage !== false) {
            writer.uint32(352).bool(message.multiGenerateMessage);
        }
        if (message.toMemberId !== "") {
            writer.uint32(362).string(message.toMemberId);
        }
        if (message.toMemberIdInt !== "0") {
            writer.uint32(368).int64(message.toMemberIdInt);
        }
        if (message.toMemberNickname !== "") {
            writer.uint32(378).string(message.toMemberNickname);
        }
        if (message.interactiveGiftInfo !== undefined) {
            exports.WebcastGiftMessage_InteractiveGiftInfoDecoder.encode(message.interactiveGiftInfo, writer.uint32(386).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.giftId = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.repeatEnd = reader.int32();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.groupId = reader.uint64().toString();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.giftDetails = exports.GiftDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.monitorExtra = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.fanTicketCount = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.groupCount = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.repeatCount = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.comboCount = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.toUser = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.textEffect = exports.WebcastGiftMessage_TextEffectDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.incomeTaskgifts = reader.int64().toString();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.roomFanTicketCount = reader.int64().toString();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.priority = exports.WebcastGiftMessage_GiftIMPriorityDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.logId = reader.string();
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.sendType = reader.int64().toString();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.publicAreaCommon = exports.PublicAreaCommonDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.trayDisplayText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 160) {
                        break;
                    }
                    message.bannedDisplayEffects = reader.int64().toString();
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.mTrayInfo = exports.WebcastGiftMessage_GiftTrayInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.giftExtra = exports.WebcastGiftMessage_GiftMonitorInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 24: {
                    if (tag !== 192) {
                        break;
                    }
                    message.colorId = reader.int64().toString();
                    continue;
                }
                case 25: {
                    if (tag !== 200) {
                        break;
                    }
                    message.isFirstSent = reader.bool();
                    continue;
                }
                case 26: {
                    if (tag !== 210) {
                        break;
                    }
                    message.displayTextForAnchor = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 27: {
                    if (tag !== 218) {
                        break;
                    }
                    message.displayTextForAudience = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 28: {
                    if (tag !== 226) {
                        break;
                    }
                    message.orderId = reader.string();
                    continue;
                }
                case 29: {
                    if (tag !== 234) {
                        break;
                    }
                    message.giftsInBox = exports.WebcastGiftMessage_GiftsBoxInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 30: {
                    if (tag !== 242) {
                        break;
                    }
                    message.msgFilter = exports.MsgFilterDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 31: {
                    if (tag !== 250) {
                        break;
                    }
                    message.lynxExtra.push(exports.WebcastGiftMessage_LynxGiftExtraDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 32: {
                    if (tag !== 258) {
                        break;
                    }
                    message.userIdentity = exports.UserIdentityDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 33: {
                    if (tag !== 266) {
                        break;
                    }
                    message.matchInfo = exports.WebcastGiftMessage_MatchInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 34: {
                    if (tag !== 272) {
                        break;
                    }
                    message.linkmicGiftExpressionStrategy = reader.int32();
                    continue;
                }
                case 35: {
                    if (tag !== 282) {
                        break;
                    }
                    message.flyingMicResources = exports.WebcastGiftMessage_FlyingMicResourcesDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 36: {
                    if (tag !== 288) {
                        break;
                    }
                    message.disableGiftTracking = reader.bool();
                    continue;
                }
                case 37: {
                    if (tag !== 298) {
                        break;
                    }
                    message.asset = exports.WebcastGiftMessage_AssetsModelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 38: {
                    if (tag !== 304) {
                        break;
                    }
                    message.version = reader.int32();
                    continue;
                }
                case 39: {
                    if (tag !== 314) {
                        break;
                    }
                    message.sponsorshipInfo.push(exports.WebcastGiftMessage_SponsorshipInfoDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 40: {
                    if (tag !== 322) {
                        break;
                    }
                    message.flyingMicResourcesV2 = exports.WebcastGiftMessage_FlyingMicResourcesDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 41: {
                    if (tag !== 330) {
                        break;
                    }
                    message.publicAreaMessageCommon = exports.PublicAreaMessageCommonDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 42: {
                    if (tag !== 338) {
                        break;
                    }
                    message.signature = reader.string();
                    continue;
                }
                case 43: {
                    if (tag !== 346) {
                        break;
                    }
                    message.signatureVersion = reader.string();
                    continue;
                }
                case 44: {
                    if (tag !== 352) {
                        break;
                    }
                    message.multiGenerateMessage = reader.bool();
                    continue;
                }
                case 45: {
                    if (tag !== 362) {
                        break;
                    }
                    message.toMemberId = reader.string();
                    continue;
                }
                case 46: {
                    if (tag !== 368) {
                        break;
                    }
                    message.toMemberIdInt = reader.int64().toString();
                    continue;
                }
                case 47: {
                    if (tag !== 378) {
                        break;
                    }
                    message.toMemberNickname = reader.string();
                    continue;
                }
                case 48: {
                    if (tag !== 386) {
                        break;
                    }
                    message.interactiveGiftInfo = exports.WebcastGiftMessage_InteractiveGiftInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_InteractiveGiftInfo() {
    return { crossScreenDelay: "0", crossScreenRole: "0", ignoreConfig: 0, uniqId: "0", toUserTeamId: "0" };
}
exports.WebcastGiftMessage_InteractiveGiftInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.crossScreenDelay !== "0") {
            writer.uint32(8).int64(message.crossScreenDelay);
        }
        if (message.crossScreenRole !== "0") {
            writer.uint32(16).int64(message.crossScreenRole);
        }
        if (message.ignoreConfig !== 0) {
            writer.uint32(24).int32(message.ignoreConfig);
        }
        if (message.uniqId !== "0") {
            writer.uint32(32).int64(message.uniqId);
        }
        if (message.toUserTeamId !== "0") {
            writer.uint32(40).int64(message.toUserTeamId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_InteractiveGiftInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.crossScreenDelay = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.crossScreenRole = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.ignoreConfig = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.uniqId = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.toUserTeamId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_GiftIMPriority() {
    return { queueSizesList: [], selfQueuePriority: "0", priority: "0" };
}
exports.WebcastGiftMessage_GiftIMPriorityDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        writer.uint32(10).fork();
        for (const v of message.queueSizesList) {
            writer.int64(v);
        }
        writer.join();
        if (message.selfQueuePriority !== "0") {
            writer.uint32(16).int64(message.selfQueuePriority);
        }
        if (message.priority !== "0") {
            writer.uint32(24).int64(message.priority);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftIMPriority();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag === 8) {
                        message.queueSizesList.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 10) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.queueSizesList.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.selfQueuePriority = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.priority = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_TextEffect() {
    return { portraitDetail: undefined, landscapeDetail: undefined };
}
exports.WebcastGiftMessage_TextEffectDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.portraitDetail !== undefined) {
            exports.WebcastGiftMessage_TextEffect_DetailDecoder.encode(message.portraitDetail, writer.uint32(10).fork()).join();
        }
        if (message.landscapeDetail !== undefined) {
            exports.WebcastGiftMessage_TextEffect_DetailDecoder.encode(message.landscapeDetail, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_TextEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.portraitDetail = exports.WebcastGiftMessage_TextEffect_DetailDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.landscapeDetail = exports.WebcastGiftMessage_TextEffect_DetailDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_TextEffect_Detail() {
    return {
        text: undefined,
        textFontSize: 0,
        background: undefined,
        start: "0",
        duration: "0",
        x: 0,
        y: 0,
        width: 0,
        height: 0,
        shadowDx: 0,
        shadowDy: 0,
        shadowRadius: 0,
        shadowColor: "",
        strokeColor: "",
        strokeWidth: 0,
    };
}
exports.WebcastGiftMessage_TextEffect_DetailDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.text !== undefined) {
            exports.TextDecoder.encode(message.text, writer.uint32(10).fork()).join();
        }
        if (message.textFontSize !== 0) {
            writer.uint32(16).int32(message.textFontSize);
        }
        if (message.background !== undefined) {
            exports.ImageDecoder.encode(message.background, writer.uint32(26).fork()).join();
        }
        if (message.start !== "0") {
            writer.uint32(32).int64(message.start);
        }
        if (message.duration !== "0") {
            writer.uint32(40).int64(message.duration);
        }
        if (message.x !== 0) {
            writer.uint32(48).int32(message.x);
        }
        if (message.y !== 0) {
            writer.uint32(56).int32(message.y);
        }
        if (message.width !== 0) {
            writer.uint32(64).int32(message.width);
        }
        if (message.height !== 0) {
            writer.uint32(72).int32(message.height);
        }
        if (message.shadowDx !== 0) {
            writer.uint32(80).int32(message.shadowDx);
        }
        if (message.shadowDy !== 0) {
            writer.uint32(88).int32(message.shadowDy);
        }
        if (message.shadowRadius !== 0) {
            writer.uint32(96).int32(message.shadowRadius);
        }
        if (message.shadowColor !== "") {
            writer.uint32(106).string(message.shadowColor);
        }
        if (message.strokeColor !== "") {
            writer.uint32(114).string(message.strokeColor);
        }
        if (message.strokeWidth !== 0) {
            writer.uint32(120).int32(message.strokeWidth);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_TextEffect_Detail();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.text = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.textFontSize = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.background = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.start = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.duration = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.x = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.y = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.width = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.shadowDx = reader.int32();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.shadowDy = reader.int32();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.shadowRadius = reader.int32();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.shadowColor = reader.string();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.strokeColor = reader.string();
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.strokeWidth = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_GiftTrayInfo() {
    return {
        mDynamicImg: undefined,
        canMirror: false,
        trayNormalBgImg: undefined,
        trayNormalBgColor: [],
        traySmallBgImg: undefined,
        traySmallBgColor: [],
        rightTagText: undefined,
        rightTagBgImg: undefined,
        rightTagBgColor: [],
        trayNameTextColor: "",
        trayDescTextColor: "",
        rightTagJumpSchema: "",
    };
}
exports.WebcastGiftMessage_GiftTrayInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.mDynamicImg !== undefined) {
            exports.ImageDecoder.encode(message.mDynamicImg, writer.uint32(10).fork()).join();
        }
        if (message.canMirror !== false) {
            writer.uint32(16).bool(message.canMirror);
        }
        if (message.trayNormalBgImg !== undefined) {
            exports.ImageDecoder.encode(message.trayNormalBgImg, writer.uint32(26).fork()).join();
        }
        for (const v of message.trayNormalBgColor) {
            writer.uint32(34).string(v);
        }
        if (message.traySmallBgImg !== undefined) {
            exports.ImageDecoder.encode(message.traySmallBgImg, writer.uint32(42).fork()).join();
        }
        for (const v of message.traySmallBgColor) {
            writer.uint32(50).string(v);
        }
        if (message.rightTagText !== undefined) {
            exports.TextDecoder.encode(message.rightTagText, writer.uint32(58).fork()).join();
        }
        if (message.rightTagBgImg !== undefined) {
            exports.ImageDecoder.encode(message.rightTagBgImg, writer.uint32(66).fork()).join();
        }
        for (const v of message.rightTagBgColor) {
            writer.uint32(74).string(v);
        }
        if (message.trayNameTextColor !== "") {
            writer.uint32(82).string(message.trayNameTextColor);
        }
        if (message.trayDescTextColor !== "") {
            writer.uint32(90).string(message.trayDescTextColor);
        }
        if (message.rightTagJumpSchema !== "") {
            writer.uint32(98).string(message.rightTagJumpSchema);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftTrayInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.mDynamicImg = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.canMirror = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.trayNormalBgImg = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.trayNormalBgColor.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.traySmallBgImg = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.traySmallBgColor.push(reader.string());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.rightTagText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.rightTagBgImg = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.rightTagBgColor.push(reader.string());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.trayNameTextColor = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.trayDescTextColor = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.rightTagJumpSchema = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_GiftMonitorInfo() {
    return {
        anchorId: "0",
        profitApiMessageDur: "0",
        sendGiftProfitApiStartMs: "0",
        sendGiftProfitCoreStartMs: "0",
        sendGiftReqStartMs: "0",
        sendGiftSendMessageSuccessMs: "0",
        sendProfitApiDur: "0",
        toUserId: "0",
        sendGiftStartClientLocalMs: "0",
        fromPlatform: "",
        fromVersion: "",
    };
}
exports.WebcastGiftMessage_GiftMonitorInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.anchorId !== "0") {
            writer.uint32(8).int64(message.anchorId);
        }
        if (message.profitApiMessageDur !== "0") {
            writer.uint32(16).int64(message.profitApiMessageDur);
        }
        if (message.sendGiftProfitApiStartMs !== "0") {
            writer.uint32(24).int64(message.sendGiftProfitApiStartMs);
        }
        if (message.sendGiftProfitCoreStartMs !== "0") {
            writer.uint32(32).int64(message.sendGiftProfitCoreStartMs);
        }
        if (message.sendGiftReqStartMs !== "0") {
            writer.uint32(40).int64(message.sendGiftReqStartMs);
        }
        if (message.sendGiftSendMessageSuccessMs !== "0") {
            writer.uint32(48).int64(message.sendGiftSendMessageSuccessMs);
        }
        if (message.sendProfitApiDur !== "0") {
            writer.uint32(56).int64(message.sendProfitApiDur);
        }
        if (message.toUserId !== "0") {
            writer.uint32(64).int64(message.toUserId);
        }
        if (message.sendGiftStartClientLocalMs !== "0") {
            writer.uint32(72).int64(message.sendGiftStartClientLocalMs);
        }
        if (message.fromPlatform !== "") {
            writer.uint32(82).string(message.fromPlatform);
        }
        if (message.fromVersion !== "") {
            writer.uint32(90).string(message.fromVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftMonitorInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.anchorId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.profitApiMessageDur = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.sendGiftProfitApiStartMs = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.sendGiftProfitCoreStartMs = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.sendGiftReqStartMs = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.sendGiftSendMessageSuccessMs = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.sendProfitApiDur = reader.int64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.toUserId = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.sendGiftStartClientLocalMs = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.fromPlatform = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.fromVersion = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_MatchInfo() {
    return { critical: "0", effectCardInUse: false, multiplierType: 0, multiplierValue: "0" };
}
exports.WebcastGiftMessage_MatchInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.critical !== "0") {
            writer.uint32(8).int64(message.critical);
        }
        if (message.effectCardInUse !== false) {
            writer.uint32(16).bool(message.effectCardInUse);
        }
        if (message.multiplierType !== 0) {
            writer.uint32(24).int32(message.multiplierType);
        }
        if (message.multiplierValue !== "0") {
            writer.uint32(32).int64(message.multiplierValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_MatchInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.critical = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.effectCardInUse = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.multiplierType = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.multiplierValue = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_GiftsBoxInfo() {
    return { gifts: [] };
}
exports.WebcastGiftMessage_GiftsBoxInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.gifts) {
            exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBoxDecoder.encode(v, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.gifts.push(exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBoxDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox() {
    return { giftId: "0", effectId: "0", colorId: "0", remainTimes: 0, asset: undefined };
}
exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBoxDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftId !== "0") {
            writer.uint32(8).int64(message.giftId);
        }
        if (message.effectId !== "0") {
            writer.uint32(16).int64(message.effectId);
        }
        if (message.colorId !== "0") {
            writer.uint32(24).int64(message.colorId);
        }
        if (message.remainTimes !== 0) {
            writer.uint32(32).int32(message.remainTimes);
        }
        if (message.asset !== undefined) {
            exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel.encode(message.asset, writer.uint32(42).fork())
                .join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.giftId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.effectId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.colorId = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.remainTimes = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.asset = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel() {
    return {
        name: "",
        resourceUri: "",
        resourceModel: undefined,
        describe: "",
        id: "0",
        resourceType: 0,
        md5: "",
        size: "0",
        lokiExtraContent: undefined,
        downloadType: 0,
        resourceByteVC1Model: undefined,
        bytevc1Md5: "",
        videoResourceList: [],
        faceRecognitionArchiveMeta: undefined,
        lynxUrlSettingsKey: "",
        downgradeResourceType: 0,
        assetExtra: undefined,
        stickerAssetVariant: 0,
        immediateDownload: false,
        stickerAssetVariantReason: 0,
    };
}
exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.resourceUri !== "") {
            writer.uint32(18).string(message.resourceUri);
        }
        if (message.resourceModel !== undefined) {
            exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModelDecoder.encode(message.resourceModel, writer.uint32(34).fork()).join();
        }
        if (message.describe !== "") {
            writer.uint32(42).string(message.describe);
        }
        if (message.id !== "0") {
            writer.uint32(48).int64(message.id);
        }
        if (message.resourceType !== 0) {
            writer.uint32(56).int32(message.resourceType);
        }
        if (message.md5 !== "") {
            writer.uint32(66).string(message.md5);
        }
        if (message.size !== "0") {
            writer.uint32(72).int64(message.size);
        }
        if (message.lokiExtraContent !== undefined) {
            exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContentDecoder.encode(message.lokiExtraContent, writer.uint32(82).fork()).join();
        }
        if (message.downloadType !== 0) {
            writer.uint32(208).int32(message.downloadType);
        }
        if (message.resourceByteVC1Model !== undefined) {
            exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModelDecoder.encode(message.resourceByteVC1Model, writer.uint32(226).fork()).join();
        }
        if (message.bytevc1Md5 !== "") {
            writer.uint32(234).string(message.bytevc1Md5);
        }
        for (const v of message.videoResourceList) {
            exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResourceDecoder.encode(v, writer.uint32(242).fork())
                .join();
        }
        if (message.faceRecognitionArchiveMeta !== undefined) {
            exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMetaDecoder.encode(message.faceRecognitionArchiveMeta, writer.uint32(250).fork()).join();
        }
        if (message.lynxUrlSettingsKey !== "") {
            writer.uint32(258).string(message.lynxUrlSettingsKey);
        }
        if (message.downgradeResourceType !== 0) {
            writer.uint32(264).int32(message.downgradeResourceType);
        }
        if (message.assetExtra !== undefined) {
            exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtraDecoder.encode(message.assetExtra, writer.uint32(274).fork()).join();
        }
        if (message.stickerAssetVariant !== 0) {
            writer.uint32(280).int32(message.stickerAssetVariant);
        }
        if (message.immediateDownload !== false) {
            writer.uint32(288).bool(message.immediateDownload);
        }
        if (message.stickerAssetVariantReason !== 0) {
            writer.uint32(296).int32(message.stickerAssetVariantReason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.resourceUri = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.resourceModel = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.describe = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.id = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.resourceType = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.md5 = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.size = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.lokiExtraContent = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 26: {
                    if (tag !== 208) {
                        break;
                    }
                    message.downloadType = reader.int32();
                    continue;
                }
                case 28: {
                    if (tag !== 226) {
                        break;
                    }
                    message.resourceByteVC1Model = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 29: {
                    if (tag !== 234) {
                        break;
                    }
                    message.bytevc1Md5 = reader.string();
                    continue;
                }
                case 30: {
                    if (tag !== 242) {
                        break;
                    }
                    message.videoResourceList.push(exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResourceDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 31: {
                    if (tag !== 250) {
                        break;
                    }
                    message.faceRecognitionArchiveMeta =
                        exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMetaDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 32: {
                    if (tag !== 258) {
                        break;
                    }
                    message.lynxUrlSettingsKey = reader.string();
                    continue;
                }
                case 33: {
                    if (tag !== 264) {
                        break;
                    }
                    message.downgradeResourceType = reader.int32();
                    continue;
                }
                case 34: {
                    if (tag !== 274) {
                        break;
                    }
                    message.assetExtra = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtraDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 35: {
                    if (tag !== 280) {
                        break;
                    }
                    message.stickerAssetVariant = reader.int32();
                    continue;
                }
                case 36: {
                    if (tag !== 288) {
                        break;
                    }
                    message.immediateDownload = reader.bool();
                    continue;
                }
                case 37: {
                    if (tag !== 296) {
                        break;
                    }
                    message.stickerAssetVariantReason = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra() {
    return { effectStarlingKey: "" };
}
exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtraDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.effectStarlingKey !== "") {
            writer.uint32(10).string(message.effectStarlingKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_AssetExtra();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.effectStarlingKey = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel() {
    return { urlList: [], uri: "" };
}
exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModelDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.urlList) {
            writer.uint32(10).string(v);
        }
        if (message.uri !== "") {
            writer.uint32(18).string(message.uri);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.urlList.push(reader.string());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.uri = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent() {
    return {
        giftType: "",
        giftDuration: "0",
        needScreenShot: false,
        ismultiFrame: false,
        viewOverlay: "",
        befViewRenderSize: undefined,
        befViewRenderFPS: 0,
        befViewFitMode: 0,
        modelNames: "",
        requirements: [],
    };
}
exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftType !== "") {
            writer.uint32(10).string(message.giftType);
        }
        if (message.giftDuration !== "0") {
            writer.uint32(16).int64(message.giftDuration);
        }
        if (message.needScreenShot !== false) {
            writer.uint32(24).bool(message.needScreenShot);
        }
        if (message.ismultiFrame !== false) {
            writer.uint32(32).bool(message.ismultiFrame);
        }
        if (message.viewOverlay !== "") {
            writer.uint32(42).string(message.viewOverlay);
        }
        if (message.befViewRenderSize !== undefined) {
            exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSizeDecoder.encode(message.befViewRenderSize, writer.uint32(50).fork()).join();
        }
        if (message.befViewRenderFPS !== 0) {
            writer.uint32(56).int32(message.befViewRenderFPS);
        }
        if (message.befViewFitMode !== 0) {
            writer.uint32(64).int32(message.befViewFitMode);
        }
        if (message.modelNames !== "") {
            writer.uint32(74).string(message.modelNames);
        }
        for (const v of message.requirements) {
            writer.uint32(82).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.giftType = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.giftDuration = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.needScreenShot = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.ismultiFrame = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.viewOverlay = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.befViewRenderSize =
                        exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSizeDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.befViewRenderFPS = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.befViewFitMode = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.modelNames = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.requirements.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize() {
    return { with: 0, height: 0 };
}
exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSizeDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.with !== 0) {
            writer.uint32(8).int32(message.with);
        }
        if (message.height !== 0) {
            writer.uint32(16).int32(message.height);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_LokiExtraContent_BEFViewRenderSize();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.with = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource() {
    return { videoTypeName: "", videoUrl: undefined, videoMd5: "" };
}
exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResourceDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.videoTypeName !== "") {
            writer.uint32(10).string(message.videoTypeName);
        }
        if (message.videoUrl !== undefined) {
            exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModelDecoder.encode(message.videoUrl, writer.uint32(18).fork()).join();
        }
        if (message.videoMd5 !== "") {
            writer.uint32(26).string(message.videoMd5);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_VideoResource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.videoTypeName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.videoUrl = exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_ResourceModelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.videoMd5 = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta() {
    return { version: "", requirements: [], modelNames: "", sdkExtra: "" };
}
exports.WebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMetaDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        for (const v of message.requirements) {
            writer.uint32(18).string(v);
        }
        if (message.modelNames !== "") {
            writer.uint32(26).string(message.modelNames);
        }
        if (message.sdkExtra !== "") {
            writer.uint32(34).string(message.sdkExtra);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_GiftsBoxInfo_GiftInfoInBox_AssetsModel_FaceRecognitionMeta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.requirements.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.modelNames = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.sdkExtra = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_AssetsModel() {
    return {
        name: "",
        resourceUri: "",
        resourceModel: undefined,
        describe: "",
        id: "0",
        resourceType: 0,
        md5: "",
        size: "0",
        lokiExtraContent: undefined,
        downloadType: 0,
        resourceByteVC1Model: undefined,
        bytevc1Md5: "",
        videoResourceList: [],
        faceRecognitionArchiveMeta: undefined,
        lynxUrlSettingsKey: "",
        downgradeResourceType: 0,
        assetExtra: undefined,
        stickerAssetVariant: 0,
        immediateDownload: false,
        stickerAssetVariantReason: 0,
    };
}
exports.WebcastGiftMessage_AssetsModelDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.resourceUri !== "") {
            writer.uint32(18).string(message.resourceUri);
        }
        if (message.resourceModel !== undefined) {
            exports.WebcastGiftMessage_AssetsModel_ResourceModelDecoder.encode(message.resourceModel, writer.uint32(34).fork()).join();
        }
        if (message.describe !== "") {
            writer.uint32(42).string(message.describe);
        }
        if (message.id !== "0") {
            writer.uint32(48).int64(message.id);
        }
        if (message.resourceType !== 0) {
            writer.uint32(56).int32(message.resourceType);
        }
        if (message.md5 !== "") {
            writer.uint32(66).string(message.md5);
        }
        if (message.size !== "0") {
            writer.uint32(72).int64(message.size);
        }
        if (message.lokiExtraContent !== undefined) {
            exports.WebcastGiftMessage_AssetsModel_LokiExtraContentDecoder.encode(message.lokiExtraContent, writer.uint32(82).fork()).join();
        }
        if (message.downloadType !== 0) {
            writer.uint32(208).int32(message.downloadType);
        }
        if (message.resourceByteVC1Model !== undefined) {
            exports.WebcastGiftMessage_AssetsModel_ResourceModelDecoder.encode(message.resourceByteVC1Model, writer.uint32(226).fork())
                .join();
        }
        if (message.bytevc1Md5 !== "") {
            writer.uint32(234).string(message.bytevc1Md5);
        }
        for (const v of message.videoResourceList) {
            exports.WebcastGiftMessage_AssetsModel_VideoResourceDecoder.encode(v, writer.uint32(242).fork()).join();
        }
        if (message.faceRecognitionArchiveMeta !== undefined) {
            exports.WebcastGiftMessage_AssetsModel_FaceRecognitionMetaDecoder.encode(message.faceRecognitionArchiveMeta, writer.uint32(250).fork()).join();
        }
        if (message.lynxUrlSettingsKey !== "") {
            writer.uint32(258).string(message.lynxUrlSettingsKey);
        }
        if (message.downgradeResourceType !== 0) {
            writer.uint32(264).int32(message.downgradeResourceType);
        }
        if (message.assetExtra !== undefined) {
            exports.WebcastGiftMessage_AssetsModel_AssetExtraDecoder.encode(message.assetExtra, writer.uint32(274).fork()).join();
        }
        if (message.stickerAssetVariant !== 0) {
            writer.uint32(280).int32(message.stickerAssetVariant);
        }
        if (message.immediateDownload !== false) {
            writer.uint32(288).bool(message.immediateDownload);
        }
        if (message.stickerAssetVariantReason !== 0) {
            writer.uint32(296).int32(message.stickerAssetVariantReason);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_AssetsModel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.resourceUri = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.resourceModel = exports.WebcastGiftMessage_AssetsModel_ResourceModelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.describe = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.id = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.resourceType = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.md5 = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.size = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.lokiExtraContent = exports.WebcastGiftMessage_AssetsModel_LokiExtraContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 26: {
                    if (tag !== 208) {
                        break;
                    }
                    message.downloadType = reader.int32();
                    continue;
                }
                case 28: {
                    if (tag !== 226) {
                        break;
                    }
                    message.resourceByteVC1Model = exports.WebcastGiftMessage_AssetsModel_ResourceModelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 29: {
                    if (tag !== 234) {
                        break;
                    }
                    message.bytevc1Md5 = reader.string();
                    continue;
                }
                case 30: {
                    if (tag !== 242) {
                        break;
                    }
                    message.videoResourceList.push(exports.WebcastGiftMessage_AssetsModel_VideoResourceDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 31: {
                    if (tag !== 250) {
                        break;
                    }
                    message.faceRecognitionArchiveMeta = exports.WebcastGiftMessage_AssetsModel_FaceRecognitionMetaDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 32: {
                    if (tag !== 258) {
                        break;
                    }
                    message.lynxUrlSettingsKey = reader.string();
                    continue;
                }
                case 33: {
                    if (tag !== 264) {
                        break;
                    }
                    message.downgradeResourceType = reader.int32();
                    continue;
                }
                case 34: {
                    if (tag !== 274) {
                        break;
                    }
                    message.assetExtra = exports.WebcastGiftMessage_AssetsModel_AssetExtraDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 35: {
                    if (tag !== 280) {
                        break;
                    }
                    message.stickerAssetVariant = reader.int32();
                    continue;
                }
                case 36: {
                    if (tag !== 288) {
                        break;
                    }
                    message.immediateDownload = reader.bool();
                    continue;
                }
                case 37: {
                    if (tag !== 296) {
                        break;
                    }
                    message.stickerAssetVariantReason = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_AssetsModel_AssetExtra() {
    return { effectStarlingKey: "" };
}
exports.WebcastGiftMessage_AssetsModel_AssetExtraDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.effectStarlingKey !== "") {
            writer.uint32(10).string(message.effectStarlingKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_AssetsModel_AssetExtra();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.effectStarlingKey = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_AssetsModel_ResourceModel() {
    return { urlList: [], uri: "" };
}
exports.WebcastGiftMessage_AssetsModel_ResourceModelDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.urlList) {
            writer.uint32(10).string(v);
        }
        if (message.uri !== "") {
            writer.uint32(18).string(message.uri);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_AssetsModel_ResourceModel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.urlList.push(reader.string());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.uri = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_AssetsModel_LokiExtraContent() {
    return {
        giftType: "",
        giftDuration: "0",
        needScreenShot: false,
        ismultiFrame: false,
        viewOverlay: "",
        befViewRenderSize: undefined,
        befViewRenderFPS: 0,
        befViewFitMode: 0,
        modelNames: "",
        requirements: [],
    };
}
exports.WebcastGiftMessage_AssetsModel_LokiExtraContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftType !== "") {
            writer.uint32(10).string(message.giftType);
        }
        if (message.giftDuration !== "0") {
            writer.uint32(16).int64(message.giftDuration);
        }
        if (message.needScreenShot !== false) {
            writer.uint32(24).bool(message.needScreenShot);
        }
        if (message.ismultiFrame !== false) {
            writer.uint32(32).bool(message.ismultiFrame);
        }
        if (message.viewOverlay !== "") {
            writer.uint32(42).string(message.viewOverlay);
        }
        if (message.befViewRenderSize !== undefined) {
            exports.WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSizeDecoder.encode(message.befViewRenderSize, writer.uint32(50).fork()).join();
        }
        if (message.befViewRenderFPS !== 0) {
            writer.uint32(56).int32(message.befViewRenderFPS);
        }
        if (message.befViewFitMode !== 0) {
            writer.uint32(64).int32(message.befViewFitMode);
        }
        if (message.modelNames !== "") {
            writer.uint32(74).string(message.modelNames);
        }
        for (const v of message.requirements) {
            writer.uint32(82).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_AssetsModel_LokiExtraContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.giftType = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.giftDuration = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.needScreenShot = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.ismultiFrame = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.viewOverlay = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.befViewRenderSize = exports.WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSizeDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.befViewRenderFPS = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.befViewFitMode = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.modelNames = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.requirements.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize() {
    return { with: 0, height: 0 };
}
exports.WebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSizeDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.with !== 0) {
            writer.uint32(8).int32(message.with);
        }
        if (message.height !== 0) {
            writer.uint32(16).int32(message.height);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_AssetsModel_LokiExtraContent_BEFViewRenderSize();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.with = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.height = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_AssetsModel_VideoResource() {
    return { videoTypeName: "", videoUrl: undefined, videoMd5: "" };
}
exports.WebcastGiftMessage_AssetsModel_VideoResourceDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.videoTypeName !== "") {
            writer.uint32(10).string(message.videoTypeName);
        }
        if (message.videoUrl !== undefined) {
            exports.WebcastGiftMessage_AssetsModel_ResourceModelDecoder.encode(message.videoUrl, writer.uint32(18).fork()).join();
        }
        if (message.videoMd5 !== "") {
            writer.uint32(26).string(message.videoMd5);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_AssetsModel_VideoResource();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.videoTypeName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.videoUrl = exports.WebcastGiftMessage_AssetsModel_ResourceModelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.videoMd5 = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_AssetsModel_FaceRecognitionMeta() {
    return { version: "", requirements: [], modelNames: "", sdkExtra: "" };
}
exports.WebcastGiftMessage_AssetsModel_FaceRecognitionMetaDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== "") {
            writer.uint32(10).string(message.version);
        }
        for (const v of message.requirements) {
            writer.uint32(18).string(v);
        }
        if (message.modelNames !== "") {
            writer.uint32(26).string(message.modelNames);
        }
        if (message.sdkExtra !== "") {
            writer.uint32(34).string(message.sdkExtra);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_AssetsModel_FaceRecognitionMeta();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.version = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.requirements.push(reader.string());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.modelNames = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.sdkExtra = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_LynxGiftExtra() {
    return { id: "0", code: "0", type: "0", params: [], extra: "" };
}
exports.WebcastGiftMessage_LynxGiftExtraDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
            writer.uint32(8).int64(message.id);
        }
        if (message.code !== "0") {
            writer.uint32(16).int64(message.code);
        }
        if (message.type !== "0") {
            writer.uint32(24).int64(message.type);
        }
        for (const v of message.params) {
            writer.uint32(34).string(v);
        }
        if (message.extra !== "") {
            writer.uint32(42).string(message.extra);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_LynxGiftExtra();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.code = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.type = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.params.push(reader.string());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.extra = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_FlyingMicResources() {
    return { pathImage: undefined, micImage: undefined, transitionConfigs: [] };
}
exports.WebcastGiftMessage_FlyingMicResourcesDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pathImage !== undefined) {
            exports.ImageDecoder.encode(message.pathImage, writer.uint32(10).fork()).join();
        }
        if (message.micImage !== undefined) {
            exports.ImageDecoder.encode(message.micImage, writer.uint32(18).fork()).join();
        }
        for (const v of message.transitionConfigs) {
            exports.WebcastGiftMessage_FlyingMicResources_TransitionConfigDecoder.encode(v, writer.uint32(26).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_FlyingMicResources();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pathImage = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.micImage = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.transitionConfigs.push(exports.WebcastGiftMessage_FlyingMicResources_TransitionConfigDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_FlyingMicResources_TransitionConfig() {
    return { configId: "0", resourceImage: undefined };
}
exports.WebcastGiftMessage_FlyingMicResources_TransitionConfigDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.configId !== "0") {
            writer.uint32(8).int64(message.configId);
        }
        if (message.resourceImage !== undefined) {
            exports.ImageDecoder.encode(message.resourceImage, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_FlyingMicResources_TransitionConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.configId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.resourceImage = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGiftMessage_SponsorshipInfo() {
    return {
        giftId: "0",
        sponsorId: "0",
        lightGiftUp: false,
        unlightedGiftIcon: "",
        giftGalleryDetailPageSchemeUrl: "",
        giftGalleryClickSponsor: false,
        becomeAllSponsored: false,
    };
}
exports.WebcastGiftMessage_SponsorshipInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftId !== "0") {
            writer.uint32(8).int64(message.giftId);
        }
        if (message.sponsorId !== "0") {
            writer.uint32(16).int64(message.sponsorId);
        }
        if (message.lightGiftUp !== false) {
            writer.uint32(24).bool(message.lightGiftUp);
        }
        if (message.unlightedGiftIcon !== "") {
            writer.uint32(34).string(message.unlightedGiftIcon);
        }
        if (message.giftGalleryDetailPageSchemeUrl !== "") {
            writer.uint32(42).string(message.giftGalleryDetailPageSchemeUrl);
        }
        if (message.giftGalleryClickSponsor !== false) {
            writer.uint32(48).bool(message.giftGalleryClickSponsor);
        }
        if (message.becomeAllSponsored !== false) {
            writer.uint32(168).bool(message.becomeAllSponsored);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGiftMessage_SponsorshipInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.giftId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.sponsorId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.lightGiftUp = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.unlightedGiftIcon = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.giftGalleryDetailPageSchemeUrl = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.giftGalleryClickSponsor = reader.bool();
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.becomeAllSponsored = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle() {
    return {
        common: undefined,
        battleId: "0",
        battleSetting: undefined,
        action: 0,
        battleResult: {},
        mBattleDisplayConfig: undefined,
        inviteeGiftPermissionType: 0,
        armies: {},
        anchorInfo: {},
        bubbleText: "",
        supportedActions: [],
        battleCombos: {},
        teamUsers: [],
        inviteeGiftPermissionTypes: [],
        actionByUserId: "0",
        teamBattleResult: [],
        teamArmies: [],
        abtestSettings: [],
        teamMatchCampaign: undefined,
        fuzzyDisplayConfigV2: undefined,
    };
}
exports.WebcastLinkMicBattleDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.battleId !== "0") {
            writer.uint32(16).int64(message.battleId);
        }
        if (message.battleSetting !== undefined) {
            exports.BattleSettingDecoder.encode(message.battleSetting, writer.uint32(26).fork()).join();
        }
        if (message.action !== 0) {
            writer.uint32(32).int32(message.action);
        }
        Object.entries(message.battleResult).forEach(([key, value]) => {
            exports.WebcastLinkMicBattle_BattleResultEntryDecoder.encode({ key: key, value }, writer.uint32(42).fork()).join();
        });
        if (message.mBattleDisplayConfig !== undefined) {
            exports.WebcastLinkMicBattle_BattleDisplayConfigDecoder.encode(message.mBattleDisplayConfig, writer.uint32(50).fork()).join();
        }
        if (message.inviteeGiftPermissionType !== 0) {
            writer.uint32(64).int32(message.inviteeGiftPermissionType);
        }
        Object.entries(message.armies).forEach(([key, value]) => {
            exports.WebcastLinkMicBattle_ArmiesEntryDecoder.encode({ key: key, value }, writer.uint32(74).fork()).join();
        });
        Object.entries(message.anchorInfo).forEach(([key, value]) => {
            exports.WebcastLinkMicBattle_AnchorInfoEntryDecoder.encode({ key: key, value }, writer.uint32(82).fork()).join();
        });
        if (message.bubbleText !== "") {
            writer.uint32(90).string(message.bubbleText);
        }
        for (const v of message.supportedActions) {
            exports.WebcastLinkMicBattle_SupportedActionsWrapperDecoder.encode(v, writer.uint32(98).fork()).join();
        }
        Object.entries(message.battleCombos).forEach(([key, value]) => {
            exports.WebcastLinkMicBattle_BattleCombosEntryDecoder.encode({ key: key, value }, writer.uint32(106).fork()).join();
        });
        for (const v of message.teamUsers) {
            exports.WebcastLinkMicBattle_TeamUsersInfoDecoder.encode(v, writer.uint32(114).fork()).join();
        }
        for (const v of message.inviteeGiftPermissionTypes) {
            exports.WebcastLinkMicBattle_BattleInviteeGiftPermissionDecoder.encode(v, writer.uint32(122).fork()).join();
        }
        if (message.actionByUserId !== "0") {
            writer.uint32(128).int64(message.actionByUserId);
        }
        for (const v of message.teamBattleResult) {
            exports.WebcastLinkMicBattle_BattleTeamResultDecoder.encode(v, writer.uint32(138).fork()).join();
        }
        for (const v of message.teamArmies) {
            exports.BattleTeamUserArmiesDecoder.encode(v, writer.uint32(146).fork()).join();
        }
        for (const v of message.abtestSettings) {
            exports.WebcastLinkMicBattle_BattleABTestSettingDecoder.encode(v, writer.uint32(154).fork()).join();
        }
        if (message.teamMatchCampaign !== undefined) {
            exports.WebcastLinkMicBattle_TeamMatchCampaignDecoder.encode(message.teamMatchCampaign, writer.uint32(162).fork()).join();
        }
        if (message.fuzzyDisplayConfigV2 !== undefined) {
            exports.HighScoreControlCfgDecoder.encode(message.fuzzyDisplayConfigV2, writer.uint32(170).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.battleId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.battleSetting = exports.BattleSettingDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    const entry5 = exports.WebcastLinkMicBattle_BattleResultEntryDecoder.decode(reader, reader.uint32());
                    if (entry5.value !== undefined) {
                        message.battleResult[entry5.key] = entry5.value;
                    }
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.mBattleDisplayConfig = exports.WebcastLinkMicBattle_BattleDisplayConfigDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.inviteeGiftPermissionType = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    const entry9 = exports.WebcastLinkMicBattle_ArmiesEntryDecoder.decode(reader, reader.uint32());
                    if (entry9.value !== undefined) {
                        message.armies[entry9.key] = entry9.value;
                    }
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    const entry10 = exports.WebcastLinkMicBattle_AnchorInfoEntryDecoder.decode(reader, reader.uint32());
                    if (entry10.value !== undefined) {
                        message.anchorInfo[entry10.key] = entry10.value;
                    }
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.bubbleText = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.supportedActions.push(exports.WebcastLinkMicBattle_SupportedActionsWrapperDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    const entry13 = exports.WebcastLinkMicBattle_BattleCombosEntryDecoder.decode(reader, reader.uint32());
                    if (entry13.value !== undefined) {
                        message.battleCombos[entry13.key] = entry13.value;
                    }
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.teamUsers.push(exports.WebcastLinkMicBattle_TeamUsersInfoDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.inviteeGiftPermissionTypes.push(exports.WebcastLinkMicBattle_BattleInviteeGiftPermissionDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.actionByUserId = reader.int64().toString();
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.teamBattleResult.push(exports.WebcastLinkMicBattle_BattleTeamResultDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.teamArmies.push(exports.BattleTeamUserArmiesDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.abtestSettings.push(exports.WebcastLinkMicBattle_BattleABTestSettingDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.teamMatchCampaign = exports.WebcastLinkMicBattle_TeamMatchCampaignDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.fuzzyDisplayConfigV2 = exports.HighScoreControlCfgDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_BattleResultEntry() {
    return { key: "0", value: undefined };
}
exports.WebcastLinkMicBattle_BattleResultEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
            writer.uint32(8).int64(message.key);
        }
        if (message.value !== undefined) {
            exports.WebcastLinkMicBattle_BattleResultDecoder.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleResultEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.WebcastLinkMicBattle_BattleResultDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_ArmiesEntry() {
    return { key: "0", value: undefined };
}
exports.WebcastLinkMicBattle_ArmiesEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
            writer.uint32(8).int64(message.key);
        }
        if (message.value !== undefined) {
            exports.BattleUserArmiesDecoder.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_ArmiesEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.BattleUserArmiesDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_AnchorInfoEntry() {
    return { key: "0", value: undefined };
}
exports.WebcastLinkMicBattle_AnchorInfoEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
            writer.uint32(8).int64(message.key);
        }
        if (message.value !== undefined) {
            exports.WebcastLinkMicBattle_BattleUserInfoDecoder.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_AnchorInfoEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.WebcastLinkMicBattle_BattleUserInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_BattleCombosEntry() {
    return { key: "0", value: undefined };
}
exports.WebcastLinkMicBattle_BattleCombosEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
            writer.uint32(8).int64(message.key);
        }
        if (message.value !== undefined) {
            exports.WebcastLinkMicBattle_BattleComboInfoDecoder.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleCombosEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.WebcastLinkMicBattle_BattleComboInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_TeamMatchCampaign() {
    return { bestTeammateRelation: [], startSfxTeamId: [], hasTeamMatchMvpSfx: false };
}
exports.WebcastLinkMicBattle_TeamMatchCampaignDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.bestTeammateRelation) {
            exports.WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelationDecoder.encode(v, writer.uint32(10).fork()).join();
        }
        writer.uint32(18).fork();
        for (const v of message.startSfxTeamId) {
            writer.int64(v);
        }
        writer.join();
        if (message.hasTeamMatchMvpSfx !== false) {
            writer.uint32(24).bool(message.hasTeamMatchMvpSfx);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_TeamMatchCampaign();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.bestTeammateRelation.push(exports.WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelationDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.startSfxTeamId.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.startSfxTeamId.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.hasTeamMatchMvpSfx = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation() {
    return { userId: "0", bestTeammateId: "0" };
}
exports.WebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelationDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.bestTeammateId !== "0") {
            writer.uint32(16).int64(message.bestTeammateId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_TeamMatchCampaign_BestTeammateRelation();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.bestTeammateId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_BattleTeamResult() {
    return { teamId: "0", teamUsers: [], result: 0, totalScore: "0" };
}
exports.WebcastLinkMicBattle_BattleTeamResultDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.teamId !== "0") {
            writer.uint32(8).int64(message.teamId);
        }
        for (const v of message.teamUsers) {
            exports.BattleTeamUserDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.result !== 0) {
            writer.uint32(24).int32(message.result);
        }
        if (message.totalScore !== "0") {
            writer.uint32(32).int64(message.totalScore);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleTeamResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.teamId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.teamUsers.push(exports.BattleTeamUserDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.totalScore = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_BattleInviteeGiftPermission() {
    return { userId: "0", giftPermissionType: 0 };
}
exports.WebcastLinkMicBattle_BattleInviteeGiftPermissionDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.giftPermissionType !== 0) {
            writer.uint32(16).int32(message.giftPermissionType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleInviteeGiftPermission();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.giftPermissionType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_SupportedActionsWrapper() {
    return { actionType: "0" };
}
exports.WebcastLinkMicBattle_SupportedActionsWrapperDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.actionType !== "0") {
            writer.uint32(8).int64(message.actionType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_SupportedActionsWrapper();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.actionType = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_TeamUsersInfo() {
    return { teamId: "0", userIds: [] };
}
exports.WebcastLinkMicBattle_TeamUsersInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.teamId !== "0") {
            writer.uint32(8).int64(message.teamId);
        }
        writer.uint32(18).fork();
        for (const v of message.userIds) {
            writer.int64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_TeamUsersInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.teamId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.userIds.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.userIds.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_BattleComboInfo() {
    return { userId: "0", comboStatus: "0", comboCount: "0", comboIconUrl: "", comboType: 0, comboRuleGuideSchema: "" };
}
exports.WebcastLinkMicBattle_BattleComboInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.comboStatus !== "0") {
            writer.uint32(16).int64(message.comboStatus);
        }
        if (message.comboCount !== "0") {
            writer.uint32(24).int64(message.comboCount);
        }
        if (message.comboIconUrl !== "") {
            writer.uint32(34).string(message.comboIconUrl);
        }
        if (message.comboType !== 0) {
            writer.uint32(40).int32(message.comboType);
        }
        if (message.comboRuleGuideSchema !== "") {
            writer.uint32(50).string(message.comboRuleGuideSchema);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleComboInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.comboStatus = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.comboCount = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.comboIconUrl = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.comboType = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.comboRuleGuideSchema = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_BattleResult() {
    return { userId: "0", result: 0, score: "0" };
}
exports.WebcastLinkMicBattle_BattleResultDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.result !== 0) {
            writer.uint32(16).int32(message.result);
        }
        if (message.score !== "0") {
            writer.uint32(24).int64(message.score);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.result = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.score = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_BattleDisplayConfig() {
    return { threshold: 0, text: "", diffThreshold: 0, diffText: "", exemptStrategy: undefined };
}
exports.WebcastLinkMicBattle_BattleDisplayConfigDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.threshold !== 0) {
            writer.uint32(8).int32(message.threshold);
        }
        if (message.text !== "") {
            writer.uint32(18).string(message.text);
        }
        if (message.diffThreshold !== 0) {
            writer.uint32(24).int32(message.diffThreshold);
        }
        if (message.diffText !== "") {
            writer.uint32(34).string(message.diffText);
        }
        if (message.exemptStrategy !== undefined) {
            exports.WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategyDecoder.encode(message.exemptStrategy, writer.uint32(42).fork())
                .join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleDisplayConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.threshold = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.text = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.diffThreshold = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.diffText = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.exemptStrategy = exports.WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategyDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy() {
    return { exemptBothHost: false, exemptAudienceTop: 0 };
}
exports.WebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategyDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.exemptBothHost !== false) {
            writer.uint32(8).bool(message.exemptBothHost);
        }
        if (message.exemptAudienceTop !== 0) {
            writer.uint32(16).int32(message.exemptAudienceTop);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleDisplayConfig_ExemptStrategy();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.exemptBothHost = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.exemptAudienceTop = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_BattleUserInfo() {
    return { user: undefined, tags: [] };
}
exports.WebcastLinkMicBattle_BattleUserInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.user !== undefined) {
            exports.WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfoDecoder.encode(message.user, writer.uint32(10).fork()).join();
        }
        for (const v of message.tags) {
            exports.WebcastLinkMicBattle_BattleUserInfo_BattleRivalTagDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleUserInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.user = exports.WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.tags.push(exports.WebcastLinkMicBattle_BattleUserInfo_BattleRivalTagDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo() {
    return { userId: "0", nickName: "", avatarThumb: undefined, displayId: "" };
}
exports.WebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.userId !== "0") {
            writer.uint32(8).int64(message.userId);
        }
        if (message.nickName !== "") {
            writer.uint32(18).string(message.nickName);
        }
        if (message.avatarThumb !== undefined) {
            exports.ImageDecoder.encode(message.avatarThumb, writer.uint32(26).fork()).join();
        }
        if (message.displayId !== "") {
            writer.uint32(34).string(message.displayId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleUserInfo_BattleBaseUserInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.nickName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.avatarThumb = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.displayId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_BattleUserInfo_BattleRivalTag() {
    return { bgImage: undefined, iconImage: undefined, content: "" };
}
exports.WebcastLinkMicBattle_BattleUserInfo_BattleRivalTagDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.bgImage !== undefined) {
            exports.ImageDecoder.encode(message.bgImage, writer.uint32(10).fork()).join();
        }
        if (message.iconImage !== undefined) {
            exports.ImageDecoder.encode(message.iconImage, writer.uint32(18).fork()).join();
        }
        if (message.content !== "") {
            writer.uint32(26).string(message.content);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleUserInfo_BattleRivalTag();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.bgImage = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.iconImage = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_BattleABTestSetting() {
    return { uid: "0", abTestList: undefined };
}
exports.WebcastLinkMicBattle_BattleABTestSettingDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.uid !== "0") {
            writer.uint32(8).int64(message.uid);
        }
        if (message.abTestList !== undefined) {
            exports.WebcastLinkMicBattle_BattleABTestSetting_BattleABTestListDecoder.encode(message.abTestList, writer.uint32(18).fork())
                .join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleABTestSetting();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.uid = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.abTestList = exports.WebcastLinkMicBattle_BattleABTestSetting_BattleABTestListDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_BattleABTestSetting_BattleABTestList() {
    return { abTestList: [] };
}
exports.WebcastLinkMicBattle_BattleABTestSetting_BattleABTestListDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.abTestList) {
            exports.WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTestDecoder.encode(v, writer.uint32(10).fork())
                .join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleABTestSetting_BattleABTestList();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.abTestList.push(exports.WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTestDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest() {
    return { abTestType: 0, group: 0 };
}
exports.WebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTestDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.abTestType !== 0) {
            writer.uint32(8).int32(message.abTestType);
        }
        if (message.group !== 0) {
            writer.uint32(16).int32(message.group);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattle_BattleABTestSetting_BattleABTestList_BattleABTest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.abTestType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.group = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicArmies() {
    return {
        common: undefined,
        battleId: "0",
        battleItems: {},
        channelId: "0",
        giftSentTime: "0",
        scoreUpdateTime: "0",
        battleStatus: 0,
        fromUserId: "0",
        giftId: "0",
        giftCount: 0,
        gifIconImage: undefined,
        totalDiamondCount: 0,
        repeatCount: 0,
        teamArmies: [],
        triggerCriticalStrike: false,
        hasTeamMatchMvpSfx: false,
        logId: "",
        battleSettings: undefined,
        fuzzyDisplayConfigV2: undefined,
    };
}
exports.WebcastLinkMicArmiesDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.battleId !== "0") {
            writer.uint32(16).int64(message.battleId);
        }
        Object.entries(message.battleItems).forEach(([key, value]) => {
            exports.WebcastLinkMicArmies_BattleItemsEntryDecoder.encode({ key: key, value }, writer.uint32(26).fork()).join();
        });
        if (message.channelId !== "0") {
            writer.uint32(32).int64(message.channelId);
        }
        if (message.giftSentTime !== "0") {
            writer.uint32(40).int64(message.giftSentTime);
        }
        if (message.scoreUpdateTime !== "0") {
            writer.uint32(48).int64(message.scoreUpdateTime);
        }
        if (message.battleStatus !== 0) {
            writer.uint32(56).int32(message.battleStatus);
        }
        if (message.fromUserId !== "0") {
            writer.uint32(64).int64(message.fromUserId);
        }
        if (message.giftId !== "0") {
            writer.uint32(72).int64(message.giftId);
        }
        if (message.giftCount !== 0) {
            writer.uint32(80).int32(message.giftCount);
        }
        if (message.gifIconImage !== undefined) {
            exports.ImageDecoder.encode(message.gifIconImage, writer.uint32(90).fork()).join();
        }
        if (message.totalDiamondCount !== 0) {
            writer.uint32(96).int32(message.totalDiamondCount);
        }
        if (message.repeatCount !== 0) {
            writer.uint32(104).int32(message.repeatCount);
        }
        for (const v of message.teamArmies) {
            exports.BattleTeamUserArmiesDecoder.encode(v, writer.uint32(114).fork()).join();
        }
        if (message.triggerCriticalStrike !== false) {
            writer.uint32(120).bool(message.triggerCriticalStrike);
        }
        if (message.hasTeamMatchMvpSfx !== false) {
            writer.uint32(128).bool(message.hasTeamMatchMvpSfx);
        }
        if (message.logId !== "") {
            writer.uint32(138).string(message.logId);
        }
        if (message.battleSettings !== undefined) {
            exports.BattleSettingDecoder.encode(message.battleSettings, writer.uint32(146).fork()).join();
        }
        if (message.fuzzyDisplayConfigV2 !== undefined) {
            exports.HighScoreControlCfgDecoder.encode(message.fuzzyDisplayConfigV2, writer.uint32(154).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicArmies();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.battleId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.WebcastLinkMicArmies_BattleItemsEntryDecoder.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.battleItems[entry3.key] = entry3.value;
                    }
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.channelId = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.giftSentTime = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.scoreUpdateTime = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.battleStatus = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.fromUserId = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.giftId = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.giftCount = reader.int32();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.gifIconImage = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.totalDiamondCount = reader.int32();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.repeatCount = reader.int32();
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.teamArmies.push(exports.BattleTeamUserArmiesDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.triggerCriticalStrike = reader.bool();
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.hasTeamMatchMvpSfx = reader.bool();
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.logId = reader.string();
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.battleSettings = exports.BattleSettingDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.fuzzyDisplayConfigV2 = exports.HighScoreControlCfgDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicArmies_BattleItemsEntry() {
    return { key: "0", value: undefined };
}
exports.WebcastLinkMicArmies_BattleItemsEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
            writer.uint32(8).int64(message.key);
        }
        if (message.value !== undefined) {
            exports.BattleUserArmiesDecoder.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicArmies_BattleItemsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.BattleUserArmiesDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicArmiesItems() {
    return { hostUserId: "0", battleGroups: [] };
}
exports.WebcastLinkMicArmiesItemsDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.hostUserId !== "0") {
            writer.uint32(8).uint64(message.hostUserId);
        }
        for (const v of message.battleGroups) {
            exports.WebcastLinkMicArmiesGroupDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicArmiesItems();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.hostUserId = reader.uint64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.battleGroups.push(exports.WebcastLinkMicArmiesGroupDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicArmiesGroup() {
    return { users: [], points: 0 };
}
exports.WebcastLinkMicArmiesGroupDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.users) {
            exports.UserDecoder.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.points !== 0) {
            writer.uint32(16).int32(message.points);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicArmiesGroup();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.users.push(exports.UserDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.points = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastSocialMessage() {
    return {
        common: undefined,
        user: undefined,
        shareType: "0",
        action: "0",
        shareTarget: "",
        followCount: 0,
        shareDisplayStyle: "0",
        shareCount: 0,
        publicAreaMessageCommon: undefined,
        signature: "",
        signatureVersion: "",
        showDurationMs: "0",
    };
}
exports.WebcastSocialMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(18).fork()).join();
        }
        if (message.shareType !== "0") {
            writer.uint32(24).int64(message.shareType);
        }
        if (message.action !== "0") {
            writer.uint32(32).int64(message.action);
        }
        if (message.shareTarget !== "") {
            writer.uint32(42).string(message.shareTarget);
        }
        if (message.followCount !== 0) {
            writer.uint32(48).int32(message.followCount);
        }
        if (message.shareDisplayStyle !== "0") {
            writer.uint32(56).int64(message.shareDisplayStyle);
        }
        if (message.shareCount !== 0) {
            writer.uint32(64).int32(message.shareCount);
        }
        if (message.publicAreaMessageCommon !== undefined) {
            exports.PublicAreaMessageCommonDecoder.encode(message.publicAreaMessageCommon, writer.uint32(74).fork()).join();
        }
        if (message.signature !== "") {
            writer.uint32(82).string(message.signature);
        }
        if (message.signatureVersion !== "") {
            writer.uint32(90).string(message.signatureVersion);
        }
        if (message.showDurationMs !== "0") {
            writer.uint32(96).int64(message.showDurationMs);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastSocialMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.shareType = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.action = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.shareTarget = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.followCount = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.shareDisplayStyle = reader.int64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.shareCount = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.publicAreaMessageCommon = exports.PublicAreaMessageCommonDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.signature = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.signatureVersion = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.showDurationMs = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLikeMessage() {
    return {
        common: undefined,
        likeCount: 0,
        totalLikeCount: 0,
        color: 0,
        user: undefined,
        icon: "",
        icons: [],
        specifiedDisplayText: [],
        effectCnt: "0",
        likeEffect: [],
        publicAreaMessageCommon: undefined,
        roomMessageHeatLevel: "0",
    };
}
exports.WebcastLikeMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.likeCount !== 0) {
            writer.uint32(16).int32(message.likeCount);
        }
        if (message.totalLikeCount !== 0) {
            writer.uint32(24).int32(message.totalLikeCount);
        }
        if (message.color !== 0) {
            writer.uint32(32).int32(message.color);
        }
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(42).fork()).join();
        }
        if (message.icon !== "") {
            writer.uint32(50).string(message.icon);
        }
        for (const v of message.icons) {
            exports.ImageDecoder.encode(v, writer.uint32(58).fork()).join();
        }
        for (const v of message.specifiedDisplayText) {
            exports.SpecifiedDisplayTextDecoder.encode(v, writer.uint32(66).fork()).join();
        }
        if (message.effectCnt !== "0") {
            writer.uint32(72).int64(message.effectCnt);
        }
        for (const v of message.likeEffect) {
            exports.LikeEffectDecoder.encode(v, writer.uint32(82).fork()).join();
        }
        if (message.publicAreaMessageCommon !== undefined) {
            exports.PublicAreaMessageCommonDecoder.encode(message.publicAreaMessageCommon, writer.uint32(90).fork()).join();
        }
        if (message.roomMessageHeatLevel !== "0") {
            writer.uint32(96).int64(message.roomMessageHeatLevel);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLikeMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.likeCount = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.totalLikeCount = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.color = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.icon = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.icons.push(exports.ImageDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.specifiedDisplayText.push(exports.SpecifiedDisplayTextDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.effectCnt = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.likeEffect.push(exports.LikeEffectDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.publicAreaMessageCommon = exports.PublicAreaMessageCommonDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.roomMessageHeatLevel = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseSpecifiedDisplayText() {
    return { uid: "0", displayText: undefined };
}
exports.SpecifiedDisplayTextDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.uid !== "0") {
            writer.uint32(8).int64(message.uid);
        }
        if (message.displayText !== undefined) {
            exports.TextDecoder.encode(message.displayText, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSpecifiedDisplayText();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.uid = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.displayText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseLikeEffect() {
    return { version: "0", effectCnt: "0", effectIntervalMs: "0", level: "0" };
}
exports.LikeEffectDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.version !== "0") {
            writer.uint32(8).int64(message.version);
        }
        if (message.effectCnt !== "0") {
            writer.uint32(16).int64(message.effectCnt);
        }
        if (message.effectIntervalMs !== "0") {
            writer.uint32(24).int64(message.effectIntervalMs);
        }
        if (message.level !== "0") {
            writer.uint32(32).int64(message.level);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLikeEffect();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.version = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.effectCnt = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.effectIntervalMs = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.level = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastQuestionNewMessage() {
    return { common: undefined, details: undefined };
}
exports.WebcastQuestionNewMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.details !== undefined) {
            exports.WebcastQuestionNewMessage_QuestionDecoder.encode(message.details, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastQuestionNewMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.details = exports.WebcastQuestionNewMessage_QuestionDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastQuestionNewMessage_Question() {
    return {
        questionId: "0",
        questionText: "",
        answerStatus: 0,
        createTime: "0",
        user: undefined,
        createFrom: 0,
        answerFrom: 0,
    };
}
exports.WebcastQuestionNewMessage_QuestionDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.questionId !== "0") {
            writer.uint32(8).int64(message.questionId);
        }
        if (message.questionText !== "") {
            writer.uint32(18).string(message.questionText);
        }
        if (message.answerStatus !== 0) {
            writer.uint32(24).int32(message.answerStatus);
        }
        if (message.createTime !== "0") {
            writer.uint32(32).int64(message.createTime);
        }
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(42).fork()).join();
        }
        if (message.createFrom !== 0) {
            writer.uint32(160).int32(message.createFrom);
        }
        if (message.answerFrom !== 0) {
            writer.uint32(168).int32(message.answerFrom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastQuestionNewMessage_Question();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.questionId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.questionText = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.answerStatus = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.createTime = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 160) {
                        break;
                    }
                    message.createFrom = reader.int32();
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.answerFrom = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastMessageEventDetails() {
    return { displayType: "", label: "" };
}
exports.WebcastMessageEventDetailsDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.displayType !== "") {
            writer.uint32(10).string(message.displayType);
        }
        if (message.label !== "") {
            writer.uint32(18).string(message.label);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastMessageEventDetails();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.displayType = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.label = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLiveIntroMessage() {
    return {
        common: undefined,
        roomId: "0",
        auditStatus: 0,
        description: "",
        host: undefined,
        introMode: 0,
        badges: [],
        language: "",
    };
}
exports.WebcastLiveIntroMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.roomId !== "0") {
            writer.uint32(16).int64(message.roomId);
        }
        if (message.auditStatus !== 0) {
            writer.uint32(24).int32(message.auditStatus);
        }
        if (message.description !== "") {
            writer.uint32(34).string(message.description);
        }
        if (message.host !== undefined) {
            exports.UserDecoder.encode(message.host, writer.uint32(42).fork()).join();
        }
        if (message.introMode !== 0) {
            writer.uint32(48).int32(message.introMode);
        }
        for (const v of message.badges) {
            exports.BadgeStructDecoder.encode(v, writer.uint32(58).fork()).join();
        }
        if (message.language !== "") {
            writer.uint32(66).string(message.language);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLiveIntroMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.roomId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.auditStatus = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.host = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.introMode = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.badges.push(exports.BadgeStructDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.language = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseSystemMessage() {
    return { description: "" };
}
exports.SystemMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSystemMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseRankItem() {
    return { colour: "", id: "0" };
}
exports.RankItemDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.colour !== "") {
            writer.uint32(10).string(message.colour);
        }
        if (message.id !== "0") {
            writer.uint32(32).uint64(message.id);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRankItem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.colour = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.id = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastHourlyRankMessage() {
    return { data: undefined, common: undefined, data2: 0 };
}
exports.WebcastHourlyRankMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.data !== undefined) {
            exports.WebcastHourlyRankMessage_RankContainerDecoder.encode(message.data, writer.uint32(18).fork()).join();
        }
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.data2 !== 0) {
            writer.uint32(24).uint32(message.data2);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastHourlyRankMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.data = exports.WebcastHourlyRankMessage_RankContainerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.data2 = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastHourlyRankMessage_RankContainer() {
    return {
        data1: 0,
        rankingData: undefined,
        data2: 0,
        rankings: undefined,
        rankingData2: undefined,
        data3: 0,
        data4: 0,
    };
}
exports.WebcastHourlyRankMessage_RankContainerDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.data1 !== 0) {
            writer.uint32(8).uint32(message.data1);
        }
        if (message.rankingData !== undefined) {
            exports.WebcastHourlyRankMessage_RankContainer_RankingDataDecoder.encode(message.rankingData, writer.uint32(18).fork()).join();
        }
        if (message.data2 !== 0) {
            writer.uint32(24).uint32(message.data2);
        }
        if (message.rankings !== undefined) {
            exports.RankingDecoder.encode(message.rankings, writer.uint32(34).fork()).join();
        }
        if (message.rankingData2 !== undefined) {
            exports.WebcastHourlyRankMessage_RankContainer_RankingData2Decoder.encode(message.rankingData2, writer.uint32(42).fork()).join();
        }
        if (message.data3 !== 0) {
            writer.uint32(48).uint32(message.data3);
        }
        if (message.data4 !== 0) {
            writer.uint32(56).uint32(message.data4);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastHourlyRankMessage_RankContainer();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.data1 = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.rankingData = exports.WebcastHourlyRankMessage_RankContainer_RankingDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.data2 = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.rankings = exports.RankingDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.rankingData2 = exports.WebcastHourlyRankMessage_RankContainer_RankingData2Decoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.data3 = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.data4 = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastHourlyRankMessage_RankContainer_RankingData() {
    return { data1: 0, rankdata: undefined, data2: "" };
}
exports.WebcastHourlyRankMessage_RankContainer_RankingDataDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.data1 !== 0) {
            writer.uint32(8).uint32(message.data1);
        }
        if (message.rankdata !== undefined) {
            exports.RankingDecoder.encode(message.rankdata, writer.uint32(18).fork()).join();
        }
        if (message.data2 !== "") {
            writer.uint32(26).string(message.data2);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastHourlyRankMessage_RankContainer_RankingData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.data1 = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.rankdata = exports.RankingDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.data2 = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastHourlyRankMessage_RankContainer_RankingData2() {
    return { data1: 0, data2: 0, rankdata: undefined, data3: "", data4: 0, data5: 0 };
}
exports.WebcastHourlyRankMessage_RankContainer_RankingData2Decoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.data1 !== 0) {
            writer.uint32(8).uint32(message.data1);
        }
        if (message.data2 !== 0) {
            writer.uint32(16).uint32(message.data2);
        }
        if (message.rankdata !== undefined) {
            exports.RankingDecoder.encode(message.rankdata, writer.uint32(26).fork()).join();
        }
        if (message.data3 !== "") {
            writer.uint32(34).string(message.data3);
        }
        if (message.data4 !== 0) {
            writer.uint32(40).uint32(message.data4);
        }
        if (message.data5 !== 0) {
            writer.uint32(48).uint32(message.data5);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastHourlyRankMessage_RankContainer_RankingData2();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.data1 = reader.uint32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.data2 = reader.uint32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.rankdata = exports.RankingDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.data3 = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.data4 = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.data5 = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseEmoteDetails() {
    return { emoteId: "", image: undefined };
}
exports.EmoteDetailsDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.emoteId !== "") {
            writer.uint32(10).string(message.emoteId);
        }
        if (message.image !== undefined) {
            exports.EmoteImageDecoder.encode(message.image, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmoteDetails();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.emoteId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.image = exports.EmoteImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseEmoteImage() {
    return { imageUrl: "" };
}
exports.EmoteImageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.imageUrl !== "") {
            writer.uint32(10).string(message.imageUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseEmoteImage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.imageUrl = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastEnvelopeMessage() {
    return { common: undefined, envelopeInfo: undefined, display: 0 };
}
exports.WebcastEnvelopeMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.envelopeInfo !== undefined) {
            exports.WebcastEnvelopeMessage_EnvelopeInfoDecoder.encode(message.envelopeInfo, writer.uint32(18).fork()).join();
        }
        if (message.display !== 0) {
            writer.uint32(24).int32(message.display);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastEnvelopeMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.envelopeInfo = exports.WebcastEnvelopeMessage_EnvelopeInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.display = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastEnvelopeMessage_EnvelopeInfo() {
    return {
        envelopeId: "",
        businessType: 0,
        envelopeIdc: "",
        sendUserName: "",
        diamondCount: 0,
        peopleCount: 0,
        unpackAt: 0,
        sendUserId: "",
        sendUserAvatar: undefined,
        createAt: "",
        roomId: "",
        followShowStatus: 0,
        skinId: 0,
    };
}
exports.WebcastEnvelopeMessage_EnvelopeInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.envelopeId !== "") {
            writer.uint32(10).string(message.envelopeId);
        }
        if (message.businessType !== 0) {
            writer.uint32(16).int32(message.businessType);
        }
        if (message.envelopeIdc !== "") {
            writer.uint32(26).string(message.envelopeIdc);
        }
        if (message.sendUserName !== "") {
            writer.uint32(34).string(message.sendUserName);
        }
        if (message.diamondCount !== 0) {
            writer.uint32(40).int32(message.diamondCount);
        }
        if (message.peopleCount !== 0) {
            writer.uint32(48).int32(message.peopleCount);
        }
        if (message.unpackAt !== 0) {
            writer.uint32(56).int32(message.unpackAt);
        }
        if (message.sendUserId !== "") {
            writer.uint32(66).string(message.sendUserId);
        }
        if (message.sendUserAvatar !== undefined) {
            exports.ImageDecoder.encode(message.sendUserAvatar, writer.uint32(74).fork()).join();
        }
        if (message.createAt !== "") {
            writer.uint32(82).string(message.createAt);
        }
        if (message.roomId !== "") {
            writer.uint32(90).string(message.roomId);
        }
        if (message.followShowStatus !== 0) {
            writer.uint32(96).int32(message.followShowStatus);
        }
        if (message.skinId !== 0) {
            writer.uint32(104).int32(message.skinId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastEnvelopeMessage_EnvelopeInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.envelopeId = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.businessType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.envelopeIdc = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.sendUserName = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.diamondCount = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.peopleCount = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.unpackAt = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.sendUserId = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.sendUserAvatar = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.createAt = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.roomId = reader.string();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.followShowStatus = reader.int32();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.skinId = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseTreasureBoxData() {
    return { coins: 0, canOpen: 0, timestamp: "0" };
}
exports.TreasureBoxDataDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.coins !== 0) {
            writer.uint32(40).uint32(message.coins);
        }
        if (message.canOpen !== 0) {
            writer.uint32(48).uint32(message.canOpen);
        }
        if (message.timestamp !== "0") {
            writer.uint32(56).uint64(message.timestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseTreasureBoxData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.coins = reader.uint32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.canOpen = reader.uint32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.timestamp = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastSubNotifyMessage() {
    return {
        common: undefined,
        user: undefined,
        exhibitionType: 0,
        subMonth: "0",
        subscribeType: 0,
        oldSubscribeStatus: 0,
        subscribeMessageType: undefined,
        subscribingStatus: 0,
        isSend: false,
        isCustom: false,
        giftSource: 0,
        messageDisplayStyle: 0,
        publicAreaMessageCommon: undefined,
        packageId: "",
        eventTracking: undefined,
    };
}
exports.WebcastSubNotifyMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(18).fork()).join();
        }
        if (message.exhibitionType !== 0) {
            writer.uint32(24).int32(message.exhibitionType);
        }
        if (message.subMonth !== "0") {
            writer.uint32(32).int64(message.subMonth);
        }
        if (message.subscribeType !== 0) {
            writer.uint32(40).int32(message.subscribeType);
        }
        if (message.oldSubscribeStatus !== 0) {
            writer.uint32(48).int32(message.oldSubscribeStatus);
        }
        if (message.subscribeMessageType !== undefined) {
            writer.uint32(56).int32(message.subscribeMessageType);
        }
        if (message.subscribingStatus !== 0) {
            writer.uint32(64).int32(message.subscribingStatus);
        }
        if (message.isSend !== false) {
            writer.uint32(72).bool(message.isSend);
        }
        if (message.isCustom !== false) {
            writer.uint32(80).bool(message.isCustom);
        }
        if (message.giftSource !== 0) {
            writer.uint32(88).int32(message.giftSource);
        }
        if (message.messageDisplayStyle !== 0) {
            writer.uint32(96).int32(message.messageDisplayStyle);
        }
        if (message.publicAreaMessageCommon !== undefined) {
            exports.PublicAreaMessageCommonDecoder.encode(message.publicAreaMessageCommon, writer.uint32(106).fork()).join();
        }
        if (message.packageId !== "") {
            writer.uint32(114).string(message.packageId);
        }
        if (message.eventTracking !== undefined) {
            exports.WebcastSubNotifyMessage_EventTrackingDecoder.encode(message.eventTracking, writer.uint32(122).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastSubNotifyMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.exhibitionType = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.subMonth = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.subscribeType = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.oldSubscribeStatus = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.subscribeMessageType = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.subscribingStatus = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.isSend = reader.bool();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.isCustom = reader.bool();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.giftSource = reader.int32();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.messageDisplayStyle = reader.int32();
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.publicAreaMessageCommon = exports.PublicAreaMessageCommonDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.packageId = reader.string();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.eventTracking = exports.WebcastSubNotifyMessage_EventTrackingDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastSubNotifyMessage_EventTracking() {
    return { giftSubSenderId: "0", giftSubReceiverId: "0", anchorId: "0", giftSubOrderCreateTime: "0" };
}
exports.WebcastSubNotifyMessage_EventTrackingDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftSubSenderId !== "0") {
            writer.uint32(8).int64(message.giftSubSenderId);
        }
        if (message.giftSubReceiverId !== "0") {
            writer.uint32(16).int64(message.giftSubReceiverId);
        }
        if (message.anchorId !== "0") {
            writer.uint32(24).int64(message.anchorId);
        }
        if (message.giftSubOrderCreateTime !== "0") {
            writer.uint32(32).int64(message.giftSubOrderCreateTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastSubNotifyMessage_EventTracking();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.giftSubSenderId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.giftSubReceiverId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.anchorId = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.giftSubOrderCreateTime = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseFollowInfo() {
    return { followingCount: 0, followerCount: 0, followStatus: 0, pushStatus: 0 };
}
exports.FollowInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.followingCount !== 0) {
            writer.uint32(8).int32(message.followingCount);
        }
        if (message.followerCount !== 0) {
            writer.uint32(16).int32(message.followerCount);
        }
        if (message.followStatus !== 0) {
            writer.uint32(24).int32(message.followStatus);
        }
        if (message.pushStatus !== 0) {
            writer.uint32(32).int32(message.pushStatus);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFollowInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.followingCount = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.followerCount = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.followStatus = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.pushStatus = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseProfilePicture() {
    return { urls: [] };
}
exports.ProfilePictureDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.urls) {
            writer.uint32(10).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProfilePicture();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.urls.push(reader.string());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUserBadgesAttributes() {
    return { badgeSceneType: 0, imageBadges: [], badges: [], privilegeLogExtra: undefined };
}
exports.UserBadgesAttributesDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.badgeSceneType !== 0) {
            writer.uint32(24).int32(message.badgeSceneType);
        }
        for (const v of message.imageBadges) {
            exports.UserImageBadgeDecoder.encode(v, writer.uint32(162).fork()).join();
        }
        for (const v of message.badges) {
            exports.UserBadgeDecoder.encode(v, writer.uint32(170).fork()).join();
        }
        if (message.privilegeLogExtra !== undefined) {
            exports.PrivilegeLogExtraDecoder.encode(message.privilegeLogExtra, writer.uint32(98).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserBadgesAttributes();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.badgeSceneType = reader.int32();
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.imageBadges.push(exports.UserImageBadgeDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.badges.push(exports.UserBadgeDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.privilegeLogExtra = exports.PrivilegeLogExtraDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUserBadge() {
    return { type: "", name: "" };
}
exports.UserBadgeDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== "") {
            writer.uint32(18).string(message.type);
        }
        if (message.name !== "") {
            writer.uint32(26).string(message.name);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserBadge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUserImageBadge() {
    return { displayType: 0, image: undefined };
}
exports.UserImageBadgeDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.displayType !== 0) {
            writer.uint32(8).int32(message.displayType);
        }
        if (message.image !== undefined) {
            exports.UserImageBadgeImageDecoder.encode(message.image, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserImageBadge();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.displayType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.image = exports.UserImageBadgeImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseUserImageBadgeImage() {
    return { url: "" };
}
exports.UserImageBadgeImageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.url !== "") {
            writer.uint32(10).string(message.url);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUserImageBadgeImage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.url = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebSocketAckMessage() {
    return { id: "0", type: "" };
}
exports.WebSocketAckMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
            writer.uint32(16).uint64(message.id);
        }
        if (message.type !== "") {
            writer.uint32(58).string(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebSocketAckMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.id = reader.uint64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseHeartbeatFrameRoomInfo() {
    return { roomId: "0" };
}
exports.HeartbeatFrameRoomInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.roomId !== "0") {
            writer.uint32(8).uint64(message.roomId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHeartbeatFrameRoomInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.roomId = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseHeartbeatFrameMetadataField6() {
    return { unknown1: 0 };
}
exports.HeartbeatFrameMetadataField6Decoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.unknown1 !== 0) {
            writer.uint32(112).uint32(message.unknown1);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHeartbeatFrameMetadataField6();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.unknown1 = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseHeartbeatFrameMetadataField7() {
    return { unknown1: 0 };
}
exports.HeartbeatFrameMetadataField7Decoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.unknown1 !== 0) {
            writer.uint32(104).uint32(message.unknown1);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHeartbeatFrameMetadataField7();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.unknown1 = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseHeartbeatFrame() {
    return { metadataField6: undefined, metadataField7: undefined, roomInfo: undefined };
}
exports.HeartbeatFrameDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.metadataField6 !== undefined) {
            exports.HeartbeatFrameMetadataField6Decoder.encode(message.metadataField6, writer.uint32(50).fork()).join();
        }
        if (message.metadataField7 !== undefined) {
            exports.HeartbeatFrameMetadataField7Decoder.encode(message.metadataField7, writer.uint32(58).fork()).join();
        }
        if (message.roomInfo !== undefined) {
            exports.HeartbeatFrameRoomInfoDecoder.encode(message.roomInfo, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHeartbeatFrame();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.metadataField6 = exports.HeartbeatFrameMetadataField6Decoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.metadataField7 = exports.HeartbeatFrameMetadataField7Decoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.roomInfo = exports.HeartbeatFrameRoomInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseImEnterRoomMessagePushFrame() {
    return { metadata: undefined, payloadType: "", payload: undefined };
}
exports.ImEnterRoomMessagePushFrameDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.metadata !== undefined) {
            exports.ImEnterRoomMessagePushFrame_MetadataDecoder.encode(message.metadata, writer.uint32(50).fork()).join();
        }
        if (message.payloadType !== "") {
            writer.uint32(58).string(message.payloadType);
        }
        if (message.payload !== undefined) {
            exports.ImEnterRoomMessagePushFrame_ImEnterRoomMessageDecoder.encode(message.payload, writer.uint32(66).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImEnterRoomMessagePushFrame();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.metadata = exports.ImEnterRoomMessagePushFrame_MetadataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.payloadType = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.payload = exports.ImEnterRoomMessagePushFrame_ImEnterRoomMessageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseImEnterRoomMessagePushFrame_Metadata() {
    return { unknown1: 0 };
}
exports.ImEnterRoomMessagePushFrame_MetadataDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.unknown1 !== 0) {
            writer.uint32(112).uint32(message.unknown1);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImEnterRoomMessagePushFrame_Metadata();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.unknown1 = reader.uint32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseImEnterRoomMessagePushFrame_ImEnterRoomMessage() {
    return { roomId: "0", unknown1: 0, role: "", cursor: "", unknown2: undefined, unknown3: "", unknown4: undefined };
}
exports.ImEnterRoomMessagePushFrame_ImEnterRoomMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.roomId !== "0") {
            writer.uint32(8).uint64(message.roomId);
        }
        if (message.unknown1 !== 0) {
            writer.uint32(32).uint32(message.unknown1);
        }
        if (message.role !== "") {
            writer.uint32(42).string(message.role);
        }
        if (message.cursor !== "") {
            writer.uint32(50).string(message.cursor);
        }
        if (message.unknown2 !== undefined) {
            writer.uint32(56).int32(message.unknown2);
        }
        if (message.unknown3 !== "") {
            writer.uint32(74).string(message.unknown3);
        }
        if (message.unknown4 !== undefined) {
            writer.uint32(80).int32(message.unknown4);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseImEnterRoomMessagePushFrame_ImEnterRoomMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.roomId = reader.uint64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.unknown1 = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.role = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.unknown2 = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.unknown3 = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.unknown4 = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastBarrageMessage() {
    return {
        common: undefined,
        event: undefined,
        msgType: undefined,
        icon: undefined,
        duration: "0",
        backGround: undefined,
        rightIcon: undefined,
        displayConfig: 0,
        galleryGiftId: "0",
        useMarquee: false,
        showType: undefined,
        renderType: undefined,
        leftIconDisplayType: undefined,
        ribbonAnimation: undefined,
        hybridUrl: "",
        schema: "",
        subType: "",
        privilegeLogExtra: undefined,
        content: undefined,
        scene: 0,
        control: undefined,
        rightLabel: undefined,
        badge: undefined,
        animationData: undefined,
        commonBarrageContent: undefined,
        userGradeParam: undefined,
        fansLevelParam: undefined,
        subscribeGiftParam: undefined,
        giftGalleryParams: undefined,
    };
}
exports.WebcastBarrageMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.event !== undefined) {
            exports.WebcastBarrageMessage_BarrageEventDecoder.encode(message.event, writer.uint32(18).fork()).join();
        }
        if (message.msgType !== undefined) {
            writer.uint32(24).int32(message.msgType);
        }
        if (message.icon !== undefined) {
            exports.ImageModelDecoder.encode(message.icon, writer.uint32(34).fork()).join();
        }
        if (message.duration !== "0") {
            writer.uint32(48).int64(message.duration);
        }
        if (message.backGround !== undefined) {
            exports.ImageModelDecoder.encode(message.backGround, writer.uint32(58).fork()).join();
        }
        if (message.rightIcon !== undefined) {
            exports.ImageModelDecoder.encode(message.rightIcon, writer.uint32(66).fork()).join();
        }
        if (message.displayConfig !== 0) {
            writer.uint32(72).int32(message.displayConfig);
        }
        if (message.galleryGiftId !== "0") {
            writer.uint32(80).int64(message.galleryGiftId);
        }
        if (message.useMarquee !== false) {
            writer.uint32(112).bool(message.useMarquee);
        }
        if (message.showType !== undefined) {
            writer.uint32(120).int32(message.showType);
        }
        if (message.renderType !== undefined) {
            writer.uint32(136).int32(message.renderType);
        }
        if (message.leftIconDisplayType !== undefined) {
            writer.uint32(144).int32(message.leftIconDisplayType);
        }
        if (message.ribbonAnimation !== undefined) {
            exports.ImageModelDecoder.encode(message.ribbonAnimation, writer.uint32(154).fork()).join();
        }
        if (message.hybridUrl !== "") {
            writer.uint32(170).string(message.hybridUrl);
        }
        if (message.schema !== "") {
            writer.uint32(178).string(message.schema);
        }
        if (message.subType !== "") {
            writer.uint32(186).string(message.subType);
        }
        if (message.privilegeLogExtra !== undefined) {
            exports.PrivilegeLogExtraDecoder.encode(message.privilegeLogExtra, writer.uint32(826).fork()).join();
        }
        if (message.content !== undefined) {
            exports.TextDecoder.encode(message.content, writer.uint32(42).fork()).join();
        }
        if (message.scene !== 0) {
            writer.uint32(88).int32(message.scene);
        }
        if (message.control !== undefined) {
            exports.WebcastBarrageMessage_DisplayControlDecoder.encode(message.control, writer.uint32(98).fork()).join();
        }
        if (message.rightLabel !== undefined) {
            exports.WebcastBarrageMessage_RightLabelDecoder.encode(message.rightLabel, writer.uint32(106).fork()).join();
        }
        if (message.badge !== undefined) {
            exports.BadgeStructDecoder.encode(message.badge, writer.uint32(130).fork()).join();
        }
        if (message.animationData !== undefined) {
            exports.WebcastBarrageMessage_AnimationDataDecoder.encode(message.animationData, writer.uint32(162).fork()).join();
        }
        if (message.commonBarrageContent !== undefined) {
            exports.TextDecoder.encode(message.commonBarrageContent, writer.uint32(194).fork()).join();
        }
        if (message.userGradeParam !== undefined) {
            exports.WebcastBarrageMessage_BarrageTypeUserGradeParamDecoder.encode(message.userGradeParam, writer.uint32(802).fork()).join();
        }
        if (message.fansLevelParam !== undefined) {
            exports.WebcastBarrageMessage_BarrageTypeFansLevelParamDecoder.encode(message.fansLevelParam, writer.uint32(810).fork()).join();
        }
        if (message.subscribeGiftParam !== undefined) {
            exports.WebcastBarrageMessage_BarrageTypeSubscribeGiftParamDecoder.encode(message.subscribeGiftParam, writer.uint32(818).fork())
                .join();
        }
        if (message.giftGalleryParams !== undefined) {
            exports.WebcastBarrageMessage_BarrageTypeGiftGalleryParamDecoder.encode(message.giftGalleryParams, writer.uint32(834).fork())
                .join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.event = exports.WebcastBarrageMessage_BarrageEventDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.msgType = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.icon = exports.ImageModelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.duration = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.backGround = exports.ImageModelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.rightIcon = exports.ImageModelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.displayConfig = reader.int32();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.galleryGiftId = reader.int64().toString();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.useMarquee = reader.bool();
                    continue;
                }
                case 15: {
                    if (tag !== 120) {
                        break;
                    }
                    message.showType = reader.int32();
                    continue;
                }
                case 17: {
                    if (tag !== 136) {
                        break;
                    }
                    message.renderType = reader.int32();
                    continue;
                }
                case 18: {
                    if (tag !== 144) {
                        break;
                    }
                    message.leftIconDisplayType = reader.int32();
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.ribbonAnimation = exports.ImageModelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.hybridUrl = reader.string();
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.schema = reader.string();
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.subType = reader.string();
                    continue;
                }
                case 103: {
                    if (tag !== 826) {
                        break;
                    }
                    message.privilegeLogExtra = exports.PrivilegeLogExtraDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.content = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.scene = reader.int32();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.control = exports.WebcastBarrageMessage_DisplayControlDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.rightLabel = exports.WebcastBarrageMessage_RightLabelDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.badge = exports.BadgeStructDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.animationData = exports.WebcastBarrageMessage_AnimationDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 24: {
                    if (tag !== 194) {
                        break;
                    }
                    message.commonBarrageContent = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 100: {
                    if (tag !== 802) {
                        break;
                    }
                    message.userGradeParam = exports.WebcastBarrageMessage_BarrageTypeUserGradeParamDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 101: {
                    if (tag !== 810) {
                        break;
                    }
                    message.fansLevelParam = exports.WebcastBarrageMessage_BarrageTypeFansLevelParamDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 102: {
                    if (tag !== 818) {
                        break;
                    }
                    message.subscribeGiftParam = exports.WebcastBarrageMessage_BarrageTypeSubscribeGiftParamDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 104: {
                    if (tag !== 834) {
                        break;
                    }
                    message.giftGalleryParams = exports.WebcastBarrageMessage_BarrageTypeGiftGalleryParamDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastBarrageMessage_BarrageEvent() {
    return { eventName: "", params: {} };
}
exports.WebcastBarrageMessage_BarrageEventDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.eventName !== "") {
            writer.uint32(10).string(message.eventName);
        }
        Object.entries(message.params).forEach(([key, value]) => {
            exports.WebcastBarrageMessage_BarrageEvent_ParamsEntryDecoder.encode({ key: key, value }, writer.uint32(18).fork())
                .join();
        });
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_BarrageEvent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.eventName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.WebcastBarrageMessage_BarrageEvent_ParamsEntryDecoder.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.params[entry2.key] = entry2.value;
                    }
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastBarrageMessage_BarrageEvent_ParamsEntry() {
    return { key: "", value: "" };
}
exports.WebcastBarrageMessage_BarrageEvent_ParamsEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_BarrageEvent_ParamsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastBarrageMessage_BarrageTypeUserGradeParam() {
    return { currentGrade: 0, displayConfig: 0, userId: "", user: undefined };
}
exports.WebcastBarrageMessage_BarrageTypeUserGradeParamDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.currentGrade !== 0) {
            writer.uint32(8).int32(message.currentGrade);
        }
        if (message.displayConfig !== 0) {
            writer.uint32(16).int32(message.displayConfig);
        }
        if (message.userId !== "") {
            writer.uint32(26).string(message.userId);
        }
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_BarrageTypeUserGradeParam();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.currentGrade = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.displayConfig = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.userId = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastBarrageMessage_BarrageTypeFansLevelParam() {
    return { currentGrade: 0, displayConfig: 0, user: undefined };
}
exports.WebcastBarrageMessage_BarrageTypeFansLevelParamDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.currentGrade !== 0) {
            writer.uint32(8).int32(message.currentGrade);
        }
        if (message.displayConfig !== 0) {
            writer.uint32(16).int32(message.displayConfig);
        }
        if (message.user !== undefined) {
            exports.UserDecoder.encode(message.user, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_BarrageTypeFansLevelParam();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.currentGrade = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.displayConfig = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.user = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastBarrageMessage_BarrageTypeSubscribeGiftParam() {
    return { giftSubCount: "0", showGiftSubCount: false };
}
exports.WebcastBarrageMessage_BarrageTypeSubscribeGiftParamDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.giftSubCount !== "0") {
            writer.uint32(8).int64(message.giftSubCount);
        }
        if (message.showGiftSubCount !== false) {
            writer.uint32(16).bool(message.showGiftSubCount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_BarrageTypeSubscribeGiftParam();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.giftSubCount = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.showGiftSubCount = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastBarrageMessage_AnimationData() {
    return { geckoChannelName: "", fileName: "", height: "0", width: "0", rightOffset: "0" };
}
exports.WebcastBarrageMessage_AnimationDataDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.geckoChannelName !== "") {
            writer.uint32(10).string(message.geckoChannelName);
        }
        if (message.fileName !== "") {
            writer.uint32(18).string(message.fileName);
        }
        if (message.height !== "0") {
            writer.uint32(24).int64(message.height);
        }
        if (message.width !== "0") {
            writer.uint32(32).int64(message.width);
        }
        if (message.rightOffset !== "0") {
            writer.uint32(40).int64(message.rightOffset);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_AnimationData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.geckoChannelName = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.fileName = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.height = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.width = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.rightOffset = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastBarrageMessage_BarrageTypeGiftGalleryParam() {
    return { fromUserId: "0", toUserId: "0" };
}
exports.WebcastBarrageMessage_BarrageTypeGiftGalleryParamDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.fromUserId !== "0") {
            writer.uint32(8).int64(message.fromUserId);
        }
        if (message.toUserId !== "0") {
            writer.uint32(16).int64(message.toUserId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_BarrageTypeGiftGalleryParam();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.fromUserId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.toUserId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastBarrageMessage_DisplayControl() {
    return { priority: 0, duration: "0", targetGroupShowRst: {}, horizontalTriggerType: 0 };
}
exports.WebcastBarrageMessage_DisplayControlDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.priority !== 0) {
            writer.uint32(8).int32(message.priority);
        }
        if (message.duration !== "0") {
            writer.uint32(16).int64(message.duration);
        }
        Object.entries(message.targetGroupShowRst).forEach(([key, value]) => {
            exports.WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntryDecoder.encode({ key: key, value }, writer.uint32(26).fork()).join();
        });
        if (message.horizontalTriggerType !== 0) {
            writer.uint32(32).int32(message.horizontalTriggerType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_DisplayControl();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.priority = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.duration = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    const entry3 = exports.WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntryDecoder.decode(reader, reader.uint32());
                    if (entry3.value !== undefined) {
                        message.targetGroupShowRst[entry3.key] = entry3.value;
                    }
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.horizontalTriggerType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry() {
    return { key: 0, value: undefined };
}
exports.WebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== 0) {
            writer.uint32(8).int32(message.key);
        }
        if (message.value !== undefined) {
            exports.WebcastBarrageMessage_DisplayControl_ShowResultDecoder.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_DisplayControl_TargetGroupShowRstEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.WebcastBarrageMessage_DisplayControl_ShowResultDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastBarrageMessage_DisplayControl_ShowResult() {
    return { banned: false };
}
exports.WebcastBarrageMessage_DisplayControl_ShowResultDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.banned !== false) {
            writer.uint32(8).bool(message.banned);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_DisplayControl_ShowResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.banned = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastBarrageMessage_RightLabel() {
    return { backgroundColor: "", content: undefined, height: "0" };
}
exports.WebcastBarrageMessage_RightLabelDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.backgroundColor !== "") {
            writer.uint32(10).string(message.backgroundColor);
        }
        if (message.content !== undefined) {
            exports.TextDecoder.encode(message.content, writer.uint32(18).fork()).join();
        }
        if (message.height !== "0") {
            writer.uint32(24).int64(message.height);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastBarrageMessage_RightLabel();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.backgroundColor = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.content = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.height = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastPushFrame() {
    return {
        seqId: "0",
        id: "0",
        service: "0",
        method: "0",
        headers: {},
        payloadEncoding: "",
        type: "",
        binary: new Uint8Array(0),
    };
}
exports.WebcastPushFrameDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.seqId !== "0") {
            writer.uint32(8).int64(message.seqId);
        }
        if (message.id !== "0") {
            writer.uint32(16).int64(message.id);
        }
        if (message.service !== "0") {
            writer.uint32(24).int64(message.service);
        }
        if (message.method !== "0") {
            writer.uint32(32).int64(message.method);
        }
        Object.entries(message.headers).forEach(([key, value]) => {
            exports.WebcastPushFrame_HeadersEntryDecoder.encode({ key: key, value }, writer.uint32(42).fork()).join();
        });
        if (message.payloadEncoding !== "") {
            writer.uint32(50).string(message.payloadEncoding);
        }
        if (message.type !== "") {
            writer.uint32(58).string(message.type);
        }
        if (message.binary.length !== 0) {
            writer.uint32(66).bytes(message.binary);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastPushFrame();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.seqId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.id = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.service = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.method = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    const entry5 = exports.WebcastPushFrame_HeadersEntryDecoder.decode(reader, reader.uint32());
                    if (entry5.value !== undefined) {
                        message.headers[entry5.key] = entry5.value;
                    }
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.payloadEncoding = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.binary = reader.bytes();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastPushFrame_HeadersEntry() {
    return { key: "", value: "" };
}
exports.WebcastPushFrame_HeadersEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastPushFrame_HeadersEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseProtoMessageFetchResult() {
    return {
        messages: [],
        cursor: "",
        fetchInterval: "0",
        now: "0",
        internalExt: "",
        fetchType: 0,
        wsParams: {},
        heartBeatDuration: "0",
        needsAck: false,
        wsUrl: "",
        isFirst: false,
        historyCommentCursor: "",
        historyNoMore: false,
    };
}
exports.ProtoMessageFetchResultDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.messages) {
            exports.BaseProtoMessageDecoder.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.cursor !== "") {
            writer.uint32(18).string(message.cursor);
        }
        if (message.fetchInterval !== "0") {
            writer.uint32(24).int64(message.fetchInterval);
        }
        if (message.now !== "0") {
            writer.uint32(32).int64(message.now);
        }
        if (message.internalExt !== "") {
            writer.uint32(42).string(message.internalExt);
        }
        if (message.fetchType !== 0) {
            writer.uint32(48).int32(message.fetchType);
        }
        Object.entries(message.wsParams).forEach(([key, value]) => {
            exports.ProtoMessageFetchResult_WsParamsEntryDecoder.encode({ key: key, value }, writer.uint32(58).fork()).join();
        });
        if (message.heartBeatDuration !== "0") {
            writer.uint32(64).int64(message.heartBeatDuration);
        }
        if (message.needsAck !== false) {
            writer.uint32(72).bool(message.needsAck);
        }
        if (message.wsUrl !== "") {
            writer.uint32(82).string(message.wsUrl);
        }
        if (message.isFirst !== false) {
            writer.uint32(88).bool(message.isFirst);
        }
        if (message.historyCommentCursor !== "") {
            writer.uint32(98).string(message.historyCommentCursor);
        }
        if (message.historyNoMore !== false) {
            writer.uint32(104).bool(message.historyNoMore);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProtoMessageFetchResult();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.messages.push(exports.BaseProtoMessageDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.cursor = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.fetchInterval = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.now = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.internalExt = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.fetchType = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    const entry7 = exports.ProtoMessageFetchResult_WsParamsEntryDecoder.decode(reader, reader.uint32());
                    if (entry7.value !== undefined) {
                        message.wsParams[entry7.key] = entry7.value;
                    }
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.heartBeatDuration = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.needsAck = reader.bool();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.wsUrl = reader.string();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.isFirst = reader.bool();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.historyCommentCursor = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.historyNoMore = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseProtoMessageFetchResult_WsParamsEntry() {
    return { key: "", value: "" };
}
exports.ProtoMessageFetchResult_WsParamsEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseProtoMessageFetchResult_WsParamsEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseBaseProtoMessage() {
    return { type: "", payload: new Uint8Array(0), msgId: "0", msgType: 0, offset: "0", isHistory: false };
}
exports.BaseProtoMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== "") {
            writer.uint32(10).string(message.type);
        }
        if (message.payload.length !== 0) {
            writer.uint32(18).bytes(message.payload);
        }
        if (message.msgId !== "0") {
            writer.uint32(24).int64(message.msgId);
        }
        if (message.msgType !== 0) {
            writer.uint32(32).int32(message.msgType);
        }
        if (message.offset !== "0") {
            writer.uint32(40).int64(message.offset);
        }
        if (message.isHistory !== false) {
            writer.uint32(48).bool(message.isHistory);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseBaseProtoMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.type = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.payload = reader.bytes();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.msgId = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.msgType = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.offset = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.isHistory = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastRoomMessage() {
    return {
        common: undefined,
        content: "",
        supportLandscape: false,
        source: "0",
        icon: undefined,
        scene: 0,
        isWelcome: false,
        publicAreaCommon: undefined,
        showDurationMs: "0",
        subScene: "",
    };
}
exports.WebcastRoomMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.content !== "") {
            writer.uint32(18).string(message.content);
        }
        if (message.supportLandscape !== false) {
            writer.uint32(24).bool(message.supportLandscape);
        }
        if (message.source !== "0") {
            writer.uint32(32).int64(message.source);
        }
        if (message.icon !== undefined) {
            exports.ImageDecoder.encode(message.icon, writer.uint32(42).fork()).join();
        }
        if (message.scene !== 0) {
            writer.uint32(48).int32(message.scene);
        }
        if (message.isWelcome !== false) {
            writer.uint32(56).bool(message.isWelcome);
        }
        if (message.publicAreaCommon !== undefined) {
            exports.PublicAreaMessageCommonDecoder.encode(message.publicAreaCommon, writer.uint32(66).fork()).join();
        }
        if (message.showDurationMs !== "0") {
            writer.uint32(72).int64(message.showDurationMs);
        }
        if (message.subScene !== "") {
            writer.uint32(82).string(message.subScene);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastRoomMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.supportLandscape = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.source = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.icon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.scene = reader.int32();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.isWelcome = reader.bool();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.publicAreaCommon = exports.PublicAreaMessageCommonDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.showDurationMs = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.subScene = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastCaptionMessage() {
    return {
        common: undefined,
        timestampMs: "0",
        durationMs: "0",
        content: [],
        sentenceId: "0",
        sequenceId: "0",
        definite: false,
    };
}
exports.WebcastCaptionMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.timestampMs !== "0") {
            writer.uint32(16).int64(message.timestampMs);
        }
        if (message.durationMs !== "0") {
            writer.uint32(24).int64(message.durationMs);
        }
        for (const v of message.content) {
            exports.WebcastCaptionMessage_CaptionContentDecoder.encode(v, writer.uint32(34).fork()).join();
        }
        if (message.sentenceId !== "0") {
            writer.uint32(40).int64(message.sentenceId);
        }
        if (message.sequenceId !== "0") {
            writer.uint32(48).int64(message.sequenceId);
        }
        if (message.definite !== false) {
            writer.uint32(56).bool(message.definite);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastCaptionMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.timestampMs = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.durationMs = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.content.push(exports.WebcastCaptionMessage_CaptionContentDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.sentenceId = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.sequenceId = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.definite = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastCaptionMessage_CaptionContent() {
    return { lang: "", content: "" };
}
exports.WebcastCaptionMessage_CaptionContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.lang !== "") {
            writer.uint32(10).string(message.lang);
        }
        if (message.content !== "") {
            writer.uint32(18).string(message.content);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastCaptionMessage_CaptionContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.lang = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastControlMessage() {
    return {
        common: undefined,
        action: 0,
        tips: "",
        extra: undefined,
        perceptionDialog: undefined,
        perceptionAudienceText: undefined,
        punishInfo: undefined,
        floatText: undefined,
        floatStyle: 0,
    };
}
exports.WebcastControlMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.action !== 0) {
            writer.uint32(16).int32(message.action);
        }
        if (message.tips !== "") {
            writer.uint32(26).string(message.tips);
        }
        if (message.extra !== undefined) {
            exports.WebcastControlMessage_ExtraDecoder.encode(message.extra, writer.uint32(34).fork()).join();
        }
        if (message.perceptionDialog !== undefined) {
            exports.WebcastControlMessage_PerceptionDialogInfoDecoder.encode(message.perceptionDialog, writer.uint32(42).fork()).join();
        }
        if (message.perceptionAudienceText !== undefined) {
            exports.TextDecoder.encode(message.perceptionAudienceText, writer.uint32(50).fork()).join();
        }
        if (message.punishInfo !== undefined) {
            exports.PunishEventInfoDecoder.encode(message.punishInfo, writer.uint32(58).fork()).join();
        }
        if (message.floatText !== undefined) {
            exports.TextDecoder.encode(message.floatText, writer.uint32(66).fork()).join();
        }
        if (message.floatStyle !== 0) {
            writer.uint32(72).int32(message.floatStyle);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastControlMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.tips = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.extra = exports.WebcastControlMessage_ExtraDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.perceptionDialog = exports.WebcastControlMessage_PerceptionDialogInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.perceptionAudienceText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.punishInfo = exports.PunishEventInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.floatText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.floatStyle = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastControlMessage_Extra() {
    return {
        banInfoUrl: "",
        reasonNo: "0",
        title: undefined,
        violationReason: undefined,
        content: undefined,
        gotItButton: undefined,
        banDetailButton: undefined,
        source: "",
    };
}
exports.WebcastControlMessage_ExtraDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.banInfoUrl !== "") {
            writer.uint32(10).string(message.banInfoUrl);
        }
        if (message.reasonNo !== "0") {
            writer.uint32(16).int64(message.reasonNo);
        }
        if (message.title !== undefined) {
            exports.TextDecoder.encode(message.title, writer.uint32(26).fork()).join();
        }
        if (message.violationReason !== undefined) {
            exports.TextDecoder.encode(message.violationReason, writer.uint32(34).fork()).join();
        }
        if (message.content !== undefined) {
            exports.TextDecoder.encode(message.content, writer.uint32(42).fork()).join();
        }
        if (message.gotItButton !== undefined) {
            exports.TextDecoder.encode(message.gotItButton, writer.uint32(50).fork()).join();
        }
        if (message.banDetailButton !== undefined) {
            exports.TextDecoder.encode(message.banDetailButton, writer.uint32(58).fork()).join();
        }
        if (message.source !== "") {
            writer.uint32(66).string(message.source);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastControlMessage_Extra();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.banInfoUrl = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.reasonNo = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.title = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.violationReason = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.content = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.gotItButton = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.banDetailButton = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.source = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastControlMessage_PerceptionDialogInfo() {
    return {
        iconType: 0,
        title: undefined,
        subTitle: undefined,
        adviceActionText: undefined,
        defaultActionText: undefined,
        violationDetailUrl: "",
        scene: 0,
        targetUserId: "0",
        targetRoomId: "0",
        countDownTime: "0",
        showFeedback: false,
        feedbackOptions: [],
        policyTip: "0",
        appealPopup: 0,
    };
}
exports.WebcastControlMessage_PerceptionDialogInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.iconType !== 0) {
            writer.uint32(8).int32(message.iconType);
        }
        if (message.title !== undefined) {
            exports.TextDecoder.encode(message.title, writer.uint32(18).fork()).join();
        }
        if (message.subTitle !== undefined) {
            exports.TextDecoder.encode(message.subTitle, writer.uint32(26).fork()).join();
        }
        if (message.adviceActionText !== undefined) {
            exports.TextDecoder.encode(message.adviceActionText, writer.uint32(34).fork()).join();
        }
        if (message.defaultActionText !== undefined) {
            exports.TextDecoder.encode(message.defaultActionText, writer.uint32(42).fork()).join();
        }
        if (message.violationDetailUrl !== "") {
            writer.uint32(50).string(message.violationDetailUrl);
        }
        if (message.scene !== 0) {
            writer.uint32(56).int32(message.scene);
        }
        if (message.targetUserId !== "0") {
            writer.uint32(64).int64(message.targetUserId);
        }
        if (message.targetRoomId !== "0") {
            writer.uint32(72).int64(message.targetRoomId);
        }
        if (message.countDownTime !== "0") {
            writer.uint32(80).int64(message.countDownTime);
        }
        if (message.showFeedback !== false) {
            writer.uint32(88).bool(message.showFeedback);
        }
        for (const v of message.feedbackOptions) {
            exports.WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOptionDecoder.encode(v, writer.uint32(98).fork()).join();
        }
        if (message.policyTip !== "0") {
            writer.uint32(104).int64(message.policyTip);
        }
        if (message.appealPopup !== 0) {
            writer.uint32(112).int32(message.appealPopup);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastControlMessage_PerceptionDialogInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.iconType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.subTitle = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.adviceActionText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.defaultActionText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.violationDetailUrl = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.scene = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.targetUserId = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.targetRoomId = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.countDownTime = reader.int64().toString();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.showFeedback = reader.bool();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.feedbackOptions.push(exports.WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOptionDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.policyTip = reader.int64().toString();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.appealPopup = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption() {
    return { id: "0", contentKey: "" };
}
exports.WebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOptionDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id !== "0") {
            writer.uint32(8).int64(message.id);
        }
        if (message.contentKey !== "") {
            writer.uint32(18).string(message.contentKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastControlMessage_PerceptionDialogInfo_PerceptionFeedbackOption();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.id = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.contentKey = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGoalUpdateMessage() {
    return {
        common: undefined,
        indicator: undefined,
        goal: undefined,
        contributorId: "0",
        contributorAvatar: undefined,
        contributorDisplayId: "",
        contributeSubgoal: undefined,
        contributeCount: "0",
        contributeScore: "0",
        giftRepeatCount: "0",
        contributorIdStr: "",
        pin: false,
        unpin: false,
        pinInfo: undefined,
        updateSource: 0,
        goalExtra: "",
    };
}
exports.WebcastGoalUpdateMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.indicator !== undefined) {
            exports.LiveStreamGoalIndicatorDecoder.encode(message.indicator, writer.uint32(18).fork()).join();
        }
        if (message.goal !== undefined) {
            exports.LiveStreamGoalDecoder.encode(message.goal, writer.uint32(26).fork()).join();
        }
        if (message.contributorId !== "0") {
            writer.uint32(32).int64(message.contributorId);
        }
        if (message.contributorAvatar !== undefined) {
            exports.ImageDecoder.encode(message.contributorAvatar, writer.uint32(42).fork()).join();
        }
        if (message.contributorDisplayId !== "") {
            writer.uint32(50).string(message.contributorDisplayId);
        }
        if (message.contributeSubgoal !== undefined) {
            exports.WebcastGoalUpdateMessage_LiveStreamSubGoalDecoder.encode(message.contributeSubgoal, writer.uint32(58).fork()).join();
        }
        if (message.contributeCount !== "0") {
            writer.uint32(72).int64(message.contributeCount);
        }
        if (message.contributeScore !== "0") {
            writer.uint32(80).int64(message.contributeScore);
        }
        if (message.giftRepeatCount !== "0") {
            writer.uint32(88).int64(message.giftRepeatCount);
        }
        if (message.contributorIdStr !== "") {
            writer.uint32(98).string(message.contributorIdStr);
        }
        if (message.pin !== false) {
            writer.uint32(104).bool(message.pin);
        }
        if (message.unpin !== false) {
            writer.uint32(112).bool(message.unpin);
        }
        if (message.pinInfo !== undefined) {
            exports.WebcastGoalUpdateMessage_GoalPinInfoDecoder.encode(message.pinInfo, writer.uint32(122).fork()).join();
        }
        if (message.updateSource !== 0) {
            writer.uint32(128).int32(message.updateSource);
        }
        if (message.goalExtra !== "") {
            writer.uint32(138).string(message.goalExtra);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGoalUpdateMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.indicator = exports.LiveStreamGoalIndicatorDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.goal = exports.LiveStreamGoalDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.contributorId = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.contributorAvatar = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.contributorDisplayId = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.contributeSubgoal = exports.WebcastGoalUpdateMessage_LiveStreamSubGoalDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.contributeCount = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.contributeScore = reader.int64().toString();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.giftRepeatCount = reader.int64().toString();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.contributorIdStr = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.pin = reader.bool();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.unpin = reader.bool();
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.pinInfo = exports.WebcastGoalUpdateMessage_GoalPinInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.updateSource = reader.int32();
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.goalExtra = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal() {
    return {
        type: 0,
        id: "0",
        progress: "0",
        target: "0",
        gift: undefined,
        idStr: "",
        pinInfo: undefined,
        source: 0,
        recommendedText: "",
        recommendedCommon: "",
    };
}
exports.WebcastGoalUpdateMessage_LiveStreamSubGoalDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.type !== 0) {
            writer.uint32(8).int32(message.type);
        }
        if (message.id !== "0") {
            writer.uint32(16).int64(message.id);
        }
        if (message.progress !== "0") {
            writer.uint32(24).int64(message.progress);
        }
        if (message.target !== "0") {
            writer.uint32(32).int64(message.target);
        }
        if (message.gift !== undefined) {
            exports.WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGiftDecoder.encode(message.gift, writer.uint32(42).fork())
                .join();
        }
        if (message.idStr !== "") {
            writer.uint32(50).string(message.idStr);
        }
        if (message.pinInfo !== undefined) {
            exports.WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfoDecoder.encode(message.pinInfo, writer.uint32(58).fork())
                .join();
        }
        if (message.source !== 0) {
            writer.uint32(64).int32(message.source);
        }
        if (message.recommendedText !== "") {
            writer.uint32(74).string(message.recommendedText);
        }
        if (message.recommendedCommon !== "") {
            writer.uint32(82).string(message.recommendedCommon);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.id = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.progress = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.target = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.gift = exports.WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGiftDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.idStr = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.pinInfo = exports.WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.source = reader.int32();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.recommendedText = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.recommendedCommon = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift() {
    return { name: "", icon: undefined, diamondCount: "0", type: 0 };
}
exports.WebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGiftDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.icon !== undefined) {
            exports.ImageDecoder.encode(message.icon, writer.uint32(18).fork()).join();
        }
        if (message.diamondCount !== "0") {
            writer.uint32(24).int64(message.diamondCount);
        }
        if (message.type !== 0) {
            writer.uint32(32).int32(message.type);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal_LiveStreamSubGoalGift();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.icon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.diamondCount = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.type = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo() {
    return { pinStartTime: "0", pinEndTime: "0", pinReadyTime: "0" };
}
exports.WebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pinStartTime !== "0") {
            writer.uint32(8).int64(message.pinStartTime);
        }
        if (message.pinEndTime !== "0") {
            writer.uint32(16).int64(message.pinEndTime);
        }
        if (message.pinReadyTime !== "0") {
            writer.uint32(24).int64(message.pinReadyTime);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGoalUpdateMessage_LiveStreamSubGoal_SubGoalPinInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pinStartTime = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.pinEndTime = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.pinReadyTime = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastGoalUpdateMessage_GoalPinInfo() {
    return { pin: false, unpin: false, pinEndTime: "0", subGoalId: "0", subGoalIdStr: "" };
}
exports.WebcastGoalUpdateMessage_GoalPinInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pin !== false) {
            writer.uint32(8).bool(message.pin);
        }
        if (message.unpin !== false) {
            writer.uint32(16).bool(message.unpin);
        }
        if (message.pinEndTime !== "0") {
            writer.uint32(24).int64(message.pinEndTime);
        }
        if (message.subGoalId !== "0") {
            writer.uint32(32).int64(message.subGoalId);
        }
        if (message.subGoalIdStr !== "") {
            writer.uint32(42).string(message.subGoalIdStr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastGoalUpdateMessage_GoalPinInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.pin = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.unpin = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.pinEndTime = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.subGoalId = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.subGoalIdStr = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastImDeleteMessage() {
    return { common: undefined, deleteMsgIdsList: [], deleteUserIdsList: [] };
}
exports.WebcastImDeleteMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        writer.uint32(18).fork();
        for (const v of message.deleteMsgIdsList) {
            writer.int64(v);
        }
        writer.join();
        writer.uint32(26).fork();
        for (const v of message.deleteUserIdsList) {
            writer.int64(v);
        }
        writer.join();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastImDeleteMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.deleteMsgIdsList.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 18) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.deleteMsgIdsList.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
                case 3: {
                    if (tag === 24) {
                        message.deleteUserIdsList.push(reader.int64().toString());
                        continue;
                    }
                    if (tag === 26) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.deleteUserIdsList.push(reader.int64().toString());
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastInRoomBannerMessage() {
    return { common: undefined, data: {}, position: 0, actionType: 0 };
}
exports.WebcastInRoomBannerMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        Object.entries(message.data).forEach(([key, value]) => {
            exports.WebcastInRoomBannerMessage_DataEntryDecoder.encode({ key: key, value }, writer.uint32(18).fork()).join();
        });
        if (message.position !== 0) {
            writer.uint32(24).int32(message.position);
        }
        if (message.actionType !== 0) {
            writer.uint32(32).int32(message.actionType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastInRoomBannerMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    const entry2 = exports.WebcastInRoomBannerMessage_DataEntryDecoder.decode(reader, reader.uint32());
                    if (entry2.value !== undefined) {
                        message.data[entry2.key] = entry2.value;
                    }
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.position = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.actionType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastInRoomBannerMessage_DataEntry() {
    return { key: "", value: "" };
}
exports.WebcastInRoomBannerMessage_DataEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "") {
            writer.uint32(10).string(message.key);
        }
        if (message.value !== "") {
            writer.uint32(18).string(message.value);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastInRoomBannerMessage_DataEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.key = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastRankUpdateMessage() {
    return {
        common: undefined,
        updatesList: [],
        groupType: "0",
        priority: "0",
        tabsList: [],
        isAnimationLoopPlay: false,
        animationLoopForOff: false,
        unionAnimation: [],
        tabInfo: [],
    };
}
exports.WebcastRankUpdateMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        for (const v of message.updatesList) {
            exports.WebcastRankUpdateMessage_RankUpdateDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.groupType !== "0") {
            writer.uint32(24).int64(message.groupType);
        }
        if (message.priority !== "0") {
            writer.uint32(40).int64(message.priority);
        }
        for (const v of message.tabsList) {
            exports.WebcastRankUpdateMessage_RankTabInfoDecoder.encode(v, writer.uint32(50).fork()).join();
        }
        if (message.isAnimationLoopPlay !== false) {
            writer.uint32(56).bool(message.isAnimationLoopPlay);
        }
        if (message.animationLoopForOff !== false) {
            writer.uint32(64).bool(message.animationLoopForOff);
        }
        for (const v of message.unionAnimation) {
            exports.WebcastRankUpdateMessage_UnionAnimationInfoDecoder.encode(v, writer.uint32(74).fork()).join();
        }
        for (const v of message.tabInfo) {
            exports.WebcastRankUpdateMessage_RankListTabInfoDecoder.encode(v, writer.uint32(82).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastRankUpdateMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.updatesList.push(exports.WebcastRankUpdateMessage_RankUpdateDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.groupType = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.priority = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.tabsList.push(exports.WebcastRankUpdateMessage_RankTabInfoDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.isAnimationLoopPlay = reader.bool();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.animationLoopForOff = reader.bool();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.unionAnimation.push(exports.WebcastRankUpdateMessage_UnionAnimationInfoDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.tabInfo.push(exports.WebcastRankUpdateMessage_RankListTabInfoDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastRankUpdateMessage_UnionAnimationInfo() {
    return { unionType: 0, rankTypeArray: 0, supportedVersion: "0" };
}
exports.WebcastRankUpdateMessage_UnionAnimationInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.unionType !== 0) {
            writer.uint32(8).int32(message.unionType);
        }
        if (message.rankTypeArray !== 0) {
            writer.uint32(16).int32(message.rankTypeArray);
        }
        if (message.supportedVersion !== "0") {
            writer.uint32(24).int64(message.supportedVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastRankUpdateMessage_UnionAnimationInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.unionType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.rankTypeArray = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.supportedVersion = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastRankUpdateMessage_RankListTabInfo() {
    return { tabs: [], supportedVersion: "0" };
}
exports.WebcastRankUpdateMessage_RankListTabInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        for (const v of message.tabs) {
            exports.WebcastRankUpdateMessage_RankTabInfoDecoder.encode(v, writer.uint32(10).fork()).join();
        }
        if (message.supportedVersion !== "0") {
            writer.uint32(16).int64(message.supportedVersion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastRankUpdateMessage_RankListTabInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.tabs.push(exports.WebcastRankUpdateMessage_RankTabInfoDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.supportedVersion = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastRankUpdateMessage_RankTabInfo() {
    return { rankType: 0, title: "", titleText: undefined, listLynxType: "0" };
}
exports.WebcastRankUpdateMessage_RankTabInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rankType !== 0) {
            writer.uint32(8).int32(message.rankType);
        }
        if (message.title !== "") {
            writer.uint32(18).string(message.title);
        }
        if (message.titleText !== undefined) {
            exports.TextDecoder.encode(message.titleText, writer.uint32(26).fork()).join();
        }
        if (message.listLynxType !== "0") {
            writer.uint32(32).int64(message.listLynxType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastRankUpdateMessage_RankTabInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.rankType = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.titleText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.listLynxType = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastRankUpdateMessage_RankUpdate() {
    return {
        rankType: "0",
        ownerRank: "0",
        defaultContent: undefined,
        showEntranceAnimation: false,
        countdown: "0",
        relatedTabRankType: "0",
        requestFirstShowType: "0",
        supportedVersion: "0",
        owneronrank: false,
    };
}
exports.WebcastRankUpdateMessage_RankUpdateDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rankType !== "0") {
            writer.uint32(8).int64(message.rankType);
        }
        if (message.ownerRank !== "0") {
            writer.uint32(16).int64(message.ownerRank);
        }
        if (message.defaultContent !== undefined) {
            exports.TextDecoder.encode(message.defaultContent, writer.uint32(26).fork()).join();
        }
        if (message.showEntranceAnimation !== false) {
            writer.uint32(40).bool(message.showEntranceAnimation);
        }
        if (message.countdown !== "0") {
            writer.uint32(48).int64(message.countdown);
        }
        if (message.relatedTabRankType !== "0") {
            writer.uint32(64).int64(message.relatedTabRankType);
        }
        if (message.requestFirstShowType !== "0") {
            writer.uint32(72).int64(message.requestFirstShowType);
        }
        if (message.supportedVersion !== "0") {
            writer.uint32(80).int64(message.supportedVersion);
        }
        if (message.owneronrank !== false) {
            writer.uint32(88).bool(message.owneronrank);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastRankUpdateMessage_RankUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.rankType = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.ownerRank = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.defaultContent = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.showEntranceAnimation = reader.bool();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.countdown = reader.int64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.relatedTabRankType = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.requestFirstShowType = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.supportedVersion = reader.int64().toString();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.owneronrank = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastPollMessage() {
    return {
        common: undefined,
        messageType: 0,
        pollId: "0",
        startContent: undefined,
        endContent: undefined,
        updateContent: undefined,
        pollKind: 0,
        pollBasicInfo: undefined,
        templateContent: undefined,
    };
}
exports.WebcastPollMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.messageType !== 0) {
            writer.uint32(16).int32(message.messageType);
        }
        if (message.pollId !== "0") {
            writer.uint32(24).int64(message.pollId);
        }
        if (message.startContent !== undefined) {
            exports.PollStartContentDecoder.encode(message.startContent, writer.uint32(34).fork()).join();
        }
        if (message.endContent !== undefined) {
            exports.PollEndContentDecoder.encode(message.endContent, writer.uint32(42).fork()).join();
        }
        if (message.updateContent !== undefined) {
            exports.PollUpdateVotesContentDecoder.encode(message.updateContent, writer.uint32(50).fork()).join();
        }
        if (message.pollKind !== 0) {
            writer.uint32(56).int32(message.pollKind);
        }
        if (message.pollBasicInfo !== undefined) {
            exports.WebcastPollMessage_PollBasicInfoDecoder.encode(message.pollBasicInfo, writer.uint32(66).fork()).join();
        }
        if (message.templateContent !== undefined) {
            exports.WebcastPollMessage_TemplateContentDecoder.encode(message.templateContent, writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastPollMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.messageType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.pollId = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.startContent = exports.PollStartContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.endContent = exports.PollEndContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.updateContent = exports.PollUpdateVotesContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.pollKind = reader.int32();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.pollBasicInfo = exports.WebcastPollMessage_PollBasicInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.templateContent = exports.WebcastPollMessage_TemplateContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastPollMessage_TemplateContent() {
    return { templateId: "0", templateIdStr: "", status: 0, pollKind: 0, appealStatus: 0, violationIdStr: "" };
}
exports.WebcastPollMessage_TemplateContentDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.templateId !== "0") {
            writer.uint32(8).int64(message.templateId);
        }
        if (message.templateIdStr !== "") {
            writer.uint32(18).string(message.templateIdStr);
        }
        if (message.status !== 0) {
            writer.uint32(24).int32(message.status);
        }
        if (message.pollKind !== 0) {
            writer.uint32(32).int32(message.pollKind);
        }
        if (message.appealStatus !== 0) {
            writer.uint32(40).int32(message.appealStatus);
        }
        if (message.violationIdStr !== "") {
            writer.uint32(50).string(message.violationIdStr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastPollMessage_TemplateContent();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.templateId = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.templateIdStr = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.pollKind = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.appealStatus = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.violationIdStr = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastPollMessage_PollBasicInfo() {
    return {
        pollSponsor: "",
        giftId: "0",
        title: "",
        isSuggestedQuestion: false,
        userCnt: "0",
        gift: undefined,
        pollIdStr: "",
        suggestedQuestionKey: "",
        pollDuration: "0",
        timeRemain: "0",
        pollIndex: "0",
        templateId: "0",
    };
}
exports.WebcastPollMessage_PollBasicInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.pollSponsor !== "") {
            writer.uint32(10).string(message.pollSponsor);
        }
        if (message.giftId !== "0") {
            writer.uint32(16).int64(message.giftId);
        }
        if (message.title !== "") {
            writer.uint32(26).string(message.title);
        }
        if (message.isSuggestedQuestion !== false) {
            writer.uint32(32).bool(message.isSuggestedQuestion);
        }
        if (message.userCnt !== "0") {
            writer.uint32(40).int64(message.userCnt);
        }
        if (message.gift !== undefined) {
            exports.GiftDecoder.encode(message.gift, writer.uint32(50).fork()).join();
        }
        if (message.pollIdStr !== "") {
            writer.uint32(58).string(message.pollIdStr);
        }
        if (message.suggestedQuestionKey !== "") {
            writer.uint32(66).string(message.suggestedQuestionKey);
        }
        if (message.pollDuration !== "0") {
            writer.uint32(72).int64(message.pollDuration);
        }
        if (message.timeRemain !== "0") {
            writer.uint32(80).int64(message.timeRemain);
        }
        if (message.pollIndex !== "0") {
            writer.uint32(88).int64(message.pollIndex);
        }
        if (message.templateId !== "0") {
            writer.uint32(96).int64(message.templateId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastPollMessage_PollBasicInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.pollSponsor = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.giftId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.isSuggestedQuestion = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.userCnt = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.gift = exports.GiftDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.pollIdStr = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.suggestedQuestionKey = reader.string();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.pollDuration = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.timeRemain = reader.int64().toString();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.pollIndex = reader.int64().toString();
                    continue;
                }
                case 12: {
                    if (tag !== 96) {
                        break;
                    }
                    message.templateId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastRankTextMessage() {
    return {
        common: undefined,
        scene: 0,
        ownerIdxBeforeUpdate: "0",
        ownerIdxAfterUpdate: "0",
        selfGetBadgeMsg: undefined,
        otherGetBadgeMsg: undefined,
        curUserId: "0",
    };
}
exports.WebcastRankTextMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.scene !== 0) {
            writer.uint32(16).int32(message.scene);
        }
        if (message.ownerIdxBeforeUpdate !== "0") {
            writer.uint32(24).int64(message.ownerIdxBeforeUpdate);
        }
        if (message.ownerIdxAfterUpdate !== "0") {
            writer.uint32(32).int64(message.ownerIdxAfterUpdate);
        }
        if (message.selfGetBadgeMsg !== undefined) {
            exports.TextDecoder.encode(message.selfGetBadgeMsg, writer.uint32(42).fork()).join();
        }
        if (message.otherGetBadgeMsg !== undefined) {
            exports.TextDecoder.encode(message.otherGetBadgeMsg, writer.uint32(50).fork()).join();
        }
        if (message.curUserId !== "0") {
            writer.uint32(56).int64(message.curUserId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastRankTextMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.scene = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.ownerIdxBeforeUpdate = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.ownerIdxAfterUpdate = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.selfGetBadgeMsg = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.otherGetBadgeMsg = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.curUserId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicBattlePunishFinish() {
    return { common: undefined, channelId: "0", opUid: "0", reason: 0, battleId: "0", battleSettings: undefined };
}
exports.WebcastLinkMicBattlePunishFinishDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.channelId !== "0") {
            writer.uint32(16).int64(message.channelId);
        }
        if (message.opUid !== "0") {
            writer.uint32(24).int64(message.opUid);
        }
        if (message.reason !== 0) {
            writer.uint32(32).int32(message.reason);
        }
        if (message.battleId !== "0") {
            writer.uint32(40).int64(message.battleId);
        }
        if (message.battleSettings !== undefined) {
            exports.BattleSettingDecoder.encode(message.battleSettings, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicBattlePunishFinish();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.channelId = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.opUid = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.reason = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.battleId = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.battleSettings = exports.BattleSettingDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkmicBattleTaskMessage() {
    return {
        common: undefined,
        battleTaskMessageType: 0,
        taskStart: undefined,
        taskUpdate: undefined,
        taskSettle: undefined,
        rewardSettle: undefined,
        battleId: "0",
    };
}
exports.WebcastLinkmicBattleTaskMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.battleTaskMessageType !== 0) {
            writer.uint32(16).int32(message.battleTaskMessageType);
        }
        if (message.taskStart !== undefined) {
            exports.WebcastLinkmicBattleTaskMessage_BattleTaskStartDecoder.encode(message.taskStart, writer.uint32(26).fork()).join();
        }
        if (message.taskUpdate !== undefined) {
            exports.WebcastLinkmicBattleTaskMessage_BattleTaskUpdateDecoder.encode(message.taskUpdate, writer.uint32(34).fork()).join();
        }
        if (message.taskSettle !== undefined) {
            exports.WebcastLinkmicBattleTaskMessage_BattleTaskSettleDecoder.encode(message.taskSettle, writer.uint32(42).fork()).join();
        }
        if (message.rewardSettle !== undefined) {
            exports.WebcastLinkmicBattleTaskMessage_BattleRewardSettleDecoder.encode(message.rewardSettle, writer.uint32(50).fork()).join();
        }
        if (message.battleId !== "0") {
            writer.uint32(160).int64(message.battleId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.battleTaskMessageType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.taskStart = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStartDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.taskUpdate = exports.WebcastLinkmicBattleTaskMessage_BattleTaskUpdateDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.taskSettle = exports.WebcastLinkmicBattleTaskMessage_BattleTaskSettleDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.rewardSettle = exports.WebcastLinkmicBattleTaskMessage_BattleRewardSettleDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 160) {
                        break;
                    }
                    message.battleId = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkmicBattleTaskMessage_BattlePrompt() {
    return { promptKey: "", promptElements: [] };
}
exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.promptKey !== "") {
            writer.uint32(10).string(message.promptKey);
        }
        for (const v of message.promptElements) {
            exports.WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElemDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattlePrompt();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.promptKey = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.promptElements.push(exports.WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElemDecoder.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem() {
    return { promptFieldKey: "", promptFieldValue: "" };
}
exports.WebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElemDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.promptFieldKey !== "") {
            writer.uint32(10).string(message.promptFieldKey);
        }
        if (message.promptFieldValue !== "") {
            writer.uint32(18).string(message.promptFieldValue);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattlePrompt_BattlePromptElem();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.promptFieldKey = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.promptFieldValue = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart() {
    return { battleBonusConfig: undefined };
}
exports.WebcastLinkmicBattleTaskMessage_BattleTaskStartDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.battleBonusConfig !== undefined) {
            exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfigDecoder.encode(message.battleBonusConfig, writer.uint32(10).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.battleBonusConfig = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfigDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig() {
    return {
        previewStartTime: "0",
        previewPeriodConfig: [],
        taskPeriodConfig: undefined,
        rewardPeriodConfig: undefined,
        taskGiftGuide: {},
        previewStartTimestamp: "0",
        previewClickActionSchemaUrl: "",
    };
}
exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfigDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.previewStartTime !== "0") {
            writer.uint32(8).int64(message.previewStartTime);
        }
        for (const v of message.previewPeriodConfig) {
            exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriodDecoder.encode(v, writer.uint32(18).fork()).join();
        }
        if (message.taskPeriodConfig !== undefined) {
            exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfigDecoder.encode(message.taskPeriodConfig, writer.uint32(26).fork()).join();
        }
        if (message.rewardPeriodConfig !== undefined) {
            exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfigDecoder.encode(message.rewardPeriodConfig, writer.uint32(34).fork()).join();
        }
        Object.entries(message.taskGiftGuide).forEach(([key, value]) => {
            exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntryDecoder.encode({
                key: key,
                value,
            }, writer.uint32(42).fork()).join();
        });
        if (message.previewStartTimestamp !== "0") {
            writer.uint32(48).int64(message.previewStartTimestamp);
        }
        if (message.previewClickActionSchemaUrl !== "") {
            writer.uint32(58).string(message.previewClickActionSchemaUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.previewStartTime = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.previewPeriodConfig.push(exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriodDecoder.decode(reader, reader.uint32()));
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.taskPeriodConfig = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfigDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.rewardPeriodConfig =
                        exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfigDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    const entry5 = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntryDecoder.decode(reader, reader.uint32());
                    if (entry5.value !== undefined) {
                        message.taskGiftGuide[entry5.key] = entry5.value;
                    }
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.previewStartTimestamp = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.previewClickActionSchemaUrl = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry() {
    return { key: "0", value: undefined };
}
exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntryDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.key !== "0") {
            writer.uint32(8).int64(message.key);
        }
        if (message.value !== undefined) {
            exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuideDecoder.encode(message.value, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskGiftGuideEntry();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.key = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.value = exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuideDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod() {
    return { duration: "0", promot: undefined, icon: undefined };
}
exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriodDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.duration !== "0") {
            writer.uint32(8).int64(message.duration);
        }
        if (message.promot !== undefined) {
            exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.encode(message.promot, writer.uint32(18).fork()).join();
        }
        if (message.icon !== undefined) {
            exports.ImageDecoder.encode(message.icon, writer.uint32(202).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_PreviewPeriod();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.duration = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.promot = exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.icon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig() {
    return {
        taskStartTime: "0",
        duration: "0",
        targetStartTimestamp: "0",
        clickAction: 0,
        clickToastPrompt: undefined,
        promptType: 0,
        taskStaticPrompt: undefined,
        progressTarget: "0",
        targetType: 0,
        icon: undefined,
        clickActionSchemaUrl: "",
    };
}
exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfigDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.taskStartTime !== "0") {
            writer.uint32(8).int64(message.taskStartTime);
        }
        if (message.duration !== "0") {
            writer.uint32(16).int64(message.duration);
        }
        if (message.targetStartTimestamp !== "0") {
            writer.uint32(24).int64(message.targetStartTimestamp);
        }
        if (message.clickAction !== 0) {
            writer.uint32(88).int32(message.clickAction);
        }
        if (message.clickToastPrompt !== undefined) {
            exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.encode(message.clickToastPrompt, writer.uint32(98).fork()).join();
        }
        if (message.promptType !== 0) {
            writer.uint32(168).int32(message.promptType);
        }
        if (message.taskStaticPrompt !== undefined) {
            exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.encode(message.taskStaticPrompt, writer.uint32(178).fork()).join();
        }
        if (message.progressTarget !== "0") {
            writer.uint32(184).int64(message.progressTarget);
        }
        if (message.targetType !== 0) {
            writer.uint32(192).int32(message.targetType);
        }
        if (message.icon !== undefined) {
            exports.ImageDecoder.encode(message.icon, writer.uint32(202).fork()).join();
        }
        if (message.clickActionSchemaUrl !== "") {
            writer.uint32(210).string(message.clickActionSchemaUrl);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_TaskPeriodConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.taskStartTime = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.duration = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.targetStartTimestamp = reader.int64().toString();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.clickAction = reader.int32();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.clickToastPrompt = exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.promptType = reader.int32();
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.taskStaticPrompt = exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 23: {
                    if (tag !== 184) {
                        break;
                    }
                    message.progressTarget = reader.int64().toString();
                    continue;
                }
                case 24: {
                    if (tag !== 192) {
                        break;
                    }
                    message.targetType = reader.int32();
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.icon = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 26: {
                    if (tag !== 210) {
                        break;
                    }
                    message.clickActionSchemaUrl = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig() {
    return {
        rewardStartTime: "0",
        duration: "0",
        rewardMultiple: 0,
        rewardStartTimestamp: "0",
        rewardPraparePrompt: undefined,
        rewardingPrompt: undefined,
        clickPrompt: undefined,
    };
}
exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfigDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rewardStartTime !== "0") {
            writer.uint32(8).int64(message.rewardStartTime);
        }
        if (message.duration !== "0") {
            writer.uint32(16).int64(message.duration);
        }
        if (message.rewardMultiple !== 0) {
            writer.uint32(24).int32(message.rewardMultiple);
        }
        if (message.rewardStartTimestamp !== "0") {
            writer.uint32(32).int64(message.rewardStartTimestamp);
        }
        if (message.rewardPraparePrompt !== undefined) {
            exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.encode(message.rewardPraparePrompt, writer.uint32(90).fork()).join();
        }
        if (message.rewardingPrompt !== undefined) {
            exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.encode(message.rewardingPrompt, writer.uint32(98).fork()).join();
        }
        if (message.clickPrompt !== undefined) {
            exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.encode(message.clickPrompt, writer.uint32(106).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_RewardPeriodConfig();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.rewardStartTime = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.duration = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.rewardMultiple = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.rewardStartTimestamp = reader.int64().toString();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.rewardPraparePrompt = exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.rewardingPrompt = exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.clickPrompt = exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide() {
    return {
        guidePrompt: undefined,
        promptType: 0,
        disappearDuration: 0,
        iconImage: undefined,
        giftImage: undefined,
        recommendGiftId: "0",
        recommendGiftCount: 0,
        guideContent: undefined,
    };
}
exports.WebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuideDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.guidePrompt !== undefined) {
            exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.encode(message.guidePrompt, writer.uint32(10).fork()).join();
        }
        if (message.promptType !== 0) {
            writer.uint32(16).int32(message.promptType);
        }
        if (message.disappearDuration !== 0) {
            writer.uint32(24).int32(message.disappearDuration);
        }
        if (message.iconImage !== undefined) {
            exports.ImageDecoder.encode(message.iconImage, writer.uint32(90).fork()).join();
        }
        if (message.giftImage !== undefined) {
            exports.ImageDecoder.encode(message.giftImage, writer.uint32(98).fork()).join();
        }
        if (message.recommendGiftId !== "0") {
            writer.uint32(168).int64(message.recommendGiftId);
        }
        if (message.recommendGiftCount !== 0) {
            writer.uint32(176).int32(message.recommendGiftCount);
        }
        if (message.guideContent !== undefined) {
            exports.TextDecoder.encode(message.guideContent, writer.uint32(186).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskStart_BattleBonusConfig_BattleTaskGiftAmountGuide();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.guidePrompt = exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.promptType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.disappearDuration = reader.int32();
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.iconImage = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.giftImage = exports.ImageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.recommendGiftId = reader.int64().toString();
                    continue;
                }
                case 22: {
                    if (tag !== 176) {
                        break;
                    }
                    message.recommendGiftCount = reader.int32();
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.guideContent = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskUpdate() {
    return { taskProgress: "0", fromUserUid: "0", promptKey: "", logId: "" };
}
exports.WebcastLinkmicBattleTaskMessage_BattleTaskUpdateDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.taskProgress !== "0") {
            writer.uint32(8).int64(message.taskProgress);
        }
        if (message.fromUserUid !== "0") {
            writer.uint32(16).int64(message.fromUserUid);
        }
        if (message.promptKey !== "") {
            writer.uint32(26).string(message.promptKey);
        }
        if (message.logId !== "") {
            writer.uint32(170).string(message.logId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskUpdate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.taskProgress = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.fromUserUid = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.promptKey = reader.string();
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.logId = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkmicBattleTaskMessage_BattleTaskSettle() {
    return { taskResult: 0, rewardStartTime: "0", rewardStartTimestamp: "0" };
}
exports.WebcastLinkmicBattleTaskMessage_BattleTaskSettleDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.taskResult !== 0) {
            writer.uint32(8).int32(message.taskResult);
        }
        if (message.rewardStartTime !== "0") {
            writer.uint32(16).int64(message.rewardStartTime);
        }
        if (message.rewardStartTimestamp !== "0") {
            writer.uint32(24).int64(message.rewardStartTimestamp);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleTaskSettle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.taskResult = reader.int32();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.rewardStartTime = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.rewardStartTimestamp = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkmicBattleTaskMessage_BattleRewardSettle() {
    return { rewardSettlePrompt: undefined, status: 0 };
}
exports.WebcastLinkmicBattleTaskMessage_BattleRewardSettleDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.rewardSettlePrompt !== undefined) {
            exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.encode(message.rewardSettlePrompt, writer.uint32(10).fork()).join();
        }
        if (message.status !== 0) {
            writer.uint32(16).int32(message.status);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkmicBattleTaskMessage_BattleRewardSettle();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.rewardSettlePrompt = exports.WebcastLinkmicBattleTaskMessage_BattlePromptDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.status = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicFanTicketMethod() {
    return { common: undefined, FanTicketRoomNotice: undefined };
}
exports.WebcastLinkMicFanTicketMethodDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.FanTicketRoomNotice !== undefined) {
            exports.FanTicketRoomNoticeContentDecoder.encode(message.FanTicketRoomNotice, writer.uint32(18).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicFanTicketMethod();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.FanTicketRoomNotice = exports.FanTicketRoomNoticeContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMicMethod() {
    return {
        common: undefined,
        messageType: 0,
        accessKey: "",
        anchorLinkmicId: "0",
        userId: "0",
        fanTicket: "0",
        totalLinkMicFanTicket: "0",
        channelId: "0",
        layout: "0",
        vendor: "0",
        dimension: "0",
        theme: "",
        inviteUid: "0",
        reply: 0,
        duration: 0,
        matchType: 0,
        win: false,
        prompts: "",
        toUserId: "0",
        tips: "",
        startTimeMs: "0",
        confluenceType: 0,
        fromRoomId: "0",
        inviteType: 0,
        subType: "0",
        rtcExtInfo: "",
        appId: "",
        appSign: "",
        anchorLinkMicIdStr: "",
        rivalAnchorId: "0",
        rivalLinkmicId: 0,
        rivalLinkmicIdStr: "",
        shouldShowPopup: false,
        rtcJoinChannel: false,
        fanTicketType: 0,
    };
}
exports.WebcastLinkMicMethodDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.messageType !== 0) {
            writer.uint32(16).int32(message.messageType);
        }
        if (message.accessKey !== "") {
            writer.uint32(26).string(message.accessKey);
        }
        if (message.anchorLinkmicId !== "0") {
            writer.uint32(32).int64(message.anchorLinkmicId);
        }
        if (message.userId !== "0") {
            writer.uint32(40).int64(message.userId);
        }
        if (message.fanTicket !== "0") {
            writer.uint32(48).int64(message.fanTicket);
        }
        if (message.totalLinkMicFanTicket !== "0") {
            writer.uint32(56).int64(message.totalLinkMicFanTicket);
        }
        if (message.channelId !== "0") {
            writer.uint32(64).int64(message.channelId);
        }
        if (message.layout !== "0") {
            writer.uint32(72).int64(message.layout);
        }
        if (message.vendor !== "0") {
            writer.uint32(80).int64(message.vendor);
        }
        if (message.dimension !== "0") {
            writer.uint32(88).int64(message.dimension);
        }
        if (message.theme !== "") {
            writer.uint32(98).string(message.theme);
        }
        if (message.inviteUid !== "0") {
            writer.uint32(104).int64(message.inviteUid);
        }
        if (message.reply !== 0) {
            writer.uint32(112).int32(message.reply);
        }
        if (message.duration !== 0) {
            writer.uint32(128).int32(message.duration);
        }
        if (message.matchType !== 0) {
            writer.uint32(144).int32(message.matchType);
        }
        if (message.win !== false) {
            writer.uint32(152).bool(message.win);
        }
        if (message.prompts !== "") {
            writer.uint32(162).string(message.prompts);
        }
        if (message.toUserId !== "0") {
            writer.uint32(168).int64(message.toUserId);
        }
        if (message.tips !== "") {
            writer.uint32(202).string(message.tips);
        }
        if (message.startTimeMs !== "0") {
            writer.uint32(208).int64(message.startTimeMs);
        }
        if (message.confluenceType !== 0) {
            writer.uint32(216).int32(message.confluenceType);
        }
        if (message.fromRoomId !== "0") {
            writer.uint32(224).int64(message.fromRoomId);
        }
        if (message.inviteType !== 0) {
            writer.uint32(232).int32(message.inviteType);
        }
        if (message.subType !== "0") {
            writer.uint32(240).int64(message.subType);
        }
        if (message.rtcExtInfo !== "") {
            writer.uint32(258).string(message.rtcExtInfo);
        }
        if (message.appId !== "") {
            writer.uint32(274).string(message.appId);
        }
        if (message.appSign !== "") {
            writer.uint32(282).string(message.appSign);
        }
        if (message.anchorLinkMicIdStr !== "") {
            writer.uint32(298).string(message.anchorLinkMicIdStr);
        }
        if (message.rivalAnchorId !== "0") {
            writer.uint32(304).int64(message.rivalAnchorId);
        }
        if (message.rivalLinkmicId !== 0) {
            writer.uint32(312).int32(message.rivalLinkmicId);
        }
        if (message.rivalLinkmicIdStr !== "") {
            writer.uint32(322).string(message.rivalLinkmicIdStr);
        }
        if (message.shouldShowPopup !== false) {
            writer.uint32(328).bool(message.shouldShowPopup);
        }
        if (message.rtcJoinChannel !== false) {
            writer.uint32(408).bool(message.rtcJoinChannel);
        }
        if (message.fanTicketType !== 0) {
            writer.uint32(416).int32(message.fanTicketType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMicMethod();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.messageType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.accessKey = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.anchorLinkmicId = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.userId = reader.int64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.fanTicket = reader.int64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.totalLinkMicFanTicket = reader.int64().toString();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.channelId = reader.int64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 72) {
                        break;
                    }
                    message.layout = reader.int64().toString();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.vendor = reader.int64().toString();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.dimension = reader.int64().toString();
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.theme = reader.string();
                    continue;
                }
                case 13: {
                    if (tag !== 104) {
                        break;
                    }
                    message.inviteUid = reader.int64().toString();
                    continue;
                }
                case 14: {
                    if (tag !== 112) {
                        break;
                    }
                    message.reply = reader.int32();
                    continue;
                }
                case 16: {
                    if (tag !== 128) {
                        break;
                    }
                    message.duration = reader.int32();
                    continue;
                }
                case 18: {
                    if (tag !== 144) {
                        break;
                    }
                    message.matchType = reader.int32();
                    continue;
                }
                case 19: {
                    if (tag !== 152) {
                        break;
                    }
                    message.win = reader.bool();
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.prompts = reader.string();
                    continue;
                }
                case 21: {
                    if (tag !== 168) {
                        break;
                    }
                    message.toUserId = reader.int64().toString();
                    continue;
                }
                case 25: {
                    if (tag !== 202) {
                        break;
                    }
                    message.tips = reader.string();
                    continue;
                }
                case 26: {
                    if (tag !== 208) {
                        break;
                    }
                    message.startTimeMs = reader.int64().toString();
                    continue;
                }
                case 27: {
                    if (tag !== 216) {
                        break;
                    }
                    message.confluenceType = reader.int32();
                    continue;
                }
                case 28: {
                    if (tag !== 224) {
                        break;
                    }
                    message.fromRoomId = reader.int64().toString();
                    continue;
                }
                case 29: {
                    if (tag !== 232) {
                        break;
                    }
                    message.inviteType = reader.int32();
                    continue;
                }
                case 30: {
                    if (tag !== 240) {
                        break;
                    }
                    message.subType = reader.int64().toString();
                    continue;
                }
                case 32: {
                    if (tag !== 258) {
                        break;
                    }
                    message.rtcExtInfo = reader.string();
                    continue;
                }
                case 34: {
                    if (tag !== 274) {
                        break;
                    }
                    message.appId = reader.string();
                    continue;
                }
                case 35: {
                    if (tag !== 282) {
                        break;
                    }
                    message.appSign = reader.string();
                    continue;
                }
                case 37: {
                    if (tag !== 298) {
                        break;
                    }
                    message.anchorLinkMicIdStr = reader.string();
                    continue;
                }
                case 38: {
                    if (tag !== 304) {
                        break;
                    }
                    message.rivalAnchorId = reader.int64().toString();
                    continue;
                }
                case 39: {
                    if (tag !== 312) {
                        break;
                    }
                    message.rivalLinkmicId = reader.int32();
                    continue;
                }
                case 40: {
                    if (tag !== 322) {
                        break;
                    }
                    message.rivalLinkmicIdStr = reader.string();
                    continue;
                }
                case 41: {
                    if (tag !== 328) {
                        break;
                    }
                    message.shouldShowPopup = reader.bool();
                    continue;
                }
                case 51: {
                    if (tag !== 408) {
                        break;
                    }
                    message.rtcJoinChannel = reader.bool();
                    continue;
                }
                case 52: {
                    if (tag !== 416) {
                        break;
                    }
                    message.fanTicketType = reader.int32();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastUnauthorizedMemberMessage() {
    return {
        common: undefined,
        action: 0,
        nickNamePrefix: undefined,
        nickName: "",
        enterText: undefined,
        publicAreaCommon: undefined,
    };
}
exports.WebcastUnauthorizedMemberMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.action !== 0) {
            writer.uint32(16).int32(message.action);
        }
        if (message.nickNamePrefix !== undefined) {
            exports.TextDecoder.encode(message.nickNamePrefix, writer.uint32(26).fork()).join();
        }
        if (message.nickName !== "") {
            writer.uint32(34).string(message.nickName);
        }
        if (message.enterText !== undefined) {
            exports.TextDecoder.encode(message.enterText, writer.uint32(42).fork()).join();
        }
        if (message.publicAreaCommon !== undefined) {
            exports.PublicAreaMessageCommonDecoder.encode(message.publicAreaCommon, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastUnauthorizedMemberMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.nickNamePrefix = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.nickName = reader.string();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.enterText = exports.TextDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.publicAreaCommon = exports.PublicAreaMessageCommonDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastMsgDetectMessage() {
    return {
        common: undefined,
        detectType: 0,
        triggerCondition: undefined,
        timeInfo: undefined,
        triggerBy: 0,
        fromRegion: "",
    };
}
exports.WebcastMsgDetectMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.detectType !== 0) {
            writer.uint32(16).int32(message.detectType);
        }
        if (message.triggerCondition !== undefined) {
            exports.WebcastMsgDetectMessage_TriggerConditionDecoder.encode(message.triggerCondition, writer.uint32(26).fork()).join();
        }
        if (message.timeInfo !== undefined) {
            exports.WebcastMsgDetectMessage_TimeInfoDecoder.encode(message.timeInfo, writer.uint32(34).fork()).join();
        }
        if (message.triggerBy !== 0) {
            writer.uint32(40).int32(message.triggerBy);
        }
        if (message.fromRegion !== "") {
            writer.uint32(50).string(message.fromRegion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastMsgDetectMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.detectType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.triggerCondition = exports.WebcastMsgDetectMessage_TriggerConditionDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.timeInfo = exports.WebcastMsgDetectMessage_TimeInfoDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.triggerBy = reader.int32();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.fromRegion = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastMsgDetectMessage_TimeInfo() {
    return { clientStartMs: "0", apiRecvTimeMs: "0", apiSendToGoimMs: "0" };
}
exports.WebcastMsgDetectMessage_TimeInfoDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.clientStartMs !== "0") {
            writer.uint32(8).int64(message.clientStartMs);
        }
        if (message.apiRecvTimeMs !== "0") {
            writer.uint32(16).int64(message.apiRecvTimeMs);
        }
        if (message.apiSendToGoimMs !== "0") {
            writer.uint32(24).int64(message.apiSendToGoimMs);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastMsgDetectMessage_TimeInfo();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.clientStartMs = reader.int64().toString();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.apiRecvTimeMs = reader.int64().toString();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.apiSendToGoimMs = reader.int64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastMsgDetectMessage_TriggerCondition() {
    return {
        uplinkDetectHttp: false,
        uplinkDetectWebSocket: false,
        detectP2PMsg: false,
        detectRoomMsg: false,
        httpOptimize: false,
    };
}
exports.WebcastMsgDetectMessage_TriggerConditionDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.uplinkDetectHttp !== false) {
            writer.uint32(8).bool(message.uplinkDetectHttp);
        }
        if (message.uplinkDetectWebSocket !== false) {
            writer.uint32(16).bool(message.uplinkDetectWebSocket);
        }
        if (message.detectP2PMsg !== false) {
            writer.uint32(24).bool(message.detectP2PMsg);
        }
        if (message.detectRoomMsg !== false) {
            writer.uint32(32).bool(message.detectRoomMsg);
        }
        if (message.httpOptimize !== false) {
            writer.uint32(40).bool(message.httpOptimize);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastMsgDetectMessage_TriggerCondition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 8) {
                        break;
                    }
                    message.uplinkDetectHttp = reader.bool();
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.uplinkDetectWebSocket = reader.bool();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.detectP2PMsg = reader.bool();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.detectRoomMsg = reader.bool();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.httpOptimize = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastOecLiveShoppingMessage() {
    return { common: undefined, data1: 0, shopData: undefined, shopTimings: undefined, details: undefined };
}
exports.WebcastOecLiveShoppingMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.data1 !== 0) {
            writer.uint32(16).uint32(message.data1);
        }
        if (message.shopData !== undefined) {
            exports.WebcastOecLiveShoppingMessage_LiveShoppingDataDecoder.encode(message.shopData, writer.uint32(34).fork()).join();
        }
        if (message.shopTimings !== undefined) {
            exports.TimeStampContainerDecoder.encode(message.shopTimings, writer.uint32(42).fork()).join();
        }
        if (message.details !== undefined) {
            exports.WebcastOecLiveShoppingMessage_LiveShoppingDetailsDecoder.encode(message.details, writer.uint32(74).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastOecLiveShoppingMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.data1 = reader.uint32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.shopData = exports.WebcastOecLiveShoppingMessage_LiveShoppingDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.shopTimings = exports.TimeStampContainerDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.details = exports.WebcastOecLiveShoppingMessage_LiveShoppingDetailsDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastOecLiveShoppingMessage_LiveShoppingData() {
    return {
        title: "",
        priceString: "",
        imageUrl: "",
        shopUrl: "",
        data1: "0",
        shopName: "",
        data2: "0",
        shopUrl2: "",
        data3: "0",
        data4: "0",
    };
}
exports.WebcastOecLiveShoppingMessage_LiveShoppingDataDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.priceString !== "") {
            writer.uint32(18).string(message.priceString);
        }
        if (message.imageUrl !== "") {
            writer.uint32(26).string(message.imageUrl);
        }
        if (message.shopUrl !== "") {
            writer.uint32(34).string(message.shopUrl);
        }
        if (message.data1 !== "0") {
            writer.uint32(48).uint64(message.data1);
        }
        if (message.shopName !== "") {
            writer.uint32(58).string(message.shopName);
        }
        if (message.data2 !== "0") {
            writer.uint32(64).uint64(message.data2);
        }
        if (message.shopUrl2 !== "") {
            writer.uint32(74).string(message.shopUrl2);
        }
        if (message.data3 !== "0") {
            writer.uint32(80).uint64(message.data3);
        }
        if (message.data4 !== "0") {
            writer.uint32(88).uint64(message.data4);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastOecLiveShoppingMessage_LiveShoppingData();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.title = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.priceString = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.imageUrl = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.shopUrl = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 48) {
                        break;
                    }
                    message.data1 = reader.uint64().toString();
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.shopName = reader.string();
                    continue;
                }
                case 8: {
                    if (tag !== 64) {
                        break;
                    }
                    message.data2 = reader.uint64().toString();
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.shopUrl2 = reader.string();
                    continue;
                }
                case 10: {
                    if (tag !== 80) {
                        break;
                    }
                    message.data3 = reader.uint64().toString();
                    continue;
                }
                case 11: {
                    if (tag !== 88) {
                        break;
                    }
                    message.data4 = reader.uint64().toString();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastOecLiveShoppingMessage_LiveShoppingDetails() {
    return { id1: "", data1: "", data2: 0, timestamp: "0", data: undefined };
}
exports.WebcastOecLiveShoppingMessage_LiveShoppingDetailsDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.id1 !== "") {
            writer.uint32(10).string(message.id1);
        }
        if (message.data1 !== "") {
            writer.uint32(26).string(message.data1);
        }
        if (message.data2 !== 0) {
            writer.uint32(32).uint32(message.data2);
        }
        if (message.timestamp !== "0") {
            writer.uint32(40).uint64(message.timestamp);
        }
        if (message.data !== undefined) {
            exports.ValueLabelDecoder.encode(message.data, writer.uint32(50).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastOecLiveShoppingMessage_LiveShoppingDetails();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.id1 = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.data1 = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.data2 = reader.uint32();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.timestamp = reader.uint64().toString();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.data = exports.ValueLabelDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastRoomPinMessage() {
    return {
        common: undefined,
        chatMessage: undefined,
        socialMessage: undefined,
        giftMessage: undefined,
        memberMessage: undefined,
        likeMessage: undefined,
        method: "",
        pinTime: "0",
        operator: undefined,
        action: 0,
        displayDuration: "0",
        pinId: "0",
        ecStreamerKey: "",
    };
}
exports.WebcastRoomPinMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.chatMessage !== undefined) {
            exports.WebcastChatMessageDecoder.encode(message.chatMessage, writer.uint32(18).fork()).join();
        }
        if (message.socialMessage !== undefined) {
            exports.WebcastSocialMessageDecoder.encode(message.socialMessage, writer.uint32(26).fork()).join();
        }
        if (message.giftMessage !== undefined) {
            exports.WebcastGiftMessageDecoder.encode(message.giftMessage, writer.uint32(34).fork()).join();
        }
        if (message.memberMessage !== undefined) {
            exports.WebcastMemberMessageDecoder.encode(message.memberMessage, writer.uint32(42).fork()).join();
        }
        if (message.likeMessage !== undefined) {
            exports.WebcastLikeMessageDecoder.encode(message.likeMessage, writer.uint32(50).fork()).join();
        }
        if (message.method !== "") {
            writer.uint32(242).string(message.method);
        }
        if (message.pinTime !== "0") {
            writer.uint32(248).int64(message.pinTime);
        }
        if (message.operator !== undefined) {
            exports.UserDecoder.encode(message.operator, writer.uint32(258).fork()).join();
        }
        if (message.action !== 0) {
            writer.uint32(264).int32(message.action);
        }
        if (message.displayDuration !== "0") {
            writer.uint32(272).int64(message.displayDuration);
        }
        if (message.pinId !== "0") {
            writer.uint32(280).int64(message.pinId);
        }
        if (message.ecStreamerKey !== "") {
            writer.uint32(290).string(message.ecStreamerKey);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastRoomPinMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.chatMessage = exports.WebcastChatMessageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.socialMessage = exports.WebcastSocialMessageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.giftMessage = exports.WebcastGiftMessageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.memberMessage = exports.WebcastMemberMessageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.likeMessage = exports.WebcastLikeMessageDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 30: {
                    if (tag !== 242) {
                        break;
                    }
                    message.method = reader.string();
                    continue;
                }
                case 31: {
                    if (tag !== 248) {
                        break;
                    }
                    message.pinTime = reader.int64().toString();
                    continue;
                }
                case 32: {
                    if (tag !== 258) {
                        break;
                    }
                    message.operator = exports.UserDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 33: {
                    if (tag !== 264) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
                }
                case 34: {
                    if (tag !== 272) {
                        break;
                    }
                    message.displayDuration = reader.int64().toString();
                    continue;
                }
                case 35: {
                    if (tag !== 280) {
                        break;
                    }
                    message.pinId = reader.int64().toString();
                    continue;
                }
                case 36: {
                    if (tag !== 290) {
                        break;
                    }
                    message.ecStreamerKey = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkMessage() {
    return {
        common: undefined,
        MessageType: 0,
        LinkerId: "0",
        Scene: 0,
        InviteContent: undefined,
        ReplyContent: undefined,
        CreateContent: undefined,
        CloseContent: undefined,
        EnterContent: undefined,
        LeaveContent: undefined,
        CancelContent: undefined,
        KickOutContent: undefined,
        LinkedListChangeContent: undefined,
        UpdateUserContent: undefined,
        WaitingListChangeContent: undefined,
        MuteContent: undefined,
        RandomMatchContent: undefined,
        UpdateUserSettingContent: undefined,
        MicIdxUpdateContent: undefined,
        ListChangeContent: undefined,
        CohostListChangeContent: undefined,
        MediaChangeContent: undefined,
        AcceptNoticeContent: undefined,
        SysKickOutContent: undefined,
        UserToastContent: undefined,
        extra: "",
        expireTimestamp: "0",
        transferExtra: "",
    };
}
exports.WebcastLinkMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.MessageType !== 0) {
            writer.uint32(16).int32(message.MessageType);
        }
        if (message.LinkerId !== "0") {
            writer.uint32(24).int64(message.LinkerId);
        }
        if (message.Scene !== 0) {
            writer.uint32(32).int32(message.Scene);
        }
        if (message.InviteContent !== undefined) {
            exports.LinkerInviteContentDecoder.encode(message.InviteContent, writer.uint32(42).fork()).join();
        }
        if (message.ReplyContent !== undefined) {
            exports.LinkerReplyContentDecoder.encode(message.ReplyContent, writer.uint32(50).fork()).join();
        }
        if (message.CreateContent !== undefined) {
            exports.LinkerCreateContentDecoder.encode(message.CreateContent, writer.uint32(58).fork()).join();
        }
        if (message.CloseContent !== undefined) {
            exports.LinkerCloseContentDecoder.encode(message.CloseContent, writer.uint32(66).fork()).join();
        }
        if (message.EnterContent !== undefined) {
            exports.LinkerEnterContentDecoder.encode(message.EnterContent, writer.uint32(74).fork()).join();
        }
        if (message.LeaveContent !== undefined) {
            exports.LinkerLeaveContentDecoder.encode(message.LeaveContent, writer.uint32(82).fork()).join();
        }
        if (message.CancelContent !== undefined) {
            exports.LinkerCancelContentDecoder.encode(message.CancelContent, writer.uint32(90).fork()).join();
        }
        if (message.KickOutContent !== undefined) {
            exports.LinkerKickOutContentDecoder.encode(message.KickOutContent, writer.uint32(98).fork()).join();
        }
        if (message.LinkedListChangeContent !== undefined) {
            exports.LinkerLinkedListChangeContentDecoder.encode(message.LinkedListChangeContent, writer.uint32(106).fork()).join();
        }
        if (message.UpdateUserContent !== undefined) {
            exports.LinkerUpdateUserContentDecoder.encode(message.UpdateUserContent, writer.uint32(114).fork()).join();
        }
        if (message.WaitingListChangeContent !== undefined) {
            exports.LinkerWaitingListChangeContentDecoder.encode(message.WaitingListChangeContent, writer.uint32(122).fork()).join();
        }
        if (message.MuteContent !== undefined) {
            exports.LinkerMuteContentDecoder.encode(message.MuteContent, writer.uint32(130).fork()).join();
        }
        if (message.RandomMatchContent !== undefined) {
            exports.LinkerRandomMatchContentDecoder.encode(message.RandomMatchContent, writer.uint32(138).fork()).join();
        }
        if (message.UpdateUserSettingContent !== undefined) {
            exports.LinkerUpdateUserSettingContentDecoder.encode(message.UpdateUserSettingContent, writer.uint32(146).fork()).join();
        }
        if (message.MicIdxUpdateContent !== undefined) {
            exports.LinkerMicIdxUpdateContentDecoder.encode(message.MicIdxUpdateContent, writer.uint32(154).fork()).join();
        }
        if (message.ListChangeContent !== undefined) {
            exports.LinkerListChangeContentDecoder.encode(message.ListChangeContent, writer.uint32(162).fork()).join();
        }
        if (message.CohostListChangeContent !== undefined) {
            exports.CohostListChangeContentDecoder.encode(message.CohostListChangeContent, writer.uint32(170).fork()).join();
        }
        if (message.MediaChangeContent !== undefined) {
            exports.LinkerMediaChangeContentDecoder.encode(message.MediaChangeContent, writer.uint32(178).fork()).join();
        }
        if (message.AcceptNoticeContent !== undefined) {
            exports.LinkerAcceptNoticeContentDecoder.encode(message.AcceptNoticeContent, writer.uint32(186).fork()).join();
        }
        if (message.SysKickOutContent !== undefined) {
            exports.LinkerSysKickOutContentDecoder.encode(message.SysKickOutContent, writer.uint32(810).fork()).join();
        }
        if (message.UserToastContent !== undefined) {
            exports.LinkmicUserToastContentDecoder.encode(message.UserToastContent, writer.uint32(818).fork()).join();
        }
        if (message.extra !== "") {
            writer.uint32(1602).string(message.extra);
        }
        if (message.expireTimestamp !== "0") {
            writer.uint32(1608).int64(message.expireTimestamp);
        }
        if (message.transferExtra !== "") {
            writer.uint32(1618).string(message.transferExtra);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.MessageType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.LinkerId = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.Scene = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.InviteContent = exports.LinkerInviteContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.ReplyContent = exports.LinkerReplyContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 7: {
                    if (tag !== 58) {
                        break;
                    }
                    message.CreateContent = exports.LinkerCreateContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 8: {
                    if (tag !== 66) {
                        break;
                    }
                    message.CloseContent = exports.LinkerCloseContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 9: {
                    if (tag !== 74) {
                        break;
                    }
                    message.EnterContent = exports.LinkerEnterContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 10: {
                    if (tag !== 82) {
                        break;
                    }
                    message.LeaveContent = exports.LinkerLeaveContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 11: {
                    if (tag !== 90) {
                        break;
                    }
                    message.CancelContent = exports.LinkerCancelContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 12: {
                    if (tag !== 98) {
                        break;
                    }
                    message.KickOutContent = exports.LinkerKickOutContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 13: {
                    if (tag !== 106) {
                        break;
                    }
                    message.LinkedListChangeContent = exports.LinkerLinkedListChangeContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 14: {
                    if (tag !== 114) {
                        break;
                    }
                    message.UpdateUserContent = exports.LinkerUpdateUserContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 15: {
                    if (tag !== 122) {
                        break;
                    }
                    message.WaitingListChangeContent = exports.LinkerWaitingListChangeContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 16: {
                    if (tag !== 130) {
                        break;
                    }
                    message.MuteContent = exports.LinkerMuteContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 17: {
                    if (tag !== 138) {
                        break;
                    }
                    message.RandomMatchContent = exports.LinkerRandomMatchContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 18: {
                    if (tag !== 146) {
                        break;
                    }
                    message.UpdateUserSettingContent = exports.LinkerUpdateUserSettingContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 19: {
                    if (tag !== 154) {
                        break;
                    }
                    message.MicIdxUpdateContent = exports.LinkerMicIdxUpdateContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 20: {
                    if (tag !== 162) {
                        break;
                    }
                    message.ListChangeContent = exports.LinkerListChangeContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 21: {
                    if (tag !== 170) {
                        break;
                    }
                    message.CohostListChangeContent = exports.CohostListChangeContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 22: {
                    if (tag !== 178) {
                        break;
                    }
                    message.MediaChangeContent = exports.LinkerMediaChangeContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 23: {
                    if (tag !== 186) {
                        break;
                    }
                    message.AcceptNoticeContent = exports.LinkerAcceptNoticeContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 101: {
                    if (tag !== 810) {
                        break;
                    }
                    message.SysKickOutContent = exports.LinkerSysKickOutContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 102: {
                    if (tag !== 818) {
                        break;
                    }
                    message.UserToastContent = exports.LinkmicUserToastContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 200: {
                    if (tag !== 1602) {
                        break;
                    }
                    message.extra = reader.string();
                    continue;
                }
                case 201: {
                    if (tag !== 1608) {
                        break;
                    }
                    message.expireTimestamp = reader.int64().toString();
                    continue;
                }
                case 202: {
                    if (tag !== 1618) {
                        break;
                    }
                    message.transferExtra = reader.string();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseWebcastLinkLayerMessage() {
    return {
        common: undefined,
        messageType: 0,
        channelId: "0",
        scene: 0,
        source: "",
        centerizedIdc: "",
        rtcRoomId: "0",
        createChannelContent: undefined,
        listChangeContent: undefined,
        inviteContent: undefined,
        applyContent: undefined,
        permitApplyContent: undefined,
        replyInviteContent: undefined,
        kickOutContent: undefined,
        cancelApplyContent: undefined,
        cancelInviteContent: undefined,
        leaveContent: undefined,
        finishContent: undefined,
        joinDirectContent: undefined,
        joinGroupContent: undefined,
        permitGroupContent: undefined,
        cancelGroupContent: undefined,
        leaveGroupContent: undefined,
        p2pGroupChangeContent: undefined,
        groupChangeContent: undefined,
        businessContent: undefined,
    };
}
exports.WebcastLinkLayerMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.messageType !== 0) {
            writer.uint32(16).int32(message.messageType);
        }
        if (message.channelId !== "0") {
            writer.uint32(24).int64(message.channelId);
        }
        if (message.scene !== 0) {
            writer.uint32(32).int32(message.scene);
        }
        if (message.source !== "") {
            writer.uint32(42).string(message.source);
        }
        if (message.centerizedIdc !== "") {
            writer.uint32(50).string(message.centerizedIdc);
        }
        if (message.rtcRoomId !== "0") {
            writer.uint32(56).int64(message.rtcRoomId);
        }
        if (message.createChannelContent !== undefined) {
            exports.CreateChannelContentDecoder.encode(message.createChannelContent, writer.uint32(802).fork()).join();
        }
        if (message.listChangeContent !== undefined) {
            exports.ListChangeContentDecoder.encode(message.listChangeContent, writer.uint32(818).fork()).join();
        }
        if (message.inviteContent !== undefined) {
            exports.InviteContentDecoder.encode(message.inviteContent, writer.uint32(826).fork()).join();
        }
        if (message.applyContent !== undefined) {
            exports.ApplyContentDecoder.encode(message.applyContent, writer.uint32(834).fork()).join();
        }
        if (message.permitApplyContent !== undefined) {
            exports.PermitApplyContentDecoder.encode(message.permitApplyContent, writer.uint32(842).fork()).join();
        }
        if (message.replyInviteContent !== undefined) {
            exports.ReplyInviteContentDecoder.encode(message.replyInviteContent, writer.uint32(850).fork()).join();
        }
        if (message.kickOutContent !== undefined) {
            exports.KickOutContentDecoder.encode(message.kickOutContent, writer.uint32(858).fork()).join();
        }
        if (message.cancelApplyContent !== undefined) {
            exports.CancelApplyContentDecoder.encode(message.cancelApplyContent, writer.uint32(866).fork()).join();
        }
        if (message.cancelInviteContent !== undefined) {
            exports.CancelInviteContentDecoder.encode(message.cancelInviteContent, writer.uint32(874).fork()).join();
        }
        if (message.leaveContent !== undefined) {
            exports.LeaveContentDecoder.encode(message.leaveContent, writer.uint32(882).fork()).join();
        }
        if (message.finishContent !== undefined) {
            exports.FinishChannelContentDecoder.encode(message.finishContent, writer.uint32(890).fork()).join();
        }
        if (message.joinDirectContent !== undefined) {
            exports.JoinDirectContentDecoder.encode(message.joinDirectContent, writer.uint32(898).fork()).join();
        }
        if (message.joinGroupContent !== undefined) {
            exports.JoinGroupContentDecoder.encode(message.joinGroupContent, writer.uint32(906).fork()).join();
        }
        if (message.permitGroupContent !== undefined) {
            exports.PermitJoinGroupContentDecoder.encode(message.permitGroupContent, writer.uint32(914).fork()).join();
        }
        if (message.cancelGroupContent !== undefined) {
            exports.CancelJoinGroupContentDecoder.encode(message.cancelGroupContent, writer.uint32(922).fork()).join();
        }
        if (message.leaveGroupContent !== undefined) {
            exports.LeaveJoinGroupContentDecoder.encode(message.leaveGroupContent, writer.uint32(930).fork()).join();
        }
        if (message.p2pGroupChangeContent !== undefined) {
            exports.P2PGroupChangeContentDecoder.encode(message.p2pGroupChangeContent, writer.uint32(938).fork()).join();
        }
        if (message.groupChangeContent !== undefined) {
            exports.GroupChangeContentDecoder.encode(message.groupChangeContent, writer.uint32(946).fork()).join();
        }
        if (message.businessContent !== undefined) {
            exports.BusinessContentDecoder.encode(message.businessContent, writer.uint32(1602).fork()).join();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseWebcastLinkLayerMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.messageType = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.channelId = reader.int64().toString();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.scene = reader.int32();
                    continue;
                }
                case 5: {
                    if (tag !== 42) {
                        break;
                    }
                    message.source = reader.string();
                    continue;
                }
                case 6: {
                    if (tag !== 50) {
                        break;
                    }
                    message.centerizedIdc = reader.string();
                    continue;
                }
                case 7: {
                    if (tag !== 56) {
                        break;
                    }
                    message.rtcRoomId = reader.int64().toString();
                    continue;
                }
                case 100: {
                    if (tag !== 802) {
                        break;
                    }
                    message.createChannelContent = exports.CreateChannelContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 102: {
                    if (tag !== 818) {
                        break;
                    }
                    message.listChangeContent = exports.ListChangeContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 103: {
                    if (tag !== 826) {
                        break;
                    }
                    message.inviteContent = exports.InviteContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 104: {
                    if (tag !== 834) {
                        break;
                    }
                    message.applyContent = exports.ApplyContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 105: {
                    if (tag !== 842) {
                        break;
                    }
                    message.permitApplyContent = exports.PermitApplyContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 106: {
                    if (tag !== 850) {
                        break;
                    }
                    message.replyInviteContent = exports.ReplyInviteContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 107: {
                    if (tag !== 858) {
                        break;
                    }
                    message.kickOutContent = exports.KickOutContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 108: {
                    if (tag !== 866) {
                        break;
                    }
                    message.cancelApplyContent = exports.CancelApplyContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 109: {
                    if (tag !== 874) {
                        break;
                    }
                    message.cancelInviteContent = exports.CancelInviteContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 110: {
                    if (tag !== 882) {
                        break;
                    }
                    message.leaveContent = exports.LeaveContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 111: {
                    if (tag !== 890) {
                        break;
                    }
                    message.finishContent = exports.FinishChannelContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 112: {
                    if (tag !== 898) {
                        break;
                    }
                    message.joinDirectContent = exports.JoinDirectContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 113: {
                    if (tag !== 906) {
                        break;
                    }
                    message.joinGroupContent = exports.JoinGroupContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 114: {
                    if (tag !== 914) {
                        break;
                    }
                    message.permitGroupContent = exports.PermitJoinGroupContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 115: {
                    if (tag !== 922) {
                        break;
                    }
                    message.cancelGroupContent = exports.CancelJoinGroupContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 116: {
                    if (tag !== 930) {
                        break;
                    }
                    message.leaveGroupContent = exports.LeaveJoinGroupContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 117: {
                    if (tag !== 938) {
                        break;
                    }
                    message.p2pGroupChangeContent = exports.P2PGroupChangeContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 118: {
                    if (tag !== 946) {
                        break;
                    }
                    message.groupChangeContent = exports.GroupChangeContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 200: {
                    if (tag !== 1602) {
                        break;
                    }
                    message.businessContent = exports.BusinessContentDecoder.decode(reader, reader.uint32());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
function createBaseRoomVerifyMessage() {
    return { common: undefined, action: 0, content: "", noticeType: "0", closeRoom: false };
}
exports.RoomVerifyMessageDecoder = {
    encode(message, writer = new wire_1.BinaryWriter()) {
        if (message.common !== undefined) {
            exports.CommonMessageDataDecoder.encode(message.common, writer.uint32(10).fork()).join();
        }
        if (message.action !== 0) {
            writer.uint32(16).int32(message.action);
        }
        if (message.content !== "") {
            writer.uint32(26).string(message.content);
        }
        if (message.noticeType !== "0") {
            writer.uint32(32).int64(message.noticeType);
        }
        if (message.closeRoom !== false) {
            writer.uint32(40).bool(message.closeRoom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseRoomVerifyMessage();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.common = exports.CommonMessageDataDecoder.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 16) {
                        break;
                    }
                    message.action = reader.int32();
                    continue;
                }
                case 3: {
                    if (tag !== 26) {
                        break;
                    }
                    message.content = reader.string();
                    continue;
                }
                case 4: {
                    if (tag !== 32) {
                        break;
                    }
                    message.noticeType = reader.int64().toString();
                    continue;
                }
                case 5: {
                    if (tag !== 40) {
                        break;
                    }
                    message.closeRoom = reader.bool();
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
};
//# sourceMappingURL=tiktok-schema-v2.js.map